@inherits LayoutComponentBase
@inject IJSRuntime jsRuntime
@inject HttpClient Http
@inject Utilities.ILocalStorage LocalStorage
@inject NavigationManager NavigationManager
@using System.Net;
@using GEORGE.Shared.Models
@using System.Timers;

<CascadingValue Value="this">
@* <CascadingValue Value="AppState"> *@
    <div class="page">
        <div class="sidebar">
            <NavMenu ToggleSidebar="ToggleSidebar" />
        </div>

        <main >

            <div class="main-layout">

                <div class="top-row px-4">

                    <!-- Przycisk wywołujący akcję na stronie -->
                    @if (!string.IsNullOrEmpty(AppState.SomeData))
             @*        @if (!string.IsNullOrEmpty(opisPrzycisku)) *@
                    {
                        <Button Type="primary" Style="width:100%" OnClick="@(async () =>
                            {
                                if (OnShowDialogAddNew.HasDelegate)
                                {
                                    await OnShowDialogAddNew.InvokeAsync(null);
                                    Console.WriteLine("EventCallback wywołany");
                                }
                                else
                                {
                                    Console.WriteLine("EventCallback nie przypisany");
                                }
                            })">
                            @AppState.SomeData
                        </Button>
                    }

                    <a @onclick="@(()=>{ ShowDialogInfo(); })">Informacja</a>
                    <button class="btn btn-link" @onclick="OnClickEuro">Kurs Euro</button>

                    @if (loggedIn)
                    {
                        <label style="font-size: 14px; width: 500px; text-align: right;"> &ensp; Data logowania: @infDzien &ensp; Zalogowany użytkownik: @user &ensp; </label>
                        <a class="btn btn-sm btn-primary text-white" title="Konto" href="account"><span class="oi oi-key"></span></a>
                        <button class="btn btn-sm btn-danger" title="Wyloguj" @onclick="Logout"><span class="oi oi-account-logout"></span></button>
                    }
                    else
                    {
                        <label style="font-size: 14px; width: 500px; text-align: right;">&ensp; Program uruchomiono: @infDzien &ensp; Proszę się zalogować.  &ensp; </label>
                        <button class="btn btn-sm btn-success" title="Zaloguj" @onclick="OpenLogin"><span class="oi oi-account-login"></span></button>
                    }

                </div>

                <div class="modal fade @classShowInfo" tabindex="-1" style="display: @displayInfo;margin: auto; top: 50%; left: 50%; transform: translate(-50%, -50%); position: absolute; width: 25%;">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Informacja o systemie</h5>
                            </div>
                            <div class="modal-body">

                                <label>Program autorstwa: Leszek Mularski tel. 500 040 556</label>

                            </div>
                            <div class="modal-footer d-flex">
                                <Button class="ms-auto" @onclick="() => HideDialogInfo()">OK</Button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="content px-4">
                    @Body
                </div>
            </div>
        </main>
    </div>
</CascadingValue>

<div class="modal-backdrop fade @(showEuro ? "show" : "") @(displayEuro ? "d-block" : "d-none")"></div>

<div class="modal fade @(showEuro ? "show" : "")  @(displayEuro ? "d-block" : "d-none")" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">[Kurs dnia: @DateTime.Now]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="del_zlec" class="form-label">@strkurs</label>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseModal">Zamknij</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade @(showLog ? "show" : "")   @(displayLog ? "d-block" : "d-none") fixed-position" tabindex="0" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Formularz logowania</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="loginEmail" class="form-label">Użytkownik</label>
                    <input type="text" class="form-control" id="loginEmail" placeholder="Podaj nazwę użytkownika" autocomplete="on" required @bind="user" @ref="loginInput" @onkeydown="HandleKeyDown" />
                </div>
                <div class="mb-3">
                    <label for="loginPassword" class="form-label">Hasło</label>
                    <input type="password" class="form-control" placeholder="Podaj hasło" id="loginPassword" required @bind-value="pass" @onkeydown="HandleKeyDown" />
                </div>
            </div>
            <div class="modal-footer">
                <div tabindex="0">
                    <button type="button" class="btn btn-success" @onclick="Login">Zaloguj</button>
                </div>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Zakończ</button>
            </div>
        </div>
    </div>
</div>


<div class="modal-backdrop fade @(pokazbladLogowania ? "show" : "") @(pokazbladLogowania ? "d-block" : "d-none")"></div>

<div class="modal fade @(pokazbladLogowania ? "show" : "") @(pokazbladLogowania ? "d-block" : "d-none")" @ref="frmOk" @onfocus="CloseOK" @onkeypress="CloseOK" tabindex="0" role="dialog">
    <div class="modal-dialog" role="document">
        @if (loggedIn)
        {
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Logowanie powiodło się</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseOK">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="loginEmail" class="form-label">Zalogowałeś się do systemu. [@(4 - counter_timer)]</label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseOK">Zakończ</button>
                </div>
            </div>
        }
        else
        {
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Sprawdź uprawnienia....</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        @if (pokazbladPolaczenia)
                        {
                            <label for="loginEmail" class="form-label">Błąd połączenia do bazy danych!!!. Zgłoś problem administratorowi.</label>
                        }
                        else
                        {
                            <label for="loginEmail" class="form-label">
                                Nie udało zalogować się do systemu.
                                <br />
                                <br />Zgłoś problem administratorowi.
                                <br />
                                <br />Sprawdź czy masz dostęp do sieci.
                                <br />
                                <br />Otwórz konsole i sprawdź logi.
                                <br />
                                <br />
                            </label>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Zakończ</button>
                </div>
            </div>
        }

    </div>
</div>

@code {
    [Parameter]
    public EventCallback OnShowDialogAddNew { get; set; }

    [Inject] private AppState AppState { get; set; } = default!;

    [Inject]
    private NavigationManager? navigationManager { get; set; }

    private string displayInfo = "none;";
    private string classShowInfo = "";

    private string strkurs = "";
    private bool displayEuro = false;
    private bool showEuro = false;

    private bool showLog, displayLog, loggedIn, pokazbladLogowania, pokazbladPolaczenia;

    private string? user;
    private string? pass;
    private bool zaladowalem = false;

    private string infDzien = DateTime.Now.ToString("dd MMMM");

    private List<Pracownicy>? pracownicy;

    private ElementReference loginInput;
    private ElementReference frmOk;

    private bool showSidebar = false;

    protected override async Task OnInitializedAsync()
    {
        user = await LocalStorage.GetStringAsync("user");

        if (user != null)
        {
            loggedIn = true;
            infDzien = await LocalStorage.GetStringAsync("loginTime");

            var datalogowania = await LocalStorage.GetStringAsync("loginTime");

            if (!string.IsNullOrEmpty(datalogowania))
            {
                var loginTime = Convert.ToDateTime(datalogowania);

                if (loginTime.AddMonths(12) < DateTime.Now)
                {
                    infDzien = "Zaloguj się ponownie.";
                    await Logout();
                }
            }
        }

        AppState.OnChange += StateHasChanged;
    }

    private async Task ToggleSidebar(bool show)
    {
        showSidebar = show;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Timer1?.Dispose();
        AppState.OnChange -= StateHasChanged;
    }

    public async Task ShowDialogInfo()
    {

        displayInfo = "block";
        await Task.Delay(50);
        classShowInfo = "show";
        StateHasChanged();

    }

    private async Task HideDialogInfo()
    {

        classShowInfo = "";
        await Task.Delay(100);
        displayInfo = "none";

        StateHasChanged();
    }

    private async Task OnClickEuro()
    {
        strkurs = "";

        try
        {
            //kursdnia = await Http.GetFromJsonAsync<List<Nbp>>("https://api.nbp.pl/api/exchangerates/rates/a/eur/last/1/?format=json");
            string json = await Http.GetStringAsync("https://api.nbp.pl/api/exchangerates/rates/a/eur/last/1/?format=json");
            int smid;
            smid = json.IndexOf("mid");

            //kursdnia= System.Text.Json.JsonSerializer.Deserialize<List<Nbp>>(json);
            strkurs = "Kurs NBP " + json.Substring(smid + 5, 6) + " PLN za 1€";//Convert.ToString(kursdnia[0].rates[0].mid);
        }
        catch (Exception e)
        {
            strkurs = e.Message;
        }

        displayEuro = true;
        await Task.Delay(100);
        showEuro = true;

        StateHasChanged();

    }

    public void CloseModal()
    {
        displayEuro = false;
        showEuro = false;
    }

    public async Task OpenLogin()
    {
        displayLog = true;
        showLog = true;
        await Task.Delay(100);
    }

    public async Task Logout()
    {

        await LocalStorage.RemoveAsync("user");
        await LocalStorage.RemoveAsync("loginTime");

        loggedIn = false;
        pass = null;

        zaladowalem = true;

        SetHeaderAndBody();

        NavigationManager.NavigateTo("", true);

    }

    private async Task Login()
    {
        if (!string.IsNullOrEmpty(user) && !string.IsNullOrEmpty(pass))
        {
            await Close();

            try
            {

                pracownicy = await Http.GetFromJsonAsync<List<Pracownicy>>($"api/Pracownicy/{user}/{DateTime.Now.DayOfYear}/{pass}");

                pokazbladLogowania = true;

                if (pracownicy != null)
                {
                    if (pracownicy.Count > 0)
                    {
                        loggedIn = true;
                        zaladowalem = true;
                        await LocalStorage.SaveStringAsync("user", user);
                        await LocalStorage.SaveStringAsync("loginTime", DateTime.Now.ToString());

                        var userAgent = await jsRuntime.InvokeAsync<string>("eval", "navigator.userAgent");
                        var logowania = new Logowania
                            {
                                Uzytkownik = user,
                                RodzajPrzegladarki = userAgent,
                                Datalogowania = DateTime.Now,
                            };

                        await Http.PostAsJsonAsync($"/api/Logowania", logowania);

                        InicjalizujTimer();

                    }
                    else
                    {
                        pokazbladLogowania = true;
                        pass = null;
                        loggedIn = false;
                    }
                }
                else
                {
                    pokazbladLogowania = true;
                    pass = null;
                    loggedIn = false;
                }

            }
            catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
            {
                pokazbladLogowania = true;
                pass = null;
                loggedIn = false;
                Console.WriteLine("Brak danych - próba zalogowania!");
            }

        }

        try
        {

            SetHeaderAndBody();

            if (loggedIn == false)
            {

                await OpenLogin();

            }

            //await jsRuntime.InvokeVoidAsync("focusElement", frmOk);

        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            Console.WriteLine($"Brak danych - próba zalogowania! Info:{ex.Message}");
        }
    }

    public void SetHeaderAndBody()
    {
        StateHasChanged();
        zaladowalem = false;
    }

    private async Task CloseOK()
    {
        if (loggedIn)
        {
            await Task.Delay(500);
        }
        else
        {
            await Task.Delay(22000);
        }

        pokazbladLogowania = false;
        showLog = false;
        displayLog = false;

        NavigationManager.NavigateTo($"", true);

    }

    private async Task Close()
    {

        await Task.Delay(10);

        pokazbladLogowania = false;
        showLog = false;
        displayLog = false;

    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Login();

            await CloseOK();
        }
    }


    private Timer? Timer1;
    private int counter_timer = 0;

    public void InicjalizujTimer()
    {
        Timer1 = new Timer(1000);
        Timer1.Elapsed += async (sender, e) => await ObslugaZdarzeniaTimera(sender, e);
        Timer1.AutoReset = true;
        Timer1.Start();
    }

    private async Task ObslugaZdarzeniaTimera(object? sender, ElapsedEventArgs e)
    {
        Timer1?.Stop();
        counter_timer++;

        if (counter_timer >= 3)
        {
            counter_timer = 0;
            Dispose();
            await CloseOK();
        }
        else
        {
            await InvokeAsync(StateHasChanged);
            Timer1?.Start();
        }
    }

}
