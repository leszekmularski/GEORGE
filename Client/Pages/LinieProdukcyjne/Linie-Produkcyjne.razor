@page "/Linie-Produkcyjne"
@using GEORGE.Shared.Models
@using GEORGE.Shared.Class
@inject HttpClient Http
@using AntDesign
@inject IMessageService _message
@inject Utilities.ILocalStorage LocalStorage
@using System.Net;

<h3>Linie produkcyjne</h3>

<Button Type="primary" OnClick="@(ShowDialogAddNew)">
    Dodaj nową linię produkcyjną
</Button>
<Divider></Divider>

@if (rodzajeLinieProdukcyjne == null)
{
    <p><em>Czekaj na załadowanie danych...</em></p>
}
else
{
    <ul>
        <Table TItem="LinieProdukcyjne" DataSource="@rodzajeLinieProdukcyjne">
            <Column Title="ID" @bind-Field="@context.Id" Hidden />
            <Column Title="Nazwa Linii Produkcyjnej" @bind-Field="@context.NazwaLiniiProdukcyjnej" Sortable OnFilter="(a, b) => a == b" Filterable />
            <Column Title="Id linii w systemie" @bind-Field="@context.IdLiniiProdukcyjnej" Sortable OnFilter="(a, b) => a == b" Filterable />
            <Column Title="Dzienna Zdolność Produkcyjna w [JP]" @bind-Field="@context.DziennaZdolnoscProdukcyjna" Sortable />
            <Column Title="Uwagi" @bind-Field="@context.Uwagi" Sortable />
            <Column Title="Autor zmian" @bind-Field="@context.KtoZapisal" Sortable />

            <!-- Przykład kolumny dla daty z formatowaniem -->
            <Column Title="Data Zapisu" TData="DateTime" DataIndex="DataZapisu" Format="yyyy-MM-dd HH:mm:ss" Sortable />
            <!-- Przykład kolumny z niestandardowym renderowaniem komórki -->
            <ActionColumn Title="Akcja">
                    @if (boolAdmin || boolZmian)
                    {
                        <Popconfirm Title="Czy chcesz edytować pozycję?"
                                    OnConfirm="()=> editRow(context.Id)"
                                    OkText="Tak"
                                    CancelText="Nie">
                            <a>Edytuj</a>
                        </Popconfirm>
                    }
                    @if (boolAdmin || boolUsuniecia)
                    {
                        <Popconfirm Title="Czy chcesz usunąć pozycję?"
                                    OnConfirm="()=> deleteRow(context.Id)"
                                    OkText="Tak"
                                    CancelText="Nie">
                            <a style="color:red">Usuń</a>
                        </Popconfirm>
                    }
                </ActionColumn>
        </Table>
    </ul>
}

<div class="modal fade @classShow" tabindex="-1" style="display: @display;">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <AntDesign.Form Model="@nlinie" Layout="FormLayout.Vertical" OnFinish="@HandleSubmit">
                    <AntDesign.FormItem Label="Id linii w systemie">
                        <AntDesign.Input @bind-Value="nlinie.IdLiniiProdukcyjnej" MaxLength="15" Required Placeholder="Podaj Id linii np #001" />
                    </AntDesign.FormItem>
                    <AntDesign.FormItem Label="Nazwa Linii Produkcyjnej">
                        <AntDesign.Input @bind-Value="nlinie.NazwaLiniiProdukcyjnej" Required />
                    </AntDesign.FormItem>
                    <AntDesign.FormItem Label="Dzienna Zdolność Produkcyjna [w jednostkach produkcyjnych]">
                        <AntDesign.Input @bind-Value="nlinie.DziennaZdolnoscProdukcyjna" />
                    </AntDesign.FormItem>
                    <AntDesign.FormItem Label="Uwagi">
                        <AntDesign.Input @bind-Value="nlinie.Uwagi" />
                    </AntDesign.FormItem>
                    <AntDesign.FormItem Label="Kto Zapisał">
                        <AntDesign.Input @bind-Value="nlinie.KtoZapisal" Required />
                    </AntDesign.FormItem>
                    <AntDesign.FormItem Label="Ostatnia Zmiana">
                        <AntDesign.Input @bind-Value="nlinie.OstatniaZmiana" />
                    </AntDesign.FormItem>
                    <AntDesign.FormItem>
                        <AntDesign.Button Type="primary" @onclick="@HandleAddNew" HtmlType="submit">Zapisz</AntDesign.Button>
                        <AntDesign.Button @onclick="@HandleCancel">Anuluj</AntDesign.Button>
                    </AntDesign.FormItem>
                </AntDesign.Form>
            </div>
            <div class="modal-footer d-flex">
                @ShowErr
            </div>
        </div>
    </div>
</div>

@code {

    [Inject] private AppState AppState { get; set; } = default!;

    private List<LinieProdukcyjne>? rodzajeLinieProdukcyjne;
    private List<LinieProdukcyjne>? oryginalLinieProdukcyjne;


    private bool _visible = false;
    private string display = "none;";
    private string classShow = "";

    private string ShowErr = "";

    private long cid = -1;

    private LinieProdukcyjne nlinie = new LinieProdukcyjne();

    protected override async Task OnInitializedAsync()
    {
        if (AppState != null)
        {
            AppState.SomeData = "";
        }

        await Laduj_Uprawnienia();

        try
        {
            rodzajeLinieProdukcyjne = await Http.GetFromJsonAsync<List<LinieProdukcyjne>>("api/LinieProdukcyjne/");

            nlinie.Id = 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"******* Błąd {ex.Message} - LinieProdukcyjne");
        }
    }

    bool blokujDwuKlik = false;

    private async Task HandleSubmit()
    {
        Console.WriteLine("HandleSubmit()");

        ShowErr = "";

        try
        {
            if (_visible == false || blokujDwuKlik) return;

            blokujDwuKlik = true;

            nlinie.IdLiniiProdukcyjnej = nlinie.IdLiniiProdukcyjnej.ToUpper();

            HttpResponseMessage response;

            if (cid == -1)
            {
                // Sprawdź unikalność NumerRodzajuKart
                var responsedbl = rodzajeLinieProdukcyjne.Where(e => e.IdLiniiProdukcyjnej == nlinie.IdLiniiProdukcyjnej);

                if (responsedbl != null && responsedbl.Count() > 0)
                {
                    // Wyświetl komunikat o błędzie, że NumerRodzajuKart nie jest unikalny
                    Console.WriteLine("Numer LINII musi być unikalny.");
                    //await _message.Error("Numer LINII musi być unikalny.");
                    ShowErr = "Numer LINII musi być unikalny.";
                    blokujDwuKlik = false;
                    return;
                }

                response = await Http.PostAsJsonAsync("api/LinieProdukcyjne", nlinie);
            }
            else
            {
                response = await Http.PutAsJsonAsync($"api/LinieProdukcyjne/{nlinie.Id}", nlinie);

                if (rodzajeLinieProdukcyjne != null) oryginalLinieProdukcyjne = rodzajeLinieProdukcyjne.DeepCopyList();
            }

            if (response.IsSuccessStatusCode)
            {
                if (nlinie.Id == 0)
                {
                    rodzajeLinieProdukcyjne.Add(nlinie); // Dodaj nowe nlinie do listy

                    rodzajeLinieProdukcyjne = await Http.GetFromJsonAsync<List<LinieProdukcyjne>>("api/LinieProdukcyjne/");
                }
                else
                {
                    // Znajdź istniejące nlinie i zaktualizuj je
                    var index = rodzajeLinieProdukcyjne.FindIndex(z => z.Id == nlinie.Id);

                    if (index != -1)
                    {
                        rodzajeLinieProdukcyjne[index] = nlinie;
                    }
                }

                _visible = false;
                nlinie = new LinieProdukcyjne(); // Zresetuj formularz

                await HideDialog();

                StateHasChanged(); // Odśwież widok

                blokujDwuKlik = false;
            }
            else
            {
                // Obsługa błędów
                Console.WriteLine("Błąd podczas zapisywania rodzaju nlinie - źródło RAZOR");

                blokujDwuKlik = false;
            }

        }
        catch (Exception ex)
        {
            await _message.Error(ex.Message);
            Console.WriteLine(ex.StackTrace);
        }
    }

    public async Task deleteRow(long id)
    {
        if (rodzajeLinieProdukcyjne == null) return;

        try
        {
            var response = await Http.DeleteAsync($"api/LinieProdukcyjne/{id}");

            if (response.IsSuccessStatusCode)
            {
                // Usunięcie rekordu z listy po pomyślnym usunięciu z serwera
                rodzajeLinieProdukcyjne = rodzajeLinieProdukcyjne.Where(r => r.Id != id).ToList();
                Console.WriteLine("Rekord został pomyślnie usunięty.");
            }
            else
            {
                Console.WriteLine($"Błąd podczas usuwania rekordu: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"******* Błąd {ex.Message}");
        }
    }


    public async Task editRow(long id)
    {
        try
        {
            if (rodzajeLinieProdukcyjne == null)
            {
                await _message.Error("Lista linii produkcyjnych nie została załadowana.");
                return;
            }

            // Tworzenie kopii listy
            oryginalLinieProdukcyjne = rodzajeLinieProdukcyjne.DeepCopyList();

            if (_visible)
            {
                _visible = false;
                await HideDialog();
            }
            else
            {
                // Inicjalizacja obiektu nlinie
                nlinie = new LinieProdukcyjne();

                // Znajdowanie wiersza do edycji
                var listOfData = rodzajeLinieProdukcyjne.FirstOrDefault(d => d.Id == id);

                if (listOfData != null)
                {
                    cid = id;
                    nlinie = listOfData;  // Przypisanie wybranego wiersza do nlinie

                    // nlinie.Id = listOfData.Id;
                    // nlinie.RowId = listOfData.RowId;
                    // nlinie.NazwaLiniiProdukcyjnej = listOfData.NazwaLiniiProdukcyjnej;
                    // nlinie.IdLiniiProdukcyjnej = listOfData.IdLiniiProdukcyjnej;
                    // nlinie.Uwagi = listOfData.Uwagi;
                    // nlinie.DataZapisu = listOfData.DataZapisu;
                    // nlinie.DziennaZdolnoscProdukcyjna = listOfData.DziennaZdolnoscProdukcyjna;
                    nlinie.OstatniaZmiana = "Zmiana: " + DateTime.Now.ToLongDateString();
                    // nlinie.KtoZapisal = listOfData.KtoZapisal;

                    _visible = true;

                    await ShowDialog();

                    // Wyświetl numer zamówienia w konsoli dla celów debugowania
                    Console.WriteLine(nlinie.NazwaLiniiProdukcyjnej);
                }
                else
                {
                    await _message.Error("Nie znaleziono danych do edycji.");
                    ShowErr = "Nie znaleziono danych do edycji.";
                }
            }
        }
        catch (Exception ex)
        {
            await _message.Error($"Wystąpił błąd: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
        }
    }

    public async Task HandleAddNew()
    {
        if (string.IsNullOrEmpty(nlinie.NazwaLiniiProdukcyjnej)) return;

        _visible = true;
        await HandleSubmit();
    }

    public async Task HandleCancel()
    {
        _visible = false;
        await HideDialog();
    }

    public async Task HandleCloseAdd()
    {
        _visible = false;
        await HideDialog();
        await HandleSubmit();
    }

    public async Task ShowDialogAddNew()
    {
        nlinie = new LinieProdukcyjne();
        cid = -1;
        ShowErr = "";

        if (rodzajeLinieProdukcyjne != null)
        {
            var prefiks = "#";
            var maxNumer = rodzajeLinieProdukcyjne
                .Where(x => x.IdLiniiProdukcyjnej.StartsWith(prefiks))
                .Select(x => int.TryParse(x.IdLiniiProdukcyjnej.Substring(prefiks.Length), out var numer) ? numer : 0)
                .DefaultIfEmpty(0) // W przypadku, gdy nie ma żadnych pasujących elementów, używamy 0
                .Max(); // Znajdujemy największy numer
            var kolejnyNr = $"{prefiks}{(maxNumer + 1).ToString("D3")}";
            nlinie.IdLiniiProdukcyjnej = kolejnyNr;
        }

        if (oryginalLinieProdukcyjne != null)
        {
            var prefiks = "#";
            var maxNumer = oryginalLinieProdukcyjne
                .Where(x => x.IdLiniiProdukcyjnej.StartsWith(prefiks))
                .Select(x => int.TryParse(x.IdLiniiProdukcyjnej.Substring(prefiks.Length), out var numer) ? numer : 0)
                .DefaultIfEmpty(0) // W przypadku, gdy nie ma żadnych pasujących elementów, używamy 0
                .Max(); // Znajdujemy największy numer
            var kolejnyNr = $"{prefiks}{(maxNumer + 1).ToString("D3")}";
            nlinie.IdLiniiProdukcyjnej = kolejnyNr;
        }

        display = "block";
        await Task.Delay(50);
        classShow = "show";
        StateHasChanged();
    }

    public async Task ShowDialog()
    {
        display = "block";
        await Task.Delay(50);
        classShow = "show";
        StateHasChanged();
    }

    private async Task HideDialog()
    {
        if (cid > 0 && rodzajeLinieProdukcyjne != null)
        {
            rodzajeLinieProdukcyjne = oryginalLinieProdukcyjne;
        }

        cid = -1;

        classShow = "";
        await Task.Delay(200);
        display = "none";

        StateHasChanged();
    }

    private bool boolOdczyt = false;
    private bool boolZmian = false;
    private bool boolUsuniecia = false;
    private bool boolAdmin = false;
    private string RowIdPracownika = "";
    private string? user;
    private List<UprawnieniaPracownikaViewModel>? uprawnienia;
  
    private async Task Laduj_Uprawnienia()
    {
        user = await LocalStorage.GetStringAsync("user");

        if (string.IsNullOrEmpty(user))
        {
            //NavigationManager.NavigateTo($"", true);
            return;
        }
        
        string nazwaTabeli = "KantowkaDoZlecen";

        Console.WriteLine($"api/ZwrocSatus/{user}/{nazwaTabeli}");

        try
        {
            uprawnienia = await Http.GetFromJsonAsync<List<UprawnieniaPracownikaViewModel>>($"/api/ZwrocSatus/{user}/{nazwaTabeli}");
        }
        catch (System.Net.Http.HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            Console.WriteLine("Brak danych!!!");
            await _message.Error("Brak danych - status użytkownika");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await _message.Error(ex.Message);
        }

        if (uprawnienia != null)
        {
            if (uprawnienia.Count > 0)
            {
                var znalezioneElementy = uprawnienia.Where(uprawnienie => uprawnienie.TableName == nazwaTabeli);
                Console.WriteLine("Znaleziono uprawnienia dla użytkownika: " + user + " w tabeli: " + nazwaTabeli + " ilość rekordów: " + znalezioneElementy.Count());
                if (znalezioneElementy.Any())
                {
                    var szuk = znalezioneElementy.FirstOrDefault(x => x.TableName == nazwaTabeli);
                    if (szuk != null)
                    {
                        boolOdczyt = szuk.Odczyt;
                        boolZmian = szuk.Zmiana;
                        boolUsuniecia = szuk.Usuniecie;
                        boolAdmin = szuk.Administrator;
                        RowIdPracownika = szuk.RowId;
                    }
                }
            }
        }
    }
}