@page "/Karty-Instrukcyjne"
@inject HttpClient Http
@inject IMessageService _message
@inject NavigationManager NavigationManager
@inject Utilities.ILocalStorage LocalStorage
@using System.Net;
@using GEORGE.Shared.Models
@using GEORGE.Shared.Class
@using AntDesign
@using System.Globalization
@inject IJSRuntime JSRuntime

<PageTitle>Program do wspomagania produkcji karty instrukcyjne</PageTitle>

<h3>Karty Instrukcyjne</h3>

@if (boolAdmin || boolZmian)
{
    <Button Type="primary" OnClick="@(ShowDialogAddNew)">
        Dodaj nowy rodzaj kart instrukcyjnych
    </Button>
}
<Divider></Divider>

@if (kartyInstrukcyjne == null)
{
    <p><em>Czekaj na załadowanie danych...</em></p>
}
else
{
    <ul>
        <Table TItem="KartyInstrukcyjne" DataSource="@kartyInstrukcyjne">
            <Column Title="ID" @bind-Field="@context.Id" Hidden />
            <Column Title="Numer Karty" @bind-Field="@context.NumerKarty" Sortable OnFilter="(a, b) => a == b" Filterable />
            <Column Title="Opis Karty" @bind-Field="@context.OpisKarty" Sortable />
            <Column Title="Nazwa Produktu" @bind-Field="@context.NazwaProduktu" Sortable OnFilter="(a, b) => a == b" Filterable />
            <Column Title="Nazwa Produktu cd" @bind-Field="@context.NazwaProduktu2" Sortable />
            <Column Title="Kod prod./System" @bind-Field="@context.KodProduktu" Sortable OnFilter="(a, b) => a == b" Filterable />
            

            <!-- Przykład kolumny dla daty z formatowaniem -->
            <Column Title="Data Zapisu" TData="DateTime" DataIndex="DataZapisu" Format="yyyy-MM-dd HH:mm:ss" Sortable />

            <!-- Przykład kolumny z niestandardowym renderowaniem komórki -->
            <ActionColumn Title="Akcja">
                <Template>
                    @{
                        var item = context as KartyInstrukcyjne;
                        if (!string.IsNullOrEmpty(item.LinkDoKartyNaSerwerze))
                        {
                            <a href="@item.LinkDoKartyNaSerwerze" download @onclick="@( () => DownloadFile(item.LinkDoKartyNaSerwerze) )">Pobierz kartę</a>
                        }
                    }
                </Template>
                @if (boolAdmin || boolZmian)
                {
                    <Popconfirm Title="Czy chcesz edytować pozycję?"
                                OnConfirm="()=> editRow(context.Id)"
                                OkText="Tak"
                                CancelText="Nie">
                        <a>Edytuj</a>
                    </Popconfirm>
                }
                @if (boolAdmin || boolUsuniecia)
                {
                    <Popconfirm Title="Czy chcesz usunąć pozycję?"
                                OnConfirm="()=> delRow(context.Id)"
                                OkText="Tak"
                                CancelText="Nie">
                        <a style="color:red">Usuń</a>
                    </Popconfirm>
                }
            </ActionColumn>
        </Table>
    </ul>
}

<div class="modal fade @classShow" tabindex="-1" style="display: @display;">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">

                <Form Model="@karty" Layout="FormLayout.Vertical" OnFinish="@HandleSubmit" ValidateMode=@FormValidateMode.Complex>

                    @if (!_edit)
                    {
                        <FormItem Label="Wybierz rodzaj karty" >
                            <Select TItem="RodzajeKartInstrukcyjnych"
                                    TItemValue="string"
                                    DataSource="@rodzajeKartInstrukcyjnych"
                                    @bind-Value="@_selectedValue"
                                    LabelName="@nameof(RodzajeKartInstrukcyjnych.NumerRodzajuKart)"
                                    ValueName="@nameof(RodzajeKartInstrukcyjnych.NumerRodzajuKart)"
                                    Placeholder="Wybierz rodzaj karty"
                                    DefaultActiveFirstOption="false"
                                    EnableSearch
                                    OnBlur="OnBlur"
                                    OnFocus="OnFocus"
                                    OnSelectedItemChanged="OnSelectedItemChangedHandler"
                                    OnSearch="OnSearch"
                                    FilterExpression="(item, searchValue) => CultureInfo.CurrentCulture.CompareInfo.IndexOf(item.Label, searchValue, CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase) >= 0">
                            </Select>
                            <Button Type="primary" @onclick="@GenerateNewNumber">Generuj nowy numer</Button>
                        </FormItem>
                    }

                    <FormItem Label="Numer Karty" Required>
                        <Input @bind-Value="karty.NumerKarty" ReadOnly/>
                    </FormItem>
                    <FormItem Label="Opis karty">
                        <Input @bind-Value="karty.OpisKarty" />
                    </FormItem>
                    <AntDesign.FormItem Label="Nazwa Produktu">
                        <AutoComplete Placeholder="Nazwa Produktu" @bind-Value="@karty.NazwaProduktu" Options="optionsProdukt" CompareWith="CompareWith"
                                      OnSelectionChange="OnSelectionChangeProdukt">
                            <OptionTemplate Context="option">
                                <AutoCompleteOption Value="@option.Value" Label="@option.Label">
                                </AutoCompleteOption>
                            </OptionTemplate>
                        </AutoComplete>
                    </AntDesign.FormItem>
                    <FormItem Label="Nazwa Produktu 2">
                        <Input @bind-Value="karty.NazwaProduktu2" />
                    </FormItem>
                    <FormItem Label="Kod Produktu / System">
                        <Input @bind-Value="karty.KodProduktu" />
                    </FormItem>
                    <FormItem Label="Kto Zapisał">
                        <Input @bind-Value="karty.KtoZapisal" />
                    </FormItem>
                    <FormItem Label="Ostatnia Zmiana">
                        <Input @bind-Value="karty.OstatniaZmiana" />
                    </FormItem>
                    <FormItem>
 @*                        <Upload Action="https://www.mocky.io/v2/5cc8019d300000980a055e76"
                                Name="files"
                                OnSingleCompleted="OnSingleCompleted">
                            <Button Icon="upload">
                                <span>Załącz plik PDF karty instrukcyjnej</span>
                            </Button>
                        </Upload> *@
                        <InputFile OnChange="HandleSelected" >Wybierz plik PDF karty instrukcyjnej</InputFile>
                        <br/>
                        @if (!blokuj_2_click)
                        {
                            <Button Type="primary" @onclick="@HandleAddNew" HtmlType="submit">Zapisz</Button>
                        }
                        <Button @onclick="@HandleCancel">Anuluj</Button>
                    </FormItem>
                </Form>
            </div>
        </div>
    </div>
</div>


@code {

    [Inject] private AppState AppState { get; set; } = default!;

    private List<KartyInstrukcyjne>? kartyInstrukcyjne;
    private List<KartyInstrukcyjne>? originalkartyInstrukcyjne;
    private List<RodzajeKartInstrukcyjnych>? rodzajeKartInstrukcyjnych;

    string? _selectedValue;
    RodzajeKartInstrukcyjnych? _selectedItem;

    private bool _visible = false;
    private bool _edit = false;
    private string display = "none;";
    private string classShow = "";

    private long id_del = -1;

    private long cid = -1;

    private KartyInstrukcyjne karty = new KartyInstrukcyjne();

    private AutoCompleteOption? selectItemProdukt;

    ObjectValueProduktOption[]? optionsProdukt;

    private bool blokuj_2_click = false;

    protected override async Task OnInitializedAsync()
    {
        if (AppState != null)
        {
            AppState.SomeData = "";
        }

        await Laduj_Uprawnienia();

        await SearchProdukt();

        rodzajeKartInstrukcyjnych = await Http.GetFromJsonAsync<List<RodzajeKartInstrukcyjnych>>("api/RodzajeKartInstrukcyjnych");

        kartyInstrukcyjne = await Http.GetFromJsonAsync<List<KartyInstrukcyjne>>("api/KartyInstrukcyjne");

        // var url = "http://leszekm:5000/";
        // var response = await Http.GetAsync(url);

        // if (response.IsSuccessStatusCode)
        // {
        //     var content = await response.Content.ReadAsStringAsync();
        //     Console.WriteLine("Pobrano dane: " + content);
        // }
        // else
        // {
        //     Console.WriteLine($"Błąd podczas pobierania danych. Status: {response.StatusCode}");
        // }

    }


    private async Task OnSelectionChangeProdukt(AutoCompleteOption item)
    {
        selectItemProdukt = item;

        Console.WriteLine("selectItemPowiat.Value" + selectItemProdukt.Value);

    }

    private void GenerateNewNumber()
    {
        if (!string.IsNullOrEmpty(_selectedValue))
        {
            // Generowanie nowego numeru na podstawie wybranego rodzaju karty
            var lastNumber = kartyInstrukcyjne
                .Where(r => r.NumerKarty.StartsWith(_selectedValue))
                .Select(r =>
                {
                    // Wyodrębnij część liczbową z numeru karty
                    var parts = r.NumerKarty.Split('-');
                    if (parts.Length == 2)
                    {
                        if (int.TryParse(parts[1], out int num))
                        {
                            Console.WriteLine($"Parsed number: {num} from {r.NumerKarty}");
                            return num;
                        }
                        else
                        {
                            Console.WriteLine($"Failed to parse number part: {parts[1]} from {r.NumerKarty}");
                        }
                    }
                    else
                    {
                        Console.WriteLine($"Failed to split number correctly from {r.NumerKarty}");
                    }
                    return 0;
                })
                .DefaultIfEmpty(0)
                .Max();

            karty.NumerKarty = $"{_selectedValue}-{lastNumber + 1:D3}";
            Console.WriteLine($"Generated new number: {karty.NumerKarty}");
        }
    }

    private async Task SearchProdukt()
    {

        try
        {

            var listaprodukt = await Http.GetFromJsonAsync<List<string>>("/api/KartaInstrProdukt");

            if (listaprodukt != null)
            {
                optionsProdukt = listaprodukt.Select(kod => new ObjectValueProduktOption()
                    {
                        value = kod.ToString()
                    }).ToArray();

                karty.NazwaProduktu = karty.NazwaProduktu;

            }


        }
        catch (Exception)
        {
            Console.WriteLine("Metoda -  SearchPowiat");
        }
    }


    private async Task HandleSubmit()
    {
        if (string.IsNullOrEmpty(karty.NumerKarty))
        {
            await _message.Error("Aby dodać nową kartę kliknij generuj nowy numer");
            return;
        }

        blokuj_2_click = true;

        HttpResponseMessage response;

        if (karty.Id == 0)
        {
            response = await Http.PostAsJsonAsync("api/KartyInstrukcyjne", karty);
        }
        else
        {
            response = await Http.PutAsJsonAsync($"api/KartyInstrukcyjne/{karty.Id}", karty);

            if (kartyInstrukcyjne != null) originalkartyInstrukcyjne = kartyInstrukcyjne.DeepCopyList();
        }

        if (response.IsSuccessStatusCode)
        {

            if (karty.Id == 0)
            {
                kartyInstrukcyjne.Add(karty); // Dodaj nowe karty do listy

                blokuj_2_click = false;
            }
            else
            {
                // Znajdź istniejące karty i zaktualizuj je
                var index = kartyInstrukcyjne.FindIndex(z => z.Id == karty.Id);

                if (index != -1)
                {
                    kartyInstrukcyjne[index] = karty;
                }
            }

            _visible = false;

            karty = new KartyInstrukcyjne(); // Zresetuj formularz

            await HideDialog();

            kartyInstrukcyjne = await Http.GetFromJsonAsync<List<KartyInstrukcyjne>>("api/KartyInstrukcyjne");

            if (kartyInstrukcyjne != null) originalkartyInstrukcyjne = kartyInstrukcyjne.DeepCopyList();

            StateHasChanged(); // Odśwież widok
        }
        else
        {
            // Obsługa błędów
            Console.WriteLine("Błąd podczas zapisywania zlecenia");
        }
    }


    private async Task delRow(long xid_del)
    {
        if (!boolUsuniecia)
        {
            await _message.Error("Błędne hasło");
            return;
        }

        id_del = xid_del;

        var response = await Http.DeleteAsync($"api/KartyInstrukcyjne/{id_del}");

        if (response.IsSuccessStatusCode)
        {
            var zlecenie = kartyInstrukcyjne.FirstOrDefault(z => z.Id == id_del);
            if (zlecenie != null)
            {
                kartyInstrukcyjne.Remove(zlecenie);
                kartyInstrukcyjne = await Http.GetFromJsonAsync<List<KartyInstrukcyjne>>("api/KartyInstrukcyjne");
                await _message.Success("Kartę usunięto!");
            }
        }
        else
        {
            kartyInstrukcyjne = await Http.GetFromJsonAsync<List<KartyInstrukcyjne>>("api/KartyInstrukcyjne");
            Console.WriteLine("Błąd podczas usuwania karty.");
            await _message.Error("Błąd podczas usuwania karty");
        }

        id_del = -1;

    }

    public async Task editRow(long id)
    {
        //listOfData = listOfData.Where(d => d.Id != id).ToArray();
        if (kartyInstrukcyjne == null) return;

        blokuj_2_click = false;

        originalkartyInstrukcyjne = kartyInstrukcyjne.DeepCopyList();

        _edit = true;

        // Logika edycji
        if (_visible)
        {
            _visible = false;
            await HideDialog();
        }
        else
        {
            karty = new KartyInstrukcyjne();

            var listOfData = kartyInstrukcyjne.Where(d => d.Id == id).ToArray();

            // Pobierz karty na podstawie indeksu wiersza
            if (listOfData != null && listOfData.Count() > 0)
            {
                cid = id;

                karty = listOfData[0];

                _visible = true;

                await ShowDialog();
            }

            // Wyświetl numer zamówienia w konsoli
            Console.WriteLine(karty.NumerKarty);
        }

    }

    public async Task HandleAddNew()
    {
        await Task.Delay(1);

        _visible = true;

           //await HandleSubmit();
        // _visible = false;
        // await HideDialog();
    }

    public async Task HandleCancel()
    {
        _visible = false;
        await HideDialog();
    }

    public async Task HandleCloseAdd()
    {
        _visible = false;
        await HideDialog();
        await HandleSubmit();
    }

    public async Task ShowDialogAddNew()
    {
        _edit = false;

        blokuj_2_click = false;

        karty = new KartyInstrukcyjne();
        cid = -1;

        display = "block";
        await Task.Delay(50);
        classShow = "show";
        StateHasChanged();
    }

    public async Task ShowDialog()
    {
        display = "block";
        await Task.Delay(50);
        classShow = "show";
        StateHasChanged();
    }

    private async Task HideDialog()
    {
        if (cid > 0 && kartyInstrukcyjne != null)
        {
            kartyInstrukcyjne = originalkartyInstrukcyjne;
        }

        cid = -1;

        classShow = "";
        await Task.Delay(200);
        display = "none";

        StateHasChanged();
    }

    private void OnSelectedItemChangedHandler(RodzajeKartInstrukcyjnych value)
    {
        _selectedItem = value;
        Console.WriteLine($"selected: ${value?.NumerRodzajuKart}");
    }

    private void OnBlur()
    {
        Console.WriteLine("blur");
    }

    private void OnFocus()
    {
        Console.WriteLine("focus");
    }

    private void OnSearch(string value)
    {
        Console.WriteLine($"search: {value}");
    }


    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var content = new MultipartFormDataContent();

            content.Add(new StreamContent(file.OpenReadStream(Int64.MaxValue)), "file", file.Name);

            var response = await Http.PostAsync("api/FileUpload/upload", content);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseModel>();
                Console.WriteLine($"File uploaded successfully. URL: {result?.url}");

                karty.LinkDoKartyNaSerwerze = result?.url;
                //Tylko pierwsza!!!!!
                return;
            }
            else
            {
                Console.WriteLine("File upload failed.");
            }
        }
    }

    private async Task DownloadFile(string fileName)
    {
        try
        {
            // Konstrukcja pełnego URL
            var baseUrl = NavigationManager.BaseUri; // Pobierz podstawowy adres URL aplikacji
            var fileUrl = $"{baseUrl}uploads/{fileName}";

            if (!Uri.TryCreate(fileUrl, UriKind.Absolute, out var uri))
            {
                Console.WriteLine("Nieprawidłowy URL: " + fileUrl);
                return;
            }

            using (var httpClient = new HttpClient())
            {
                httpClient.Timeout = TimeSpan.FromMinutes(10);
                Console.WriteLine($"Pobieranie pliku z URL: {fileUrl}");

                using (var response = await httpClient.GetAsync(uri, HttpCompletionOption.ResponseHeadersRead))
                {
                    if (response.IsSuccessStatusCode)
                    {
                        var contentStream = await response.Content.ReadAsStreamAsync();
                        var actualFileName = Path.GetFileName(uri.LocalPath);

                        using (var memoryStream = new MemoryStream())
                        {
                            await contentStream.CopyToAsync(memoryStream);
                            memoryStream.Seek(0, SeekOrigin.Begin);

                            // Wywołaj JavaScript do pobrania pliku
                            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", actualFileName, memoryStream.ToArray());
                        }

                        Console.WriteLine($"Plik został pobrany i zapisany: {actualFileName}");
                    }
                    else
                    {
                        Console.WriteLine("Nie udało się pobrać pliku.");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Wystąpił błąd podczas pobierania pliku: {ex.Message} / {ex.StackTrace}");
        }
    }



    private bool boolOdczyt = false;
    private bool boolZmian = false;
    private bool boolUsuniecia = false;
    private bool boolAdmin = false;
    private string RowIdPracownika = "";
    private string? user;
    private List<UprawnieniaPracownikaViewModel>? uprawnienia;

    private async Task Laduj_Uprawnienia()
    {
        user = await LocalStorage.GetStringAsync("user");

        if (string.IsNullOrEmpty(user))
        {
            //NavigationManager.NavigateTo($"", true);
            return;
        }
        
        string nazwaTabeli = "KartyInstrukcyjne";

        Console.WriteLine($"api/ZwrocSatus/{user}/{nazwaTabeli}");

        try
        {
            uprawnienia = await Http.GetFromJsonAsync<List<UprawnieniaPracownikaViewModel>>($"/api/ZwrocSatus/{user}/{nazwaTabeli}");
        }
        catch (System.Net.Http.HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            Console.WriteLine("Brak danych!!!");
            await _message.Error("Brak danych - status użytkownika");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await _message.Error(ex.Message);
        }

        if (uprawnienia != null)
        {
            if (uprawnienia.Count > 0)
            {
                var znalezioneElementy = uprawnienia.Where(uprawnienie => uprawnienie.TableName == nazwaTabeli);
                Console.WriteLine("Znaleziono uprawnienia dla użytkownika: " + user + " w tabeli: " + nazwaTabeli + " ilość rekordów: " + znalezioneElementy.Count());
                if (znalezioneElementy.Any())
                {
                    var szuk = znalezioneElementy.FirstOrDefault(x => x.TableName == nazwaTabeli);
                    if (szuk != null)
                    {
                        boolOdczyt = szuk.Odczyt;
                        boolZmian = szuk.Zmiana;
                        boolUsuniecia = szuk.Usuniecie;
                        boolAdmin = szuk.Administrator;
                        RowIdPracownika = szuk.RowId;
                    }
                }
            }
        }
    }

    // void OnSingleCompleted(UploadInfo fileinfo)
    // {
    //     if (fileinfo.File.State == UploadState.Success)
    //     {
    //         var result = fileinfo.File.GetResponse<ResponseModel>();
    //         fileinfo.File.Url = result.url;
    //     }
    // }

    public class ObjectValueProduktOption
    {
        public string? value { get; set; }

        public override string ToString()
        {
            return $"{value}";
        }
    }

    public class ResponseModel
    {
        public string? name { get; set; }
        public string? status { get; set; }
        public string? url { get; set; }
        public string? thumbUrl { get; set; }
    }

    Func<object, object, bool> CompareWith = (a, b) =>
       {
       if (a is ObjectValueProduktOption o1 && b is ObjectValueProduktOption o2)
       {
           return o1.value == o2.value;
       }
       else
       {
           return false;
       }
       };

}
