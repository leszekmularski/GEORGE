@page "/Rodzaje-Kart-Instrukcyjnych"
@using GEORGE.Shared.Models
@using GEORGE.Shared.Class
@inject HttpClient Http
@using AntDesign
@using System.Net;
@inject IMessageService _message
@inject Utilities.ILocalStorage LocalStorage

<h3>Rodzaje Kart Instrukcyjnych</h3>

@if (boolAdmin || boolZmian)
{
    <Button Type="primary" OnClick="@(ShowDialogAddNew)">
        Dodaj nowy rodzaj kart instrukcyjnych
    </Button>
}

<Divider></Divider>

@if (rodzajeKartInstrukcyjnych == null)
{
    <p><em>Czekaj na załadowanie danych...</em></p>
}
else
{
    <ul>
        <Table TItem="RodzajeKartInstrukcyjnych" DataSource="@rodzajeKartInstrukcyjnych">
            <Column Title="ID" @bind-Field="@context.Id" Hidden />
            <Column Title="Numer Rodzaju Karty" @bind-Field="@context.NumerRodzajuKart" Sortable OnFilter="(a, b) => a == b" Filterable />
            <Column Title="Opis Rodzaju Karty" @bind-Field="@context.OpisRodzajuKart" Sortable />
            <Column Title="Nazwa Produktu" @bind-Field="@context.NazwaProduktu" Sortable OnFilter="(a, b) => a == b" Filterable />
            <Column Title="Nazwa Produktu cd" @bind-Field="@context.NazwaProduktu2" Sortable />
            <Column Title="Autor zmian" @bind-Field="@context.KtoZapisal" Sortable />

            <!-- Przykład kolumny dla daty z formatowaniem -->
            <Column Title="Data Zapisu" TData="DateTime" DataIndex="DataZapisu" Format="yyyy-MM-dd HH:mm:ss" Sortable />
            <!-- Przykład kolumny z niestandardowym renderowaniem komórki -->
            <ActionColumn Title="Akcja">
                @if (boolAdmin || boolZmian)
                {
                    <Popconfirm Title="Czy chcesz edytować pozycję?"
                                OnConfirm="()=> editRow(context.Id)"
                                OkText="Tak"
                                CancelText="Nie">
                        <a>Edytuj</a>
                    </Popconfirm>
                }
                @if (boolAdmin || boolUsuniecia)
                {
                    <Popconfirm Title="Czy chcesz usunąć pozycję?"
                                OnConfirm="()=> deleteRow(context.Id)"
                                OkText="Tak"
                                CancelText="Nie">
                        <a style="color:red">Usuń</a>
                    </Popconfirm>
                }
            </ActionColumn>
        </Table>
    </ul>
}

<div class="modal fade @classShow" tabindex="-1" style="display: @display;">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <AntDesign.Form Model="@karty" Layout="FormLayout.Vertical" OnFinish="@HandleSubmit">
                    <AntDesign.FormItem Label="Rodzaj karty">
                        <AntDesign.Input @bind-Value="karty.NumerRodzajuKart" MaxLength="3" Required Placeholder="Podaj nazwę grupy np. KKD (Karata Kontroli Drzwi)" />
                    </AntDesign.FormItem>
                    <AntDesign.FormItem Label="Opis rodzaju karty">
                        <AntDesign.Input @bind-Value="karty.OpisRodzajuKart" Required />
                    </AntDesign.FormItem>
                    <AntDesign.FormItem Label="Nazwa Produktu">
                        <AntDesign.Input @bind-Value="karty.NazwaProduktu" />
                    </AntDesign.FormItem>
                    <AntDesign.FormItem Label="Nazwa Produktu 2">
                        <AntDesign.Input @bind-Value="karty.NazwaProduktu2" />
                    </AntDesign.FormItem>
                    <AntDesign.FormItem Label="Kod Produktu">
                        <AntDesign.Input @bind-Value="karty.KodProduktu" />
                    </AntDesign.FormItem>
                    <AntDesign.FormItem Label="Kto Zapisał">
                        <AntDesign.Input @bind-Value="karty.KtoZapisal" Required />
                    </AntDesign.FormItem>
                    <AntDesign.FormItem Label="Ostatnia Zmiana">
                        <AntDesign.Input @bind-Value="karty.OstatniaZmiana" />
                    </AntDesign.FormItem>
                    <AntDesign.FormItem>
                        <AntDesign.Button Type="primary" @onclick="@HandleAddNew" HtmlType="submit">Zapisz</AntDesign.Button>
                        <AntDesign.Button @onclick="@HandleCancel">Anuluj</AntDesign.Button>
                    </AntDesign.FormItem>
                </AntDesign.Form>
            </div>
        </div>
    </div>
</div>

@code {

    [Inject] private AppState AppState { get; set; } = default!;

    private List<RodzajeKartInstrukcyjnych>? rodzajeKartInstrukcyjnych;
    private List<RodzajeKartInstrukcyjnych>? originalrodzajeKartInstrukcyjnych;

    private bool _visible = false;
    private string display = "none;";
    private string classShow = "";

    private long cid = -1;

    private RodzajeKartInstrukcyjnych karty = new RodzajeKartInstrukcyjnych();

    protected override async Task OnInitializedAsync()
    {
        if (AppState != null)
        {
            AppState.SomeData = "";
        }

        await Laduj_Uprawnienia();

        try
        {
            rodzajeKartInstrukcyjnych = await Http.GetFromJsonAsync<List<RodzajeKartInstrukcyjnych>>("api/RodzajeKartInstrukcyjnych");

            karty = new RodzajeKartInstrukcyjnych();
            karty.Id =  0;     
        }
        catch (Exception ex)
        {
            Console.WriteLine($"******* Błąd {ex.Message}");  
        }
    }

    bool blokujDwuKlik = false;
    private async Task HandleSubmit()
    {

        if (_visible == false || blokujDwuKlik) return;

        blokujDwuKlik = true;

        karty.NumerRodzajuKart = karty.NumerRodzajuKart.ToUpper();

        HttpResponseMessage response;

        if (karty.Id == 0)
        {
            // Sprawdź unikalność NumerRodzajuKart
            var responsedbl = rodzajeKartInstrukcyjnych.Where(e => e.NumerRodzajuKart == karty.NumerRodzajuKart);

            if (responsedbl != null && responsedbl.Count() > 0)
            {
                // Wyświetl komunikat o błędzie, że NumerRodzajuKart nie jest unikalny
                Console.WriteLine("Numer Rodzaju Kart musi być unikalny.");
                await _message.Error("Numer Rodzaju Kart musi być unikalny.");
                blokujDwuKlik = false;
                return;
            }

            response = await Http.PostAsJsonAsync("api/RodzajeKartInstrukcyjnych", karty);
        }
        else
        {
            response = await Http.PutAsJsonAsync($"api/RodzajeKartInstrukcyjnych/{karty.Id}", karty);

            if (rodzajeKartInstrukcyjnych != null) originalrodzajeKartInstrukcyjnych = rodzajeKartInstrukcyjnych.DeepCopyList();
        }

        if (response.IsSuccessStatusCode)
        {
            if (karty.Id == 0)
            {
                rodzajeKartInstrukcyjnych.Add(karty); // Dodaj nowe karty do listy
            }
            else
            {
                // Znajdź istniejące karty i zaktualizuj je
                var index = rodzajeKartInstrukcyjnych.FindIndex(z => z.Id == karty.Id);

                if (index != -1)
                {
                    rodzajeKartInstrukcyjnych[index] = karty;
                }
            }

            _visible = false;
            karty = new RodzajeKartInstrukcyjnych(); // Zresetuj formularz

            await HideDialog();

            StateHasChanged(); // Odśwież widok

            blokujDwuKlik = false;
        }
        else
        {
            // Obsługa błędów
            Console.WriteLine("Błąd podczas zapisywania rodzaju karty - źródło RAZOR");
            blokujDwuKlik = false;
        }
    }

    public async Task deleteRow(long id)
    {
        if (rodzajeKartInstrukcyjnych == null) return;

        try
        {
            var response = await Http.DeleteAsync($"api/RodzajeKartInstrukcyjnych/{id}");

            if (response.IsSuccessStatusCode)
            {
                // Usunięcie rekordu z listy po pomyślnym usunięciu z serwera
                rodzajeKartInstrukcyjnych = rodzajeKartInstrukcyjnych.Where(r => r.Id != id).ToList();
                Console.WriteLine("Rekord został pomyślnie usunięty.");
            }
            else
            {
                Console.WriteLine($"Błąd podczas usuwania rekordu: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"******* Błąd {ex.Message}");
        }
    }


    public async Task editRow(long id)
    {
        //listOfData = listOfData.Where(d => d.Id != id).ToArray();
        if (rodzajeKartInstrukcyjnych == null) return;

        originalrodzajeKartInstrukcyjnych = rodzajeKartInstrukcyjnych.DeepCopyList();

        // Logika edycji
        if (_visible)
        {
            _visible = false;
            await HideDialog();
        }
        else
        {
            karty = new RodzajeKartInstrukcyjnych();

            var listOfData = rodzajeKartInstrukcyjnych.Where(d => d.Id == id).ToArray();

            // Pobierz karty na podstawie indeksu wiersza
            if (listOfData != null && listOfData.Count() > 0)
            {
                cid = id;

                karty = listOfData[0];

                _visible = true;

                await ShowDialog();
            }

            // Wyświetl numer zamówienia w konsoli
            Console.WriteLine(karty.NumerRodzajuKart);
        }

    }

    public async Task HandleAddNew()
    {
        await Task.Delay(1);

        _visible = true;
        // await HandleSubmit();
    }

    public async Task HandleCancel()
    {
        _visible = false;
        await HideDialog();
    }

    public async Task HandleCloseAdd()
    {
        _visible = false;
        await HideDialog();
        await HandleSubmit();
    }

    public async Task ShowDialogAddNew()
    {
        karty = new RodzajeKartInstrukcyjnych();
        cid = -1;

        display = "block";
        await Task.Delay(50);
        classShow = "show";
        StateHasChanged();
    }

    public async Task ShowDialog()
    {
        display = "block";
        await Task.Delay(50);
        classShow = "show";
        StateHasChanged();
    }

    private async Task HideDialog()
    {
        if (cid > 0 && rodzajeKartInstrukcyjnych != null)
        {
            rodzajeKartInstrukcyjnych = originalrodzajeKartInstrukcyjnych;
        }

        cid = -1;

        classShow = "";
        await Task.Delay(200);
        display = "none";

        StateHasChanged();
    }

    private bool boolOdczyt = false;
    private bool boolZmian = false;
    private bool boolUsuniecia = false;
    private bool boolAdmin = false;
    private string RowIdPracownika = "";
    private string? user;
    private List<UprawnieniaPracownikaViewModel>? uprawnienia;

    private async Task Laduj_Uprawnienia()
    {
        user = await LocalStorage.GetStringAsync("user");

        if (string.IsNullOrEmpty(user))
        {
            //NavigationManager.NavigateTo($"", true);
            return;
        }
        
        string nazwaTabeli = "RodzajeKartInstrukcyjnych";

        Console.WriteLine($"api/ZwrocSatus/{user}/{nazwaTabeli}");

        try
        {
            uprawnienia = await Http.GetFromJsonAsync<List<UprawnieniaPracownikaViewModel>>($"/api/ZwrocSatus/{user}/{nazwaTabeli}");
        }
        catch (System.Net.Http.HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            Console.WriteLine("Brak danych!!!");
            await _message.Error("Brak danych - status użytkownika");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await _message.Error(ex.Message);
        }

        if (uprawnienia != null)
        {
            if (uprawnienia.Count > 0)
            {
                var znalezioneElementy = uprawnienia.Where(uprawnienie => uprawnienie.TableName == nazwaTabeli);
                Console.WriteLine("Znaleziono uprawnienia dla użytkownika: " + user + " w tabeli: " + nazwaTabeli + " ilość rekordów: " + znalezioneElementy.Count());
                if (znalezioneElementy.Any())
                {
                    var szuk = znalezioneElementy.FirstOrDefault(x => x.TableName == nazwaTabeli);
                    if (szuk != null)
                    {
                        boolOdczyt = szuk.Odczyt;
                        boolZmian = szuk.Zmiana;
                        boolUsuniecia = szuk.Usuniecie;
                        boolAdmin = szuk.Administrator;
                        RowIdPracownika = szuk.RowId;
                    }
                }
            }
        }
    }
}
