@page "/ListaPracownikow"
@using GEORGE.Shared.Models
@using GEORGE.Shared.ViewModels
@inject HttpClient Http;
@inject Utilities.ILocalStorage LocalStorage
@using AntDesign.TableModels;
@using System.Text.Json;
@using System
@inject NavigationManager NavigationManager;
@inject IMessageService _message


<style>
  .button-like {
    display: inline-block;
    background-color: #4CAF50;
    color: white;
    padding: 8px 16px;
    text-align: center;
    text-decoration: none;
    border: none;
    cursor: pointer;
    border-radius: 4px;
  }
    .save {
        margin-right: 8px;
    }
</style>

<link id="dynamic-css" rel="stylesheet" href="../usun_styl.css" />

<h1>Użytkownicy w systemie</h1>

@if (strPierwszeLogowanie != "")
{
    <div>
        <h2>@strPierwszeLogowanie</h2>
        <button type="button" class="btn btn-success" style="width:100%" @onclick="Zapisz">Pierwsze uruchomienie programu</button>
        <br />
    </div>
}

@if (listaDzialow == null)
{
    <p><em>@infStatus</em></p>
}
else
{
    <div>
        @if (strPierwszeLogowanie == "")
        {
            <button type="button" class="btn btn-success" @onclick="AddUser">Dodaj nowego użytkownika</button>
        }
         <br />

        <Table DataSource="data" OnChange="OnChange" TItem="Data">
            <PropertyColumn Hidden Property="c=>c.Id"
                                    Sortable
                                    Filterable />

            <PropertyColumn Property="c=>c.Dzial"
                        SorterCompare="@((a,b)=> string.Compare(a,b))"
                        SortDirections="new[] { SortDirection.Descending }"
                                    Filterable />

            <PropertyColumn Property="c=>c.Imie"
                        SorterCompare="@((a,b)=> string.Compare(a,b))"
                        SortDirections="new[] { SortDirection.Descending, SortDirection.Ascending }"
                                    Filterable />

            <PropertyColumn Property="c=>c.Nazwisko"
                        SorterCompare="@((a,b)=> string.Compare(a,b))"
                        SortDirections="new[] { SortDirection.Descending, SortDirection.Ascending }"
                                    Filterable />

            <PropertyColumn Property="c=>c.DateZapisu"
                        Format="yyyy/MM/dd"
                                    Sortable
                                    Filterable />

            <PropertyColumn Title="Pracownik już nie pracuje" Property="c=>c.Czy_pracuje"
                                    Sortable
                                    Filterable />
            <ActionColumn Title="Akcja">
                <Popconfirm Title="Czy chcesz edytować użytkownika?"
                            OnConfirm="()=> editRow(context.Id)"
                            OkText="Tak"
                            CancelText="Nie">
                    <a>Edytuj</a>
                </Popconfirm>
                <Popconfirm Title="Czy chcesz usunąć użytkownika?"
                            OnConfirm="()=> deleteRow(context.Id)"
                            OkText="Tak"
                            CancelText="Nie">
                    <a style="color:red">Usuń</a>
                </Popconfirm>
            </ActionColumn>

        </Table>

    </div>
}

<div class="modal-backdrop fade @(showNewUser ? "show" : "") @(displayNewUser ? "d-block" : "d-none")"></div>

<div class="modal fade @(showNewUser ? "show" : "")  @(displayNewUser ? "d-block" : "d-none")" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">[@opisModal]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    @if (pracownik != null)
                    {
                        <PanelAdmin pracownik="pracownik" />
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseModal">Zamknij</button>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public MainLayout? mainLayout { get; set; }

    [Inject] private AppState AppState { get; set; } = default!;

    private bool showNewUser, displayNewUser;

    private DzialPracownikaViewModel? dzial { get; set; }
    private List<DzialPracownikaViewModel>? listaDzialow;

    public Pracownicy? pracownik { get; set; }

    private string infStatus = "Czekam na załadowanie danych....";

    private string user = "";

    private bool bAdmin = false;
    private bool pusty_rekord = true;
    private string infSatusZapisu = "";
    private string strPierwszeLogowanie = "";
    private string rowIdDzialu = "";//Jak będą działy to poprawić

    private string opisModal = "";


    Data[]? data;

    protected override async Task OnInitializedAsync()
    {
        if (AppState != null)
        {
            AppState.SomeData = "";
        }

        listaDzialow = await Http.GetFromJsonAsync<List<DzialPracownikaViewModel>>("/api/DzialIPracownicy");

        if (listaDzialow != null)
        {
            if (listaDzialow.Count == 0)
            {
                strPierwszeLogowanie = "Witaj w systemie produkcyjnym kliknij w przycisk <Pierwsze uruchomienia programu>. Automatycznie zostanie utworzony użytkownik: Admin oraz hasło: sysdba. Po ponownym zalogowaniu wejdź do panelu użytkownicy!!!";
                return;
            }
            else
            {
                strPierwszeLogowanie = "";
            }

            data = new Data[listaDzialow.Count];

            for (int i = 0; i < listaDzialow.Count; i++)
            {
                var item = listaDzialow[i];

                string dzial = "NaN";
                string imie = "NaN";
                string nazwisko = "NaN";

                if (item.NazwaDzialu != null) dzial = item.NazwaDzialu;
                if (item.Imie != null) imie = item.Imie;
                if (item.Nazwisko != null) nazwisko = item.Nazwisko;


                Data dataItem = new Data(
                    id: item.Id,
                    dzial: dzial,
                    imie: imie,
                    nazwisko: nazwisko,
                    datezapisu: item.Datautowrzenia,
                    czy_pracuje: item.Nieaktywny
                );

                data[i] = dataItem;

                if (rowIdDzialu == "") rowIdDzialu = item.RowIdDzialu;

            }
        }

        user = await LocalStorage.GetStringAsync("user");

        if (user == null || user == "")
        {
            await _message.Info("Zalogu się do systemu!!!!"); 

            NavigationManager.NavigateTo($"", true);
            return;
        }

        base.OnInitialized();
    }

    public async Task deleteRow(long id)
    {
        if (listaDzialow == null) return;

        try
        {
            var response = await Http.DeleteAsync($"api/Pracownicy/{id}");

            if (response.IsSuccessStatusCode)
            {
                // Usunięcie rekordu z listy po pomyślnym usunięciu z serwera
                listaDzialow = await Http.GetFromJsonAsync<List<DzialPracownikaViewModel>>("/api/DzialIPracownicy");
                Console.WriteLine("Rekord został pomyślnie usunięty.");
            }
            else
            {
                Console.WriteLine($"Błąd podczas usuwania rekordu: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"******* Błąd {ex.Message}");
        }
    }

    public async Task editRow(long id)
    {
        if (listaDzialow == null)
            return;

        opisModal = "Edytuj użytkownika";

        try
        {
            // Pobranie danych z API
            listaDzialow = await Http.GetFromJsonAsync<List<DzialPracownikaViewModel>>("/api/DzialIPracownicy");

            // Znalezienie pracownika w liście
            var vpracownik = listaDzialow.FirstOrDefault(f => f.Id == id);

            if (vpracownik != null)
            {
                // Pobranie danych o pracowniku z API
                var response = await Http.GetAsync($"/api/Pracownicy/{id}");
                if (response.IsSuccessStatusCode)
                {
                    var szukanyPracownik = await response.Content.ReadFromJsonAsync<Pracownicy>();

                    if (szukanyPracownik != null)
                    {
                        pracownik = szukanyPracownik;
                        displayNewUser = true;
                        showNewUser = true;
                        await Task.Delay(100);
                    }
                }
                else
                {
                    Console.WriteLine($"Błąd podczas pobierania pracownika: {response.ReasonPhrase}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Wystąpił błąd: {ex.Message}");
        }
    }


    void OnChange(QueryModel<Data> query)
    {
        Console.WriteLine(JsonSerializer.Serialize(query));
    }

    private async Task AddUser()
    {

        opisModal = "Dodaj nowego użytkownika";

        if (rowIdDzialu == "") 
        {
            await _message.Warning("Musisz się poprawnie zalogować aby zrobić zmiany");
            return; 
        }

        pracownik = new Pracownicy
            {
                RowId = Guid.NewGuid().ToString(),
                Kodkreskowy = "*//*",
                Imie = "",
                Nazwisko = "",
                Stanowisko = "",
                Dzial = "Dział/Sekcja",
                RowIdDzialu = rowIdDzialu,
                UzytkownikSQL = "",
                HasloSQL = "",
                Telefon = "",
                Uwagi = "",
                Datautowrzenia = DateTime.Now,
                Autorzmiany = $"Autor zmian: /{user}/"
            };

        displayNewUser = true;
        showNewUser = true;
        await Task.Delay(1);
    }

    private async Task CloseModal()
    {
        displayNewUser = false;
        showNewUser = false;
        listaDzialow = await Http.GetFromJsonAsync<List<DzialPracownikaViewModel>>("/api/DzialIPracownicy");
    }

    private async Task Zapisz()
    {
        strPierwszeLogowanie = "";

        await _message.Loading("Pierwsze uruchominie. Zaczekaj....");

        await LocalStorage.RemoveAsync("user");

        string guid_dzial = Guid.NewGuid().ToString();

        var nowyPracownik = new Pracownicy
            {
                RowId = Guid.NewGuid().ToString(),
                Kodkreskowy = "ADMIN/",
                Imie = "Administrator",
                Nazwisko = "Systemu",
                Stanowisko = "",
                Dzial = "Dział/Sekcja",
                RowIdDzialu = guid_dzial,
                UzytkownikSQL = "Admin",
                HasloSQL = "sysdba",
                Telefon = "",
                Uwagi = "",
                Datautowrzenia = DateTime.Now,
                Autorzmiany = "Autor zmian: /Start Systemu/"
            };

        var nowyDzail = new RodzajeDzialow
            {
                Datautowrzenia = DateTime.Now,
                RowId = guid_dzial,
                NazwaDzialu = "Dział/Sekcja",
                Notatka = "Zmień dane",
                Autorzmiany = nowyPracownik.Autorzmiany,
                Uwagi = "Domyślny dział"
            };

        var result = await Http.PostAsJsonAsync("/api/Pracownicy/", nowyPracownik);

        if (result.IsSuccessStatusCode)
        {
            user = "Admin";

            var resultdzal = await Http.PostAsJsonAsync("/api/RodzajeDzialow/", nowyDzail);

            // if (resultdzal.IsSuccessStatusCode)
            // {
                await _message.Success("Zaloguj się do systemu!!!!");
                NavigationManager.NavigateTo("", true);
            // }
            // else
            // {
            //     await _message.Error("Nie udało się zapisać ustawień ---- Działy ---!!!!");
            // }

        }
        else
        {
            user = "";
            await _message.Error("Nie udało się zapisać ustawień --- Użytkownicy ----- !!!!");
        }

        if (mainLayout != null)
        {
            await Task.Delay(500);
            await mainLayout.Logout();
        }
    }

    class Data
    {
        public Data(long id ,string dzial, string imie, string nazwisko, DateTime datezapisu, bool czy_pracuje)
        {
            Id = id;
            Dzial = dzial;
            Imie = imie;
            Nazwisko = nazwisko;
            DateZapisu = datezapisu;
            Czy_pracuje = czy_pracuje;
        }

        public long Id { get; set; }
        public string Dzial { get; set; }
        public string Imie { get; set; }
        public string Nazwisko { get; set; }
        public DateTime DateZapisu { get; set; }
        public bool Czy_pracuje { get; set; }
    }


}