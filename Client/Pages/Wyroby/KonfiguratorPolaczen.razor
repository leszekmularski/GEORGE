@page "/KonfiguratorPolaczen"
@inject HttpClient Http
@inject NavigationManager Navigation
@using GEORGE.Shared.Models
@using GEORGE.Shared.Class
@inject IMessageService _message
@inject INotificationService _notice
@inject Utilities.ILocalStorage LocalStorage
@inject IJSRuntime JSRuntime
@using System.Net

<h3 class="text-center mt-3">
    📌 Konfigurator połączeń elementów
    <button class="btn btn-primary mb-3" @onclick="GoBack">
        <i class="fas fa-arrow-left"></i> Wróć do poprzedniej strony
    </button>
</h3>

<div class="container mt-4">

    <!-- 🔹 Wybór systemu -->
    <Tooltip Placement="@Placement.TopRight" Title="Otwórz konfigurator nowego systemu lub wybierz go z listy">
        <div class="d-flex align-items-center">
            @if (Systemy != null && Systemy.Any())
            {
                <select class="form-select me-2" @onchange="@(async (args) => await OnSystemSelected(args))">
                    <option value="" disabled selected>-- Wybierz system --</option>
                    @foreach (var system in Systemy)
                    {
                        <option value="@system.RowId">@system.Nazwa_Systemu</option>
                    }
                </select>
            }
        </div>
    </Tooltip>

    <h3>Konfiguracja Modeli</h3>

    <!-- 🔘 Przycisk dodawania nowego modelu -->
    <button class="btn btn-success mb-3" @onclick="DodajNowy">
        <i class="fas fa-plus"></i> Dodaj Nowy Model
    </button>

    @if (ListaModeli != null && ListaModeli.Any())
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Typ</th>
                    <th>Zakres Kąta</th>
                    <th>Zakres Promienia</th>
                    <th>Wymiary</th>
                    <th>Uwagi</th>
                    <th>Miniaturka</th>
                    <th>Akcje</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var model in ListaModeli)
                {
                    <tr>
                        <td>@model.Typ</td>
                        <td>@model.KatWystapieniaZakresOdMin° - @model.KatWystapieniaZakresOdMax°</td>
                        <td>@model.PromienWystapieniaZakresOdMin mm - @model.PromienWystapieniaZakresOdMax mm</td>
                        <td>@model.KonstrMinSzer x @model.KonstrMinWys → @model.KonstrMaxSzer x @model.KonstrMaxWys</td>
                        <td>@model.Uwagi</td>
                        <td>
                            @if (model.Rysunek != null && model.Rysunek.Length > 0)
                            {
                                <img src="data:image/png;base64,@Convert.ToBase64String(model.Rysunek)" width="60" height="60" />
                            }
                            else
                            {
                                <span class="text-muted">Brak</span>
                            }
                        </td>
                        <td>
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => Edytuj(model.Id)">
                                <i class="fas fa-edit"></i> Edytuj
                            </button>
                            <button class="btn btn-danger btn-sm me-2" @onclick="() => Usun(model.Id)">
                                <i class="fas fa-trash-alt"></i> Usuń
                            </button>
                            <button class="btn btn-info btn-sm" @onclick="() => PokazPowiazane(model.RowId.ToString(), model.NazwaKonfiguracji)">
                                <i class="fas fa-eye"></i> Pokaż powiązane
                            </button>
                        </td>
                    </tr>
                }
            </tbody>

        </table>
    }
    else
    {
        <p class="text-muted">Brak zapisanych modeli.</p>
    }

    @if (EdytowanyModel != null)
    {
        <EditForm Model="EdytowanyModel" OnValidSubmit="Zapisz">
            <DataAnnotationsValidator />
            <h4>@(EdytowanyModel.Id == 0 ? "Dodaj Nowy Model" : "Edytuj Model")</h4>
            <div class="mb-3">
                <label class="form-label">Nazwa konfigurajcji:</label>
                <InputText required class="form-control" @bind-Value="EdytowanyModel.NazwaKonfiguracji" />
            </div>
            <div class="mb-3">
                <label class="form-label">Typ profilu</label>
                <Select required Mode="SelectMode.Default"
                DataSource="@_typ"
                @bind-Value="EdytowanyModel.Typ"
                LabelName="@nameof(Typ.Nazwa)"
                ValueName="@nameof(Typ.Nazwa)"
                Class="form-select">
                </Select>
            </div>
            <div class="row">
                <div class="col">
                    <label class="form-label">Kąt (min):</label>
                    <Microsoft.AspNetCore.Components.Forms.InputNumber class="form-control" @bind-Value="EdytowanyModel.KatWystapieniaZakresOdMin" />
                </div>
                <div class="col">
                    <label class="form-label">Kąt (max):</label>
                    <Microsoft.AspNetCore.Components.Forms.InputNumber class="form-control" @bind-Value="EdytowanyModel.KatWystapieniaZakresOdMax" />
                </div>
            </div>
            <div class="row mt-2">
                <div class="col">
                    <label class="form-label">Promień (min):</label>
                    <Microsoft.AspNetCore.Components.Forms.InputNumber class="form-control" @bind-Value="EdytowanyModel.PromienWystapieniaZakresOdMin" />
                </div>
                <div class="col">
                    <label class="form-label">Promień (max):</label>
                    <Microsoft.AspNetCore.Components.Forms.InputNumber class="form-control" @bind-Value="EdytowanyModel.PromienWystapieniaZakresOdMax" />
                </div>
            </div>
            <div class="mt-3">
                <label class="form-label">Uwagi:</label>
                <InputText class="form-control" @bind-Value="EdytowanyModel.Uwagi" />
            </div>
            <div class="mt-3">
                <label class="form-label">Obrazek DXF:</label>
                <InputFile OnChange="WczytajRysunek" />
            </div>
            <div class="mt-3">
                <button type="submit" class="btn btn-primary">Zapisz</button>
                <button type="button" class="btn btn-secondary ms-2" @onclick="Anuluj">Anuluj</button>
            </div>
        </EditForm>
    }

    @*     <h4>🛠️ Powiązania elementów</h4>
    <button class="btn btn-info mb-3" @onclick="TogglePowiazane">
        <i class="fas fa-eye"></i> @(PokazTylkoPowiazane ? "Pokaż wszystkie" : "Pokaż powiązane elementy")
    </button> *@
    @if (KonfiguracjeSystemu != null && KonfiguracjeSystemu.Any())
    {
        <h4>🛠️ Powiązania elementów dla Modelu: @(PokazanyModelRowId != null ? $"->{WybralesElement}" : "Wszystkie")</h4>

        <table class="table table-striped table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>Nazwa</th>
                    <th>Indeks</th>
                    <th>Uwagi</th>
                    <th>Miniaturka</th>
                    <th>Akcje</th>
                </tr>
            </thead>
            <tbody>
                @if (PowiazanyModel == null)
                {
                    @foreach (var konf in KonfiguracjeSystemu)
                    {
                        <tr>
                            <td>@konf.Nazwa</td>
                            <td>@konf.Indeks</td>
                            <td>@konf.Uwagi</td>
                            <td>
                                @if (konf.Rysunek != null && konf.Rysunek.Length > 0)
                                {
                                    <img src="@RysunekToBase64(konf.Rysunek)" alt="Miniatura" style="width: 50px; height: auto;" />
                                }
                                else
                                {
                                    <span class="text-muted">Brak</span>
                                }
                            </td>
                            <td>
                                <Checkbox @bind-Value="konf.CzyWybrany">Połącz element z konfiguracją</Checkbox>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    @foreach (var konf in PowiazanyModel.KonfSystem)
                    {
                        <tr>
                            <td>@konf.Nazwa</td>
                            <td>@konf.Indeks</td>
                            <td>@konf.Uwagi</td>
                            <td>
                                @if (konf.Rysunek != null && konf.Rysunek.Length > 0)
                                {
                                    <img src="@RysunekToBase64(konf.Rysunek)" alt="Miniatura" style="width: 50px; height: auto;" />
                                }
                                else
                                {
                                    <span class="text-muted">Brak</span>
                                }
                            </td>
                            <td>
                                <Checkbox @bind-Value="konf.CzyWybrany">Połącz element z konfiguracją</Checkbox>
                            </td>
                        </tr>
                    }
                }

            </tbody>
        </table>
    }


</div>

@code {
    private bool PokazTylkoPowiazane = false;

    private List<SystemyOkienne>? Systemy;

    private List<KonfSystem>? KonfiguracjeSystemu;

    private string apiUrl = "api/konfmodele";

    private List<KonfModele>? ListaModeli;
    private KonfModele? EdytowanyModel;

    private string SelectedSystemId = "";

    private string? PokazanyModelRowId;
    private MVCKonfModele? PowiazanyModel;

    protected override async Task OnInitializedAsync()
    {
        await Laduj_Uprawnienia();

        Systemy = await Http.GetFromJsonAsync<List<SystemyOkienne>>("api/systemy-okienne");
    }

    private async Task OnSystemSelected(ChangeEventArgs e)
    {
        SelectedSystemId = e.Value.ToString();

        Console.WriteLine($"Wybrano system o ID: {SelectedSystemId}");

        if (string.IsNullOrEmpty(SelectedSystemId))
        { 
            PowiazanyModel = null;

            if (KonfiguracjeSystemu != null) KonfiguracjeSystemu.Clear();
            return;
        }

        // Możesz dodać dalszą logikę, np. przekierowanie do szczegółów systemu
        PowiazanyModel = null;

        KonfiguracjeSystemu = await Http.GetFromJsonAsync<List<KonfSystem>>($"api/konfsystem/FIN_DROWID/{SelectedSystemId}");

        ListaModeli = await Http.GetFromJsonAsync<List<KonfModele>>("api/konfmodele/");

    }

    // private void TogglePowiazane()
    // {
    //     PokazTylkoPowiazane = !PokazTylkoPowiazane;
    // }

    string WybralesElement = "";

    private async Task PokazPowiazane(string rowId, string nazwaWybaranego)
    {
        // Jeśli kliknięto ten sam model, ukryj powiązane
        WybralesElement = nazwaWybaranego;

        if (PokazanyModelRowId == rowId)
        {
            PokazanyModelRowId = null;
            PowiazanyModel = null;
        }
        else
        {
            PokazanyModelRowId = rowId;
            PowiazanyModel = await Http.GetFromJsonAsync<MVCKonfModele>($"api/konfmodeleelementy/powiazaniajuzzaznaczone/{rowId}");

            PowiazanyModel.KonfModele[0].
        }
    }

    private string RysunekToBase64(byte[]? imageData)
    {
        if (imageData == null || imageData.Length == 0)
        {
            return "data:image/png;base64,"; // Zapobiega błędom
        }

        return $"data:image/png;base64,{Convert.ToBase64String(imageData)}";
    }

    private async Task DodajNowy()
    {
        PowiazanyModel = null;
        PokazanyModelRowId = null;
        EdytowanyModel = new KonfModele();

        if (!string.IsNullOrEmpty(SelectedSystemId))
        KonfiguracjeSystemu = await Http.GetFromJsonAsync<List<KonfSystem>>($"api/konfsystem/FIN_DROWID/{SelectedSystemId}");
    }

    private async Task Edytuj(int id)
    {
        EdytowanyModel = await Http.GetFromJsonAsync<KonfModele>($"{apiUrl}/{id}");
    }

    private async Task Zapisz()
    {
        if (EdytowanyModel == null) return;

        if (EdytowanyModel.Id == 0)
        {
            // Tworzenie nowego modelu
            var response = await Http.PostAsJsonAsync(apiUrl, EdytowanyModel);
            if (response.IsSuccessStatusCode)
            {
                // Pobieramy dodany model, żeby mieć jego ID
                EdytowanyModel = await response.Content.ReadFromJsonAsync<KonfModele>();
            }
        }
        else
        {
            // Aktualizacja istniejącego modelu
            await Http.PutAsJsonAsync($"{apiUrl}/{EdytowanyModel.Id}", EdytowanyModel);
        }


        // Pobieramy istniejące powiązania dla modelu
        var existingLinks = await Http.GetFromJsonAsync<List<KonfModeleElementy>>($"api/konfmodeleelementy/powiazania/{EdytowanyModel.RowId}");

        // Lista do zapisania
        List<KonfModeleElementy> nowePowiazania = new();

        foreach (var konf in KonfiguracjeSystemu.Where(k => k.CzyWybrany))
        {
            // Sprawdzamy, czy już istnieje w bazie
            if (!existingLinks.Any(x => x.RowIdElement == konf.RowId))
            {
                nowePowiazania.Add(new KonfModeleElementy
                    {
                        RowId = Guid.NewGuid(),
                        RowIdSystem = Guid.Parse(SelectedSystemId),
                        RowIdElement = konf.RowId,
                        RowIdKonfModele = EdytowanyModel.RowId,
                        NazwaKonfiguracji = EdytowanyModel.NazwaKonfiguracji,
                        KtoZapisal = "Użytkownik"
                    });
            }
        }

        // Wysyłamy nowo dodane powiązania do API
        if (nowePowiazania.Count > 0)
        {
            await Http.PostAsJsonAsync($"api/konfmodeleelementy/powiazania", nowePowiazania);
        }

        // Usuwamy powiązania, które użytkownik odznaczył
        var usunPowiazania = existingLinks
            .Where(x => !KonfiguracjeSystemu.Any(k => k.CzyWybrany && k.RowId == x.RowIdElement))
            .Select(x => x.Id)
            .ToList();

        if (usunPowiazania.Count > 0)
        {
            await Http.PostAsJsonAsync($"api/konfmodeleelementy/powiazania/usun", usunPowiazania);
        }

        // Odświeżenie listy modeli
        ListaModeli = await Http.GetFromJsonAsync<List<KonfModele>>(apiUrl);
        EdytowanyModel = null;
    }


    private async Task Usun(int id)
    {
        await Http.DeleteAsync($"{apiUrl}/{id}");
        ListaModeli = await Http.GetFromJsonAsync<List<KonfModele>>(apiUrl);
    }

    private void Anuluj()
    {
        EdytowanyModel = null;
    }

    private async Task WczytajRysunek(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            EdytowanyModel.Rysunek = buffer;
        }
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }


    private bool boolOdczyt = false;
    private bool boolZmiana = false;
    private bool boolUsuniecia = false;
    private bool boolAdmin = false;
    private bool boolNowy = false;
    private string RowIdPracownika = "";
    private string? user;
    private bool isNotDisabled => !boolZmiana;
    private List<UprawnieniaPracownikaViewModel>? uprawnienia;

    private async Task Laduj_Uprawnienia()
    {
        user = await LocalStorage.GetStringAsync("user");

        if (string.IsNullOrEmpty(user))
        {
            //NavigationManager.NavigateTo($"", true);
            return;
        }

        string nazwaTabeli = "SystemyOkienne";

        Console.WriteLine($"api/ZwrocSatus/{user}/{nazwaTabeli}");

        try
        {
            uprawnienia = await Http.GetFromJsonAsync<List<UprawnieniaPracownikaViewModel>>($"/api/ZwrocSatus/{user}/{nazwaTabeli}");
        }
        catch (System.Net.Http.HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            Console.WriteLine("Brak danych!!!");
            await _message.Error("Brak danych - status użytkownika");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await _message.Error(ex.Message);
        }

        if (uprawnienia != null)
        {
            if (uprawnienia.Count > 0)
            {
                var znalezioneElementy = uprawnienia.Where(uprawnienie => uprawnienie.TableName == nazwaTabeli);
                Console.WriteLine("Znaleziono uprawnienia dla użytkownika: " + user + " w tabeli: " + nazwaTabeli + " ilość rekordów: " + znalezioneElementy.Count());
                if (znalezioneElementy.Any())
                {
                    var szuk = znalezioneElementy.FirstOrDefault(x => x.TableName == nazwaTabeli);
                    if (szuk != null)
                    {
                        boolOdczyt = szuk.Odczyt;
                        boolZmiana = szuk.Zmiana;
                        boolUsuniecia = szuk.Usuniecie;
                        boolAdmin = szuk.Administrator;
                        boolNowy = szuk.Zapis;
                        RowIdPracownika = szuk.RowId;
                    }
                }
            }
        }
    }

    record Typ(string Nazwa);
    private List<Typ> _typ = new List<Typ>
        {
            new Typ(""),
            new Typ("Rama"),
            new Typ("Skrzydło"),
            new Typ("Słupek ruchomy"),
            new Typ("Słupek stały"),
            new Typ("Listwa przyszybowa"),
        };

}
