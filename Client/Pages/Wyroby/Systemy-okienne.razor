@page "/Systemy-okienne"
@inject HttpClient Http
@inject NavigationManager Navigation
@using GEORGE.Shared.Models
@using GEORGE.Shared.Class

<h3 class="text-center mt-3">📌 Systemy Okienne</h3>

<div class="container mt-4">
    <button class="btn btn-primary mb-3" @onclick="DodajNowy">
        <i class="fas fa-plus"></i> Dodaj Nowy System
    </button>

    @if (Systemy != null && Systemy.Any())
    {
        <table class="table table-striped table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>Nazwa</th>
                    <th>Opis</th>
                    <th>Uwagi</th>
                    <th>Akcje</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var system in Systemy)
                {
                    <tr>
                        <td>@system.Nazwa_Systemu</td>
                        <td>@system.Opis_Systemu</td>
                        <td>@system.Uwagi</td>
                        <td>
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => Edytuj(system.Id)">
                                <i class="fas fa-edit"></i> Edytuj
                            </button>
                            <button class="btn btn-danger btn-sm" @onclick="() => Usun(system.Id)">
                                <i class="fas fa-trash-alt"></i> Usuń
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p class="text-muted text-center">Brak dostępnych systemów okiennych.</p>
    }
</div>

@if (EdytowanySystem != null)
{
    <!-- Modal -->
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">📝 @((EdytowanySystem.Id == 0) ? "Dodaj Nowy System" : "Edytuj System")</h5>
                    <button type="button" class="btn-close" @onclick="Anuluj"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="EdytowanySystem" OnValidSubmit="Zapisz">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label class="form-label">Nazwa Systemu:</label>
                            <InputText class="form-control" @bind-Value="EdytowanySystem.Nazwa_Systemu" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Opis:</label>
                            <InputText class="form-control" @bind-Value="EdytowanySystem.Opis_Systemu" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Uwagi:</label>
                            <InputText class="form-control" @bind-Value="EdytowanySystem.Uwagi" />
                        </div>

                        <div class="text-end">
                            <button type="submit" class="btn btn-success">
                                <i class="fas fa-save"></i> Zapisz
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Anuluj">
                                <i class="fas fa-times"></i> Anuluj
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<SystemyOkienne>? Systemy;
    private SystemyOkienne? EdytowanySystem;
    private string apiUrl = "api/systemy-okienne";

    protected override async Task OnInitializedAsync()
    {
        Systemy = await Http.GetFromJsonAsync<List<SystemyOkienne>>(apiUrl);
    }

    private void DodajNowy()
    {
        EdytowanySystem = new SystemyOkienne();
    }

    private async Task Edytuj(int id)
    {
        EdytowanySystem = await Http.GetFromJsonAsync<SystemyOkienne>($"{apiUrl}/{id}");
    }

    private async Task Zapisz()
    {
        if (EdytowanySystem.Id == 0)
        {
            await Http.PostAsJsonAsync(apiUrl, EdytowanySystem);
        }
        else
        {
            await Http.PutAsJsonAsync($"{apiUrl}/{EdytowanySystem.Id}", EdytowanySystem);
        }
        Systemy = await Http.GetFromJsonAsync<List<SystemyOkienne>>(apiUrl);
        EdytowanySystem = null;
    }

    private async Task Usun(int id)
    {
        await Http.DeleteAsync($"{apiUrl}/{id}");
        Systemy = await Http.GetFromJsonAsync<List<SystemyOkienne>>(apiUrl);
    }

    private void Anuluj()
    {
        EdytowanySystem = null;
    }
}
