@page "/Elementy-do-zlecen/{RowIdZlecenia}"
@using GEORGE.Shared.Models
@using GEORGE.Shared.ViewModels
@using GEORGE.Shared.Class
@using GEORGE.Client.Pages
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using AntDesign
@inject IMessageService _message
@inject PdfReaderService PdfReaderService
@inject GEORGE.Client.Pages.PDF.PdfDataParserElementy PdfDataParserElement
@inject Utilities.ILocalStorage LocalStorage
@using System.Net;
@using System.Text.Json;
@inject INotificationService _notice


<!DOCTYPE html>
<html>
<head>
    <style>
        .custom-link {
            color: blue;
        }

        .custom-linkszy {
            color: darkblue;
        }

        .highlighted-background {
            background-color: white;
            overflow: auto; /* Dodaje paski przewijania, gdy zawartość przekracza rozmiar kontenera */
            max-height: calc(100vh - 5px); /* Maksymalna wysokość kontenera dopasowana do wysokości okna minus 155px */
            width: calc(100% - 260px); /* Ustawia szerokość na 100% okna minus 260px */
            box-sizing: border-box; /* Uwzględnia padding i border w obliczaniu wysokości */
            position: absolute;
            left: 260px; /* Ustawia lewą krawędź 260px od lewej strony okna */
            top: 5px; /* Ustawia górną krawędź 155px od góry okna */
        }

    </style>

    <meta charset="utf-8" />
    <PageTitle>Zamówiona elementy do zlecenia</PageTitle>

    <script>
        function copyToClipboard(text) {
            if (navigator.clipboard && navigator.clipboard.writeText) {
                navigator.clipboard.writeText(text).then(function () {
                    console.log('Text copied to clipboard');
                }).catch(function (error) {
                    console.error('Error copying text: ', error);
                });
            } else {
                // Fallback method
                var textArea = document.createElement("textarea");
                textArea.value = text;
                document.body.appendChild(textArea);
                textArea.select();
                try {
                    document.execCommand('copy');
                    console.log('Text copied to clipboard');
                } catch (err) {
                    console.error('Error copying text: ', err);
                }
                document.body.removeChild(textArea);
            }
        }

        function saveAsExcel(jsonData) {
            const data = JSON.parse(jsonData);
            const csvRows = [];

            // Extract headers
            const headers = Object.keys(data[0]);
            csvRows.push(headers.join(','));

            // Extract rows
            for (const row of data) {
                const values = headers.map(header => {
                    const escaped = ('' + row[header]).replace(/"/g, '\\"');
                    return `"${escaped}"`;
                });
                csvRows.push(values.join(','));
            }

            // Create CSV file
            const csvString = csvRows.join('\n');
            const blob = new Blob([csvString], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.setAttribute('hidden', '');
            a.setAttribute('href', url);
            a.setAttribute('download', 'zamowienia_all.csv');
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        }

        function saveAsExcelSel(jsonData) {
            const data = JSON.parse(jsonData);
            const csvRows = [];

            // Define headers
                const headers = ["NazwaProduktu", "NumerKatalogowy", "Typ", "IloscSztuk", "IloscSztuk", "Dlugosc", "Szerokosc", "Wysokosc"];
            csvRows.push(headers.join(','));

            for (const row of data) {
                const values = headers.map(header => {
                    const escaped = ('' + (row[header] || "")).replace(/"/g, '\\"');
                    return `"${escaped}"`;
                });
                csvRows.push(values.join(','));
            }

            // Create CSV file
            const csvString = csvRows.join('\n');
            const blob = new Blob([csvString], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.setAttribute('hidden', '');
            a.setAttribute('href', url);
            a.setAttribute('download', 'elementyZamowienia.csv');
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        }
    </script>

</head>
<body>

    <Layout class="highlighted-background">
        <Header Style="height:50%">
            <h3>Zamówione elementy do zlecenia</h3>
            @if (boolAdmin || boolZmiana)
            {
                <Button Type="primary" OnClick="@(ShowDialogAddNew)">
                    Dodaj nową pozycję do zamówienia na elementy
                </Button>
            }

            @if (elementyDoZlecen != null && elementyDoZlecen.Count > 0)
            {
                <Button Type="reset" OnClick="@(CopySzybyToClipboard)">
                    @uwagaKopiuj
                </Button>
                <Button Type="reset" OnClick="@(ExportToExcel)">
                    Zapisz do pliku CSV - wszystko
                </Button>
                <Button Type="reset" OnClick="@(ExportSelectedColumnsToExcel)">
                    Zapisz do pliku CSV - tylko wymagane kolumny
                </Button>
            }
            <Tooltip Placement="@Placement.TopRight" Title="Ilość widocznych wierszy">
            <AntDesign.InputNumber @bind-Value="_pageSize" Min="1" Max="25" DefaultValue="7" PlaceHolder="Ilość widocznych wierszy"></AntDesign.InputNumber>
            </Tooltip>
            <Tooltip Placement="@Placement.TopRight" Title="Wróć do poprzedniej strony">
                <Button class="btn-back" Icon="@IconType.Fill.Backward" OnClick="GoBack"></Button>
            </Tooltip>
        </Header>

        <Content Style="height:80%">

            @if (elementyDoZlecen == null)
            {
                <p><em>Czekaj na załadowanie danych...</em></p>
            }
            else
            {

                if (elementyDoZlecen.Count > 0)
                {
                    <div>
                        <Table TItem="ElemetZamDoZlecenWithProducent" DataSource="elementyDoZlecen" @bind-PageSize="@_pageSize"
                               Loading="false" ScrollX="2450" Size="TableSize.Small">
                            <PropertyColumn Title="ID" Property="c=>c.ElemetZamDoZlecen.Id" Hidden />
                            <PropertyColumn Width="250" Title="Nazwa Producenta" Property="c=>c.ProducentIMiejscowosc" Sortable OnFilter="(a, b) => a == b" Filterable />
                            <PropertyColumn Width="220" Property="c=>c.ElemetZamDoZlecen.NazwaProduktu" Sortable Filterable></PropertyColumn>@* DefaultSortOrder="SortDirection.Ascending" *@
                            <PropertyColumn Title="Numer Katalogowy" Property="c=>c.ElemetZamDoZlecen.NumerKatalogowy" Sortable Filterable />
                            <PropertyColumn Title="Kolor" Property="c=>c.ElemetZamDoZlecen.Kolor" Sortable />
                            <PropertyColumn Title="Typ" Property="c=>c.ElemetZamDoZlecen.Typ" Sortable />
                            <PropertyColumn Title="Jednostka" Property="c=>c.ElemetZamDoZlecen.Jednostka" />
                            <PropertyColumn Title="Ilość sztuk" Property="c=>c.ElemetZamDoZlecen.IloscSztuk" />
                            <PropertyColumn Title="Data Zamówienia" Property="c=>c.ElemetZamDoZlecen.DataZamowienia" Format="yyyy-MM-dd" />
                            <PropertyColumn Title="Opis" Property="c=>c.ElemetZamDoZlecen.Opis" />
                            <Column Title="Czy zamówiono" TData="ElemetZamDoZlecenWithProducent">
                                <Template>
                                    <Checkbox @bind-Checked="@context.ElemetZamDoZlecen.CzyZamowiono" OnChange="(e)=>Handle(e, context.ElemetZamDoZlecen.Id)" Disabled="isNotDisabled" />
                                </Template>
                            </Column>
                            <Column Title="Poz. dostarczono" TData="ElemetZamDoZlecenWithProducent">
                                <Template>
                                    <Checkbox @bind-Checked="@context.ElemetZamDoZlecen.PozDostarczono" OnChange="(e)=>HandleDost(e, context.ElemetZamDoZlecen.Id)" Disabled="isNotDisabled" />
                                </Template>
                            </Column>
                             <PropertyColumn Title="Szerokość" Property="c=>c.ElemetZamDoZlecen.Szerokosc" />
                            <PropertyColumn Title="Wysokość" Property="c=>c.ElemetZamDoZlecen.Wysokosc" />
                            <PropertyColumn Title="Długość" Property="c=>c.ElemetZamDoZlecen.Dlugosc" />
                            <PropertyColumn Title="Objętość" Property="c=>c.ElemetZamDoZlecen.Objetosc" />
                            <PropertyColumn Title="Uwagi" Property="c=>c.ElemetZamDoZlecen.Uwagi" />
                            <PropertyColumn Title="Autor zmian" Property="c=>c.ElemetZamDoZlecen.KtoZapisal" />

                            <!-- Przykład kolumny dla daty z formatowaniem -->
                            <PropertyColumn Title="Data Zapisu" Property="c=>c.ElemetZamDoZlecen.DataZapisu" Format="yyyy-MM-dd HH:mm:ss" />
                            <!-- Przykład kolumny z niestandardowym renderowaniem komórki -->
                            <ActionColumn Title="Akcja" Width="100" Fixed="right">
                                @if (boolAdmin || boolZmiana)
                                {
                                    <Popconfirm Title="Czy chcesz edytować pozycję?"
                                                OnConfirm="()=> editRow(context.ElemetZamDoZlecen.Id)"
                                                OkText="Tak"
                                                CancelText="Nie">
                                        <a>Edytuj</a>
                                    </Popconfirm>
                                }
                                @if (boolAdmin || boolUsuniecia)
                                {
                                    <Popconfirm Title="Czy chcesz usunąć pozycję?"
                                                OnConfirm="()=> deleteRow(context.ElemetZamDoZlecen.Id)"
                                                OkText="Tak"
                                                CancelText="Nie">
                                        <a style="color:red">Usuń</a>
                                    </Popconfirm>
                                }
                            </ActionColumn>
                        </Table>

                    </div>
                }
                else
                {
                    <h2>Do tego zlecenia (oferty) nie zamówiono żadnych elementów</h2>
                }
            }
        </Content>

        <Footer >
            <div>
                <div style="display: flex; align-items: center; gap: 10px;">
                    <label for="fileInput" style="font-size:0.7em; font-weight:bold;">
                        Wybierz plik ze Stolcad z listą materiałów (C:\STOLCAD\Rob\PrnPdf - zestawienie elementów):
                    </label>
                    <InputFile id="fileInput" OnChange="HandleFileSelected" />

                    <Button Type="@ButtonType.Link" style="font-size:1.0em; height:30px; margin-top:0; font-style:revert-layer; color:brown" @onclick="() => PasteStolcad()">
                        Wklej ze schowka elementyZamowienia z STOLCAD [ODWOŁANIA]
                    </Button>
                    <Checkbox @bind-Checked="isCheckedDelAll">Usuń wszystkie dane przed zapisem nowych</Checkbox>
                </div>


                @if (zestawienie != null)
                {
                    <div>
                        <Divider></Divider>
                        <Button Type="@ButtonType.Primary" Style="width:99%" Disabled="@isNotDisabled" OnClick="SaveAll">Zapisz wyszystkie zapisane z poniższej tabeli</Button>
                    </div>

                    <div style="overflow: auto; width: 100%; height: 200px">

                        <h4>Zestawienie Nr: @zestawienie.NrZestawienia</h4>
                        <p>Data: @zestawienie.Data.ToString("yyyy/MM/dd")</p>
                        <p>Odbiorca: @zestawienie.Odbiorca</p>

                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Lp</th>
                                    <th>Szerokość</th>
                                    <th>Wysokość</th>
                                    <th>Ilość</th>
                                    <th>Nazwa Produktu</th>
                                    <th>Numer Katalogowy</th>
                                    <th>Powierchnia</th>
                                    <th>Uwagi</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in zestawienie.ListaElementow)
                                {
                                    <tr>
                                        <td>@item.Lp</td>
                                        <td>@item.Szerokosc</td>
                                        <td>@item.Wysokosc</td>
                                        <td>@item.IloscSztuk</td>
                                        <td>@item.NazwaProduktu</td>
                                        <td>@item.NumerKatalogowy</td>
                                        <td>@item.Powierzchnia</td>
                                        <td>@item.Uwagi</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </Footer>

    </Layout>

    <div class="modal fade @classShow" tabindex="-1" style="display: @display;">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Poz. do zamówienia dodaj / zmień</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HandleCancel">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @if (elementyDoZlecen != null && elementyZamowienia.ElemetZamDoZlecen != null && elementyZamowienia.ProducenciPodwykonawcy != null)
                    {
                        <NowaPozZamowienia elementyZamowienia="elementyZamowienia" elementyDoZlecen="elementyDoZlecen" OnButtonClicked="CloseModal" />
                    }
                    else
                    {
                        <h4>Czekaj na załadowanie formatki!</h4>
                    }
                </div>
            </div>
        </div>
    </div>
</body>
</html>

@code {
    [Parameter]
    public string? RowIdZlecenia { get; set; }

    [Inject] private AppState AppState { get; set; } = default!;

    private string? pdfContent;

    private List<ElemetZamDoZlecenWithProducent>? elementyDoZlecen;
    private List<ElemetZamDoZlecenWithProducent>? oryginalElementyDoZlecen;

    private GEORGE.Client.Pages.PDF.ZestawienieElementZamowienia? zestawienie;

    private bool _visible = false;
    private string display = "none;";
    private string classShow = "";

    private long cid = -1;

    private ElemetZamDoZlecenWithProducent elementyZamowienia = new ElemetZamDoZlecenWithProducent();

    private List<ElemetZamDoZlecenWithProducent>? zamowieniaall;

    private string uwagaKopiuj = "Kopiuj do schowka dane";

    private bool isCheckedDelAll = false;

    int _pageSize = 7;

    protected override async Task OnInitializedAsync()
    {
        elementyZamowienia = new ElemetZamDoZlecenWithProducent
            {
                ElemetZamDoZlecen = new ElemetZamDoZlecen
                {
                    Id = 0,
                    RowIdZlecenia = RowIdZlecenia,
                    DataZamowienia = DateTime.MinValue,
                    DataRealizacji = DateTime.MinValue,
                    DataZapisu = DateTime.Now,
                    KtoZapisal = user
                },
                ProducenciPodwykonawcy = new ProducenciPodwykonawcy
                {
                    // Przypisz odpowiednie wartości dla właściwości ProducenciPodwykonawcy
                    NazwaProducenta = "" // Przykładowa wartość
                },
                DodatkowaInformacja = "Dane z dnia" + DateTime.Now
            };

        if (AppState != null)
        {
            AppState.SomeData = "";
        }

        await Laduj_Uprawnienia();

        if (string.IsNullOrWhiteSpace(RowIdZlecenia))
        {
            Console.WriteLine($"Bład: brak danych w RowIdZlecenia");
        }
        else
        {
            Console.WriteLine($"RowIdZlecenia: {RowIdZlecenia}");
        }

        try
        {
            elementyDoZlecen = await Http.GetFromJsonAsync<List<ElemetZamDoZlecenWithProducent>>($"api/ElementyDoZlecen/rowid/{RowIdZlecenia}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"******* Błąd {ex.Message}");
            await _message.Error("Błąd ładowania danych");
        }
    }

    public async Task ExportToExcel()
    {
        if (elementyDoZlecen != null)
        {
            var jsonData = JsonSerializer.Serialize(elementyDoZlecen);
            await JSRuntime.InvokeVoidAsync("saveAsExcel", jsonData);
        }
    }

    public async Task ExportSelectedColumnsToExcel()
    {
        if (elementyDoZlecen != null)
        {
            var selectedData = elementyDoZlecen.Select(k => new
            {
                NazwaProduktu = RemoveWhitespace(k.ElemetZamDoZlecen.NazwaProduktu),
                NumerKatalogowy = RemoveWhitespace(k.ElemetZamDoZlecen.NumerKatalogowy),
                Typ = RemoveWhitespace(k.ElemetZamDoZlecen.Typ),
                IloscSztuk = k.ElemetZamDoZlecen.IloscSztuk,
                Dlugosc = k.ElemetZamDoZlecen.Dlugosc,
                Szerokosc = k.ElemetZamDoZlecen.Szerokosc,
                Wysokosc = k.ElemetZamDoZlecen.Wysokosc,
            });

            var jsonData = JsonSerializer.Serialize(selectedData);
            await JSRuntime.InvokeVoidAsync("saveAsExcelSel", jsonData);
        }
    }

    private string RemoveWhitespace(string input)
    {
        if (string.IsNullOrEmpty(input)) return input;

        // Usuwamy tabulatory i podwójne spacje
        return System.Text.RegularExpressions.Regex.Replace(input, @"\s+", " ").Trim();
    }


    private async Task CopySzybyToClipboard()
    {
        if (elementyDoZlecen == null || elementyDoZlecen.Count == 0) return;

        var kantowkiText = string.Join("\n", elementyDoZlecen.Select(k =>
            $"RowIdZlecenia: {k.ElemetZamDoZlecen.RowIdZlecenia}, Szrokość: {k.ElemetZamDoZlecen.Szerokosc}, Wysokość: {k.ElemetZamDoZlecen.Wysokosc}, Nazwa Produktu: {k.ElemetZamDoZlecen.NazwaProduktu}, Numer Katalogowy: {k.ElemetZamDoZlecen.NumerKatalogowy}, Ilość: {k.ElemetZamDoZlecen.IloscSztuk}, Uwagi: {k.ElemetZamDoZlecen.Uwagi}, DataZamowienia: {k.ElemetZamDoZlecen.DataZamowienia}, DataRealizacji: {k.ElemetZamDoZlecen.DataRealizacji}, DataZapisu: {k.ElemetZamDoZlecen.DataZapisu}, KtoZapisal: {k.ElemetZamDoZlecen.KtoZapisal}, OstatniaZmiana: {k.ElemetZamDoZlecen.OstatniaZmiana}"
        ));

        await JSRuntime.InvokeVoidAsync("copyToClipboard", kantowkiText);

        uwagaKopiuj = "Dane skopiowano do schowka";

        await _message.Success("Dane skopiowano do schowka");
    }

    private async void Handle(bool value, long idr)
    {
        Console.WriteLine($"{value} / {idr}");
        await ZapiszUstawienieStanuCzyZam(idr, value);

    }

    private async Task ZapiszUstawienieStanuCzyZam(long idr, bool nowyStan)
    {
        //  var aktualizacja = new { Id = idr, MaterialZeStanMagazyn = nowyStan };

        var response = await Http.PutAsJsonAsync($"api/ElementyDoZlecen/{idr}/updateCzyZamowiono", nowyStan);

        if (response.IsSuccessStatusCode)
        {
            if (elementyDoZlecen != null)
            {
                var element = elementyDoZlecen.FirstOrDefault(e => e.ElemetZamDoZlecen.Id == idr);

                if (element != null)
                {
                    element.ElemetZamDoZlecen.DataZamowienia = DateTime.Now;
                    oryginalElementyDoZlecen = elementyDoZlecen.DeepCopyList();
                    await _message.Success("Zmieniono status");
                    StateHasChanged();
                }

            }
        }
        else
        {
            await _message.Error("Nie zmieniono status");
        }
    }

    private async void HandleDost(bool value, long idr)
    {
        Console.WriteLine($"{value} / {idr}");
        await ZapiszUstawienieStanuCzyCzyDostarczono(idr, value);
    }

    private async Task ZapiszUstawienieStanuCzyCzyDostarczono(long idr, bool nowyStan)
    {
        // Aktualizacja stanu dostarczenia w API
        var response = await Http.PutAsJsonAsync($"api/ElementyDoZlecen/{idr}/updateCzyDostarczono", nowyStan);

        if (response.IsSuccessStatusCode)
        {
            if (elementyDoZlecen != null)
            {
                // Znalezienie właściwego elementu na podstawie Id
                var element = elementyDoZlecen.FirstOrDefault(e => e.ElemetZamDoZlecen.Id == idr);

                if (element != null)
                {
                    // Ustawienie daty dostarczenia
                    element.ElemetZamDoZlecen.DataDostarczenia = DateTime.Now;

                    // Tworzenie kopii listy po aktualizacji
                    oryginalElementyDoZlecen = elementyDoZlecen.DeepCopyList();

                    // Informowanie użytkownika o sukcesie
                    await _message.Success("Zmieniono status");

                    // Odświeżenie komponentu
                    StateHasChanged();
                }
            }
        }
        else
        {
            // Informowanie użytkownika o niepowodzeniu
            await _message.Error("Nie zmieniono status");
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var path = Path.GetTempFileName();
            await using (var stream = file.OpenReadStream())
            await using (var fileStream = new FileStream(path, FileMode.Create))
            {
                await stream.CopyToAsync(fileStream);
            }

            pdfContent = PdfReaderService.ReadPdfTable(path);

           zestawienie = PdfDataParserElement.ParsePdfDataElementy(pdfContent);

            StateHasChanged();

        }
    }

    private async Task PasteStolcad()
    {
        try
        {
            // Pobranie danych ze schowka
            var clipboardText = await JSRuntime.InvokeAsync<string>("navigator.clipboard.readText");

            zestawienie = PdfDataParserElement.ParseClipboardData(clipboardText);

            StateHasChanged();

        }
        catch (Exception ex)
        {
            _ = _notice.Error(new()
                {
                    Message = ex.Message,
                    Description = ex.StackTrace,
                    Placement = NotificationPlacement.BottomLeft
                });
        }
    }


    private async Task SaveAll()
    {
        zamowieniaall = new List<ElemetZamDoZlecenWithProducent>();

        if (zestawienie == null) return;
        @foreach (var item in zestawienie.ListaElementow)
        {
            float numSzerokosc;

            if (float.TryParse(item.Szerokosc, out numSzerokosc))
            {
                var elementyZamowienia = new ElemetZamDoZlecenWithProducent
                    {
                        ElemetZamDoZlecen = new ElemetZamDoZlecen
                        {
                            RowIdZlecenia = RowIdZlecenia,
                            Szerokosc = string.IsNullOrEmpty(item.Szerokosc) ? 0 : numSzerokosc,
                            Wysokosc = string.IsNullOrEmpty(item.Wysokosc) ? 0 : float.Parse(item.Wysokosc),
                            NazwaProduktu = item.NazwaProduktu,
                            IloscSztuk = string.IsNullOrEmpty(item.IloscSztuk) ? 0 : int.Parse(item.IloscSztuk),
                            DataZamowienia = DateTime.Now,
                            DataRealizacji = DateTime.Now.AddDays(14),
                            DataZapisu = DateTime.Now,
                            KtoZapisal = user
                        },
                        DodatkowaInformacja = "Dane zaimportowano z PDF" // Zamiast Uwagi
                    };

                zamowieniaall.Add(elementyZamowienia);
            }
        }


        try
        {
            // Wyślij dane do API
            var response = await Http.PostAsJsonAsync($"api/elementyDoZlecen/save-all/{isCheckedDelAll}", zamowieniaall);

            if (response.IsSuccessStatusCode)
            {
                // Operacja zakończona sukcesem
                Console.WriteLine("Dane zostały zapisane pomyślnie.");

                elementyDoZlecen = await Http.GetFromJsonAsync<List<ElemetZamDoZlecenWithProducent>>($"api/ElementyDoZlecen/rowid/{RowIdZlecenia}");

                zestawienie = null;
            }
            else
            {
                // Obsłuż błąd
                Console.WriteLine("Wystąpił błąd podczas zapisywania danych.");
            }
        }
        catch (Exception ex)
        {
            // Obsłuż wyjątek
            Console.WriteLine($"Wystąpił błąd: {ex.Message}");
        }
    }

    private async Task HandleSubmit()
    {

        if (_visible == false) return;

        _visible = false;

        await HideDialog();

        StateHasChanged(); // Odśwież widok

    }

    public async Task deleteRow(long id)
    {
        if (elementyDoZlecen == null) return;

        try
        {
            var response = await Http.DeleteAsync($"api/ElementyDoZlecen/{id}");

            if (response.IsSuccessStatusCode)
            {
                // Usunięcie rekordu z listy po pomyślnym usunięciu z serwera
                elementyDoZlecen = elementyDoZlecen.Where(r => r.ElemetZamDoZlecen.Id != id).ToList();
                Console.WriteLine("Rekord został pomyślnie usunięty.");
            }
            else
            {
                Console.WriteLine($"Błąd podczas usuwania rekordu: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"******* Błąd {ex.Message}");
        }
    }

    public async Task editRow(long id)
    {
        //listOfData = listOfData.Where(d => d.Id != id).ToArray();
        if (elementyDoZlecen == null) return;

        oryginalElementyDoZlecen = elementyDoZlecen.DeepCopyList();

        // Logika edycji
        if (_visible)
        {
            _visible = false;
            await HideDialog();
        }
        else
        {
            elementyZamowienia = new ElemetZamDoZlecenWithProducent();

            var listOfData = elementyDoZlecen.Where(d => d.ElemetZamDoZlecen.Id == id).ToArray();

            // Pobierz elementyZamowienia na podstawie indeksu wiersza
            if (listOfData != null && listOfData.Count() > 0)
            {
                cid = id;

                elementyZamowienia = listOfData[0];

                _visible = true;

                await ShowDialog();
            }

            // Wyświetl numer zamówienia w konsoli
            Console.WriteLine(elementyZamowienia.ElemetZamDoZlecen.NazwaProduktu);
        }

    }

    private async Task CloseModal()
    {
        Console.WriteLine("CloseModal");

        await HandleCancel();

        if (elementyDoZlecen != null) oryginalElementyDoZlecen = elementyDoZlecen.DeepCopyList();

        elementyDoZlecen = await Http.GetFromJsonAsync<List<ElemetZamDoZlecenWithProducent>>($"api/ElementyDoZlecen/rowid/{RowIdZlecenia}");
    }

    public async Task HandleCancel()
    {
        _visible = false;
        await HideDialog();
    }

    public async Task HandleCloseAdd()
    {
        _visible = false;
        await HideDialog();
        await HandleSubmit();
    }

    public async Task ShowDialogAddNew()
    {

        elementyZamowienia = new ElemetZamDoZlecenWithProducent
            {
                ElemetZamDoZlecen = new ElemetZamDoZlecen
                {
                    Id = 0,
                    RowIdZlecenia = RowIdZlecenia,
                    DataZamowienia = DateTime.MinValue,
                    DataRealizacji = DateTime.MinValue,
                    DataZapisu = DateTime.Now,
                    KtoZapisal = user
                },
                ProducenciPodwykonawcy = new ProducenciPodwykonawcy
                {
                    // Przypisz odpowiednie wartości dla właściwości ProducenciPodwykonawcy
                    NazwaProducenta = "" // Przykładowa wartość
                },
                DodatkowaInformacja = "Dane z dnia" + DateTime.Now
            };

        cid = -1;

        display = "block";
        classShow = "show";
        StateHasChanged();

        await Task.CompletedTask;
    }

    public async Task ShowDialog()
    {
        display = "block";
        await Task.Delay(50);
        classShow = "show";
        StateHasChanged();
    }

    private async Task HideDialog()
    {
        if (cid > 0 && elementyDoZlecen != null)
        {
            elementyDoZlecen = oryginalElementyDoZlecen;
        }

        cid = -1;

        classShow = "";
        await Task.Delay(200);
        display = "none";

        StateHasChanged();
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    private bool boolOdczyt = false;
    private bool boolZmiana = false;
    private bool boolUsuniecia = false;
    private bool boolAdmin = false;
    private string RowIdPracownika = "";
    private string? user;
    private bool isNotDisabled => !boolZmiana || !boolAdmin;
    private List<UprawnieniaPracownikaViewModel>? uprawnienia;

    private async Task Laduj_Uprawnienia()
    {
        user = await LocalStorage.GetStringAsync("user");

        if (string.IsNullOrEmpty(user))
        {
            //NavigationManager.NavigateTo($"", true);
            user = "NaN";
            return;
        }

        string nazwaTabeli = "ElemetZamDoZlecen";

        Console.WriteLine($"api/ZwrocSatus/{user}/{nazwaTabeli}");

        try
        {
            uprawnienia = await Http.GetFromJsonAsync<List<UprawnieniaPracownikaViewModel>>($"/api/ZwrocSatus/{user}/{nazwaTabeli}");
        }
        catch (System.Net.Http.HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            Console.WriteLine("Brak danych!!!");
            await _message.Error("Brak danych - status użytkownika");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await _message.Error(ex.Message);
        }

        if (uprawnienia != null)
        {
            if (uprawnienia.Count > 0)
            {
                var znalezioneElementy = uprawnienia.Where(uprawnienie => uprawnienie.TableName == nazwaTabeli);
                Console.WriteLine("Znaleziono uprawnienia dla użytkownika: " + user + " w tabeli: " + nazwaTabeli + " ilość rekordów: " + znalezioneElementy.Count());
                if (znalezioneElementy.Any())
                {
                    var szuk = znalezioneElementy.FirstOrDefault(x => x.TableName == nazwaTabeli);
                    if (szuk != null)
                    {
                        boolOdczyt = szuk.Odczyt;
                        boolZmiana = szuk.Zmiana;
                        boolUsuniecia = szuk.Usuniecie;
                        boolAdmin = szuk.Administrator;
                        RowIdPracownika = szuk.RowId;
                    }
                }
            }
        }
    }
}
