@page "/Szyby-do-zlecen/{RowIdZlecenia}"
@using GEORGE.Shared.Models
@using GEORGE.Shared.Class
@using GEORGE.Client.Pages
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using AntDesign
@inject IMessageService _message
@inject PdfReaderService PdfReaderService
@inject GEORGE.Client.Pages.PDF.PdfDataParserSzyby PdfDataParserSz
@inject Utilities.ILocalStorage LocalStorage
@using System.Net;
@using System.Text.Json;
@inject INotificationService _notice


<!DOCTYPE html>
<html>
<head>
    <style>
        .custom-link {
            color: blue;
        }

        .custom-linkszy {
            color: darkblue;
        }

        .highlighted-background {
            background-color: white;
            overflow: auto; /* Dodaje paski przewijania, gdy zawartość przekracza rozmiar kontenera */
            max-height: calc(100vh - 20px); /* Maksymalna wysokość kontenera dopasowana do wysokości okna minus 155px */
            width: calc(100% - 260px); /* Ustawia szerokość na 100% okna minus 260px */
            box-sizing: border-box; /* Uwzględnia padding i border w obliczaniu wysokości */
            position: absolute;
            left: 260px; /* Ustawia lewą krawędź 260px od lewej strony okna */
            top: 20px; /* Ustawia górną krawędź 155px od góry okna */
        }

    </style>

    <meta charset="utf-8" />
    <PageTitle>Zamówiona szyby do zlecenia</PageTitle>

    <script>
        function copyToClipboard(text) {
            if (navigator.clipboard && navigator.clipboard.writeText) {
                navigator.clipboard.writeText(text).then(function () {
                    console.log('Text copied to clipboard');
                }).catch(function (error) {
                    console.error('Error copying text: ', error);
                });
            } else {
                // Fallback method
                var textArea = document.createElement("textarea");
                textArea.value = text;
                document.body.appendChild(textArea);
                textArea.select();
                try {
                    document.execCommand('copy');
                    console.log('Text copied to clipboard');
                } catch (err) {
                    console.error('Error copying text: ', err);
                }
                document.body.removeChild(textArea);
            }
        }

        function saveAsExcel(jsonData) {
            const data = JSON.parse(jsonData);
            const csvRows = [];

            // Extract headers
            const headers = Object.keys(data[0]);
            csvRows.push(headers.join(','));

            // Extract rows
            for (const row of data) {
                const values = headers.map(header => {
                    const escaped = ('' + row[header]).replace(/"/g, '\\"');
                    return `"${escaped}"`;
                });
                csvRows.push(values.join(','));
            }

            // Create CSV file
            const csvString = csvRows.join('\n');
            const blob = new Blob([csvString], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.setAttribute('hidden', '');
            a.setAttribute('href', url);
            a.setAttribute('download', 'szyby_all.csv');
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        }

        function saveAsExcelSel(jsonData) {
            const data = JSON.parse(jsonData);
            const csvRows = [];

            // Define headers
            const headers = ["Szerokosc", "Wysokosc", "RodzajSzyby", "RodzajRamki", "IloscSztuk", "CzyKsztalt"];
            csvRows.push(headers.join(','));

            for (const row of data) {
                const values = headers.map(header => {
                    const escaped = ('' + (row[header] || "")).replace(/"/g, '\\"');
                    return `"${escaped}"`;
                });
                csvRows.push(values.join(','));
            }

            // Create CSV file
            const csvString = csvRows.join('\n');
            const blob = new Blob([csvString], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.setAttribute('hidden', '');
            a.setAttribute('href', url);
            a.setAttribute('download', 'szyby.csv');
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        }
    </script>


</head>
<body>
    <div class="highlighted-background">
        <h3>Zamówione szyby do zlecenia</h3>

        @if (boolAdmin || boolZmiana)
        {
            <Button Type="primary" OnClick="@(ShowDialogAddNew)">
                Dodaj nowe zestawienie materiałów (nowa szyba)
            </Button>
        }

        @if (szybyDoZlecen != null && szybyDoZlecen.Count > 0)
        {
            <Button Type="reset" OnClick="@(CopySzybyToClipboard)">
                @uwagaKopiuj
            </Button>
            <Button Type="reset" OnClick="@(ExportToExcel)">
                Zapisz do pliku CSV - wszystko
            </Button>
            <Button Type="reset" OnClick="@(ExportSelectedColumnsToExcel)">
                Zapisz do pliku CSV - tylko wymagane kolumny
            </Button>
        }
         <Tooltip Placement="@Placement.TopRight" Title="Wróć do poprzedniej strony">
            <Button class="btn-back" Icon="@IconType.Fill.Backward" OnClick="GoBack"></Button>
        </Tooltip>
        <Divider></Divider>

        @if (szybyDoZlecen == null)
        {
            <p><em>Czekaj na załadowanie danych...</em></p>
        }
        else
        {
            <div>
                <Table TItem="SzybyDoZlecen" DataSource="@szybyDoZlecen" @bind-PageSize="@_pageSize" ScrollX="2150" Size="TableSize.Small">
                    <Column Title="ID" @bind-Field="@context.Id" Hidden />
                    <Column Width="80" Title="Szerokość" @bind-Field="@context.Szerokosc" Sortable OnFilter="(a, b) => a == b" Filterable />
                    <Column Width="80" Title="Wysokość" @bind-Field="@context.Wysokosc" Sortable OnFilter="(a, b) => a == b" Filterable />
                    <Column Width="250" Title="Opis szyby" @bind-Field="@context.RodzajSzyby" Sortable />
                    <Column Title="Rodzaj ramki" @bind-Field="@context.RodzajRamki" Sortable OnFilter="(a, b) => a == b" Filterable />
                    <Column Width="100" Title="Opis" @bind-Field="@context.NazwaProduktu" Sortable OnFilter="(a, b) => a == b" Filterable />
                    <Column Width="80" Title="Ilość" @bind-Field="@context.IloscSztuk" Sortable />
                    <Column Width="80" Title="Czy kształt" TData="SzybyDoZlecen">
                        <Template>
                            <Checkbox @bind-Checked="@context.CzyKsztalt" OnChange="(e)=>Handle(e, context.Id)" Disabled="isNotDisabled" />
                        </Template>
                    </Column>
                    <Column Width="80" Title="Czy zamówiono" TData="SzybyDoZlecen">
                        <Template>
                            <Checkbox @bind-Checked="@context.CzyZamowiono" OnChange="(e)=>HandleZamowiono(e, context.Id)" Disabled="isNotDisabled" />
                        </Template>
                    </Column>
                    <Column Width="80" Title="Poz. dostarcz." TData="SzybyDoZlecen">
                        <Template>
                            <Checkbox @bind-Checked="@context.PozDostarczono" OnChange="(e)=>HandleDostarczono(e, context.Id)" Disabled="isNotDisabled" />
                        </Template>
                    </Column>
                    <Column Title="Uwagi" @bind-Field="@context.Uwagi" Sortable />
                    <Column Title="Autor zmian" @bind-Field="@context.KtoZapisal" Sortable />

                    <!-- Przykład kolumny dla daty z formatowaniem -->
                    <Column Title="Data Zapisu" TData="DateTime" DataIndex="DataZapisu" Format="yyyy-MM-dd HH:mm:ss" Sortable />
                    <!-- Przykład kolumny z niestandardowym renderowaniem komórki -->
                    <ActionColumn Title="Akcja" Width="100" Fixed="right">
                        @if (boolAdmin || boolZmiana)
                        {
                            <Popconfirm Title="Czy chcesz edytować pozycję?"
                                        OnConfirm="()=> editRow(context.Id)"
                                        OkText="Tak"
                                        CancelText="Nie">
                                <a>Edytuj</a>
                            </Popconfirm>
                        }
                        @if (boolAdmin || boolUsuniecia)
                        {
                            <Popconfirm Title="Czy chcesz usunąć pozycję?"
                                        OnConfirm="()=> deleteRow(context.Id)"
                                        OkText="Tak"
                                        CancelText="Nie">
                                <a style="color:red">Usuń</a>
                            </Popconfirm>
                        }
                    </ActionColumn>
                </Table>

            </div>
            <Divider></Divider>
            <div style="overflow: auto; width: 100%; height: 200px">
                <div>
                    <label for="fileInput" style="font-size:1em; font-weight:bold;">
                        Wybierz plik ze Stolcad z listą materiałów (C:\STOLCAD\Rob\PrnPdf - zestawienie szyb):
                    </label>
                    <InputFile id="fileInput" OnChange="HandleFileSelected" />

                    <Button Type="@ButtonType.Link" style="font-size:1.2em; height:30px; margin-top:10px; font-style:revert-layer; color:brown" @onclick="() => PasteStolcad()">
                        Wklej ze schowka szyby z STOLCAD [ODWOŁANIA]
                    </Button>
                    <Checkbox @bind-Checked="isCheckedDelAll">Usuń wszystkie dane przed zapisem nowych</Checkbox>
                </div>

                @if (zestawienie != null)
                {
                    <div>
                        <Divider></Divider>
                        <Button Type="@ButtonType.Primary" Style="width:99%" Disabled="@isNotDisabled" OnClick="SaveAll">Zapisz wyszystkie zapisane z poniższej tabeli</Button>
                    </div>

                    <div style="overflow: auto; width: 100%; height: 200px">

                        <h4>Zestawienie Nr: @zestawienie.NrZestawienia</h4>
                        <p>Data: @zestawienie.Data.ToString("yyyy/MM/dd")</p>
                        <p>Odbiorca: @zestawienie.Odbiorca</p>

                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Lp</th>
                                    <th>Szerokość</th>
                                    <th>Wysokość</th>
                                    <th>Ilość</th>
                                    <th>Rodz. Szyby</th>
                                    <th>Rodz. Ramki</th>
                                    <th>Powierchnia</th>
                                    <th>Uwagi</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in zestawienie.ListaSzyb)
                                {
                                    <tr>
                                        <td>@item.Lp</td>
                                        <td>@item.Szerokosc</td>
                                        <td>@item.Wysokosc</td>
                                        <td>@item.Ilosc</td>
                                        <td>@item.RodzajSzyby</td>
                                        <td>@item.RodzajRamki</td>
                                        <td>@item.Powierzchnia</td>
                                        <td>@item.Uwagi</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        }

        <div class="modal fade @classShow" tabindex="-1" style="display: @display;">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Szyby dodaj / zmień</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HandleCancel">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <AntDesign.Form Model="@szyby" Layout="FormLayout.Horizontal" OnFinish="@HandleSubmit">
                            <div class="row">
                                <!-- Kolumna 1 -->
                                <div class="col-md-6">
                                    <AntDesign.FormItem Label="Szerokość">
                                        <AntDesign.InputNumber @bind-Value="szyby.Szerokosc" Min="50" Required />
                                    </AntDesign.FormItem>
                                    <AntDesign.FormItem Label="Wysokość">
                                        <AntDesign.InputNumber @bind-Value="szyby.Wysokosc" Min="50" Required />
                                    </AntDesign.FormItem>
                                    <AntDesign.FormItem Label="Rodzaj szyby">
                                        <AntDesign.Input @bind-Value="szyby.RodzajSzyby" Required Placeholder="Podaj rodzaj szyby" />
                                    </AntDesign.FormItem>
                                    <AntDesign.FormItem Label="Rodzaj ramki">
                                        <AntDesign.Input @bind-Value="szyby.RodzajRamki" Required Placeholder="Podaj rodzaj ramki" />
                                    </AntDesign.FormItem>
                                    <AntDesign.FormItem Label="Ilość sztuk">
                                        <AntDesign.InputNumber @bind-Value="szyby.IloscSztuk" Min="1" Required />
                                    </AntDesign.FormItem>
                                    @*             <AntDesign.FormItem Label="Czy kształy">
                                    <Switch @bind-Value="@context.CzyKsztalt" />
                                    </AntDesign.FormItem> *@
                                    <AntDesign.FormItem Label="Czy kształt">
                                        <AntDesign.Checkbox @bind-Value="szyby.CzyKsztalt" />
                                    </AntDesign.FormItem>
                                    <AntDesign.FormItem Label="Czy Zamowiono">
                                        <Switch @bind-Value="@context.CzyZamowiono" />
                                    </AntDesign.FormItem>
                                    <AntDesign.FormItem Label="Czy dostarczono">
                                        <Switch @bind-Value="@context.PozDostarczono" />
                                    </AntDesign.FormItem>
                                </div>

                                <!-- Kolumna 2 -->
                                <div class="col-md-6">
                                    <AntDesign.FormItem Label="Uwagi">
                                        <AntDesign.Input @bind-Value="szyby.Uwagi" />
                                    </AntDesign.FormItem>
                                    <AntDesign.FormItem Label="Data Zamówienia">
                                        <DatePicker @bind-Value="szyby.DataZamowienia" Required />
                                    </AntDesign.FormItem>
                                    <AntDesign.FormItem Label="Data Realizacji">
                                        <DatePicker @bind-Value="szyby.DataRealizacji" Required />
                                    </AntDesign.FormItem>
                                    <AntDesign.FormItem Label="Data Dostarczenia">
                                        <DatePicker @bind-Value="szyby.DataDostarczenia" Required />
                                    </AntDesign.FormItem>
                                    <AntDesign.FormItem Label="Kto Zapisał">
                                        <AntDesign.Input @bind-Value="szyby.KtoZapisal" Required />
                                    </AntDesign.FormItem>
                                    <AntDesign.FormItem Label="Ostatnia Zmiana">
                                        <AntDesign.Input @bind-Value="szyby.OstatniaZmiana" ReadOnly />
                                    </AntDesign.FormItem>
                                </div>
                            </div>

                            <AntDesign.FormItem>
                                <AntDesign.Button Type="primary" @onclick="@HandleAddNew" HtmlType="submit">Zapisz</AntDesign.Button>
                                <AntDesign.Button @onclick="@HandleCancel">Anuluj</AntDesign.Button>
                            </AntDesign.FormItem>
                        </AntDesign.Form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>

@code {
    [Parameter]
    public string? RowIdZlecenia { get; set; }

    [Inject] private AppState AppState { get; set; } = default!;

    private string? pdfContent;

    private List<SzybyDoZlecen>? szybyDoZlecen;
    private List<SzybyDoZlecen>? oryginalSzybyDoZlecen;

    private GEORGE.Client.Pages.PDF.ZestawienieSzyb? zestawienie;

    private bool _visible = false;
    private string display = "none;";
    private string classShow = "";

    private long cid = -1;

    private SzybyDoZlecen szyby = new SzybyDoZlecen();

    private List<SzybyDoZlecen>? szybyall;

    private string uwagaKopiuj = "Kopiuj do schowka dane";

    private bool isCheckedDelAll = true;

    int _pageSize = 7;

    protected override async Task OnInitializedAsync()
    {
        if (AppState != null)
        {
            AppState.SomeData = "";
        }

        await Laduj_Uprawnienia();

        if (string.IsNullOrWhiteSpace(RowIdZlecenia))
        {
            Console.WriteLine($"Bład: brak danych w RowIdZlecenia");
        }
        else
        {
            Console.WriteLine($"RowIdZlecenia: {RowIdZlecenia}");
        }

        try
        {
            szybyDoZlecen = await Http.GetFromJsonAsync<List<SzybyDoZlecen>>($"api/SzybyDoZlecen/rowid/{RowIdZlecenia}");

            szyby = new SzybyDoZlecen();
            szyby.Id = 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"******* Błąd {ex.Message}");
        }
    }

    public async Task ExportToExcel()
    {
        if (szybyDoZlecen != null)
        {
            var jsonData = JsonSerializer.Serialize(szybyDoZlecen);
            await JSRuntime.InvokeVoidAsync("saveAsExcel", jsonData);
        }
    }

    public async Task ExportSelectedColumnsToExcel()
    {
        if (szybyDoZlecen != null)
        {
            var selectedData = szybyDoZlecen.Select(k => new
            {
                k.Szerokosc,
                k.Wysokosc,
                k.RodzajSzyby,
                k.RodzajRamki,
                k.IloscSztuk,
                k.CzyKsztalt
            });

            var jsonData = JsonSerializer.Serialize(selectedData);
            await JSRuntime.InvokeVoidAsync("saveAsExcelSel", jsonData);
        }
    }

    private async Task CopySzybyToClipboard()
    {
        if (szybyDoZlecen == null || szybyDoZlecen.Count == 0) return;

        var kantowkiText = string.Join("\n", szybyDoZlecen.Select(k =>
            $"RowIdZlecenia: {k.RowIdZlecenia}, Szrokość: {k.Szerokosc}, Wysokość: {k.Wysokosc}, Rozaj Szyby: {k.RodzajSzyby}, Rodzaj Ramki: {k.RodzajRamki}, Ilość: {k.IloscSztuk}, Uwagi: {k.Uwagi}, DataZamowienia: {k.DataZamowienia}, DataRealizacji: {k.DataRealizacji}, DataZapisu: {k.DataZapisu}, KtoZapisal: {k.KtoZapisal}, OstatniaZmiana: {k.OstatniaZmiana}"
        ));

        await JSRuntime.InvokeVoidAsync("copyToClipboard", kantowkiText);

        uwagaKopiuj = "Dane skopiowano do schowka";

        await _message.Success("Dane skopiowano do schowka");
    }

    private async void Handle(bool value, long idr)
    {
        Console.WriteLine($"{value} / {idr}");
        await ZapiszUstawienieStanu(idr, value);
    }

    private async Task ZapiszUstawienieStanu(long idr, bool nowyStan)
    {
        //  var aktualizacja = new { Id = idr, MaterialZeStanMagazyn = nowyStan };

        var response = await Http.PutAsJsonAsync($"api/szybyDoZlecen/{idr}/updateCzyKsztalt", nowyStan);

        if (response.IsSuccessStatusCode)
        {
            if (szybyDoZlecen != null)
            {
                oryginalSzybyDoZlecen = szybyDoZlecen.DeepCopyList();
                await _message.Success("Status zmieniono",1);
            }
        }
        else
        {
            await _message.Error("Status nie zmieniono");
        }
    }

    private async void HandleZamowiono(bool value, long idr)
    {
        Console.WriteLine($"{value} / {idr}");
        await ZapiszUstawienieStanuZamowiono(idr, value);
    }

    private async void HandleDostarczono(bool value, long idr)
    {
        Console.WriteLine($"{value} / {idr}");
        await ZapiszUstawienieStanuDostarczono(idr, value);
    }

    private async Task ZapiszUstawienieStanuZamowiono(long idr, bool nowyStan)
    {
        //  var aktualizacja = new { Id = idr, MaterialZeStanMagazyn = nowyStan };

        var response = await Http.PutAsJsonAsync($"api/szybyDoZlecen/{idr}/updateZamowiono", nowyStan);

        if (response.IsSuccessStatusCode)
        {
            if (szybyDoZlecen != null)
            {
                oryginalSzybyDoZlecen = szybyDoZlecen.DeepCopyList();
                await _message.Success("Status zmieniono", 1);
            }
        }
        else
        {
            await _message.Error("Status nie zmieniono");
        }
    }

    private async Task ZapiszUstawienieStanuDostarczono(long idr, bool nowyStan)
    {
        //  var aktualizacja = new { Id = idr, MaterialZeStanMagazyn = nowyStan };

        var response = await Http.PutAsJsonAsync($"api/szybyDoZlecen/{idr}/updateDostarczono", nowyStan);

        if (response.IsSuccessStatusCode)
        {
            if (szybyDoZlecen != null)
            {
                oryginalSzybyDoZlecen = szybyDoZlecen.DeepCopyList();
                await _message.Success("Status zmieniono",1);
            }
        }
        else
        {
            await _message.Error("Status nie zmieniono");
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var path = Path.GetTempFileName();
            await using (var stream = file.OpenReadStream())
            await using (var fileStream = new FileStream(path, FileMode.Create))
            {
                await stream.CopyToAsync(fileStream);
            }

            pdfContent = PdfReaderService.ReadPdfTable(path);

            zestawienie = PdfDataParserSz.ParsePdfDataSzyby(pdfContent);

            StateHasChanged();

        }
    }

    private async Task PasteStolcad()
    {
        try
        {
            // Pobranie danych ze schowka
            var clipboardText = await JSRuntime.InvokeAsync<string>("navigator.clipboard.readText");

            zestawienie = PdfDataParserSz.ParseClipboardData(clipboardText);

            StateHasChanged();

        }
        catch (Exception ex)
        {
            _ = _notice.Error(new()
                {
                    Message = ex.Message,
                    Description = ex.StackTrace,
                    Placement = NotificationPlacement.BottomLeft
                });
        }
    }


    private async Task SaveAll()
    {
        szybyall = new List<SzybyDoZlecen>();

        if (zestawienie == null) return;

        @foreach (var item in zestawienie.ListaSzyb)
        {
            float numSzerokosc;

            if (float.TryParse(item.Szerokosc, out numSzerokosc))
            {
                var szyby = new SzybyDoZlecen
                    {
                        RowIdZlecenia = RowIdZlecenia,
                        Szerokosc = string.IsNullOrEmpty(item.Szerokosc) ? 0 : numSzerokosc,
                        Wysokosc = string.IsNullOrEmpty(item.Wysokosc) ? 0 : float.Parse(item.Wysokosc),
                        RodzajSzyby = item.RodzajSzyby,
                        RodzajRamki = item.RodzajRamki,
                        Uwagi = "Dane zaimortowano z PDF",
                        IloscSztuk = string.IsNullOrEmpty(item.Ilosc) ? 0 : int.Parse(item.Ilosc),
                        DataZamowienia = DateTime.Now,
                        DataRealizacji = DateTime.Now.AddDays(14),
                        DataZapisu = DateTime.Now,
                        KtoZapisal = user,
                    };

                szybyall.Add(szyby);
            }

        }

        try
        {
            // Wyślij dane do API
            var response = await Http.PostAsJsonAsync($"api/szybyDoZlecen/save-all/{isCheckedDelAll}", szybyall);

            if (response.IsSuccessStatusCode)
            {
                // Operacja zakończona sukcesem
                Console.WriteLine("Dane zostały zapisane pomyślnie.");

                szybyDoZlecen = await Http.GetFromJsonAsync<List<SzybyDoZlecen>>($"api/SzybyDoZlecen/rowid/{RowIdZlecenia}");

                zestawienie = null;
            }
            else
            {
                // Obsłuż błąd
                Console.WriteLine("Wystąpił błąd podczas zapisywania danych.");
            }
        }
        catch (Exception ex)
        {
            // Obsłuż wyjątek
            Console.WriteLine($"Wystąpił błąd: {ex.Message}");
        }
    }

    bool dblBlokClick = false;

    private async Task HandleSubmit()
    {
        if (_visible == false || dblBlokClick) return;

        dblBlokClick = true;

        // Zmiana tekstu na wielkie litery
        szyby.RodzajSzyby = szyby.RodzajSzyby.ToUpper();

        szyby.OstatniaZmiana = $"Zmieniono: {DateTime.Now} {user}";

        HttpResponseMessage response;

        if (szyby.Id == 0)
        {
            // Console.WriteLine("Dodaje nową szybę 1");

            // // Sprawdź unikalność na podstawie RowIdZlecenia
            // var responsedbl = szybyDoZlecen.Where(e => e.Id == szyby.Id);

            // if (responsedbl != null && responsedbl.Any())
            // {
            //     // Wyświetl komunikat o błędzie, jeśli rekord nie jest unikalny
            //     Console.WriteLine("Błąd: Rekord o tym samym RowIdZlecenia już istnieje.");
            //     await _message.Error("Rodzaj szyby o tym samym RowIdZlecenia już istnieje.");
            //     dblBlokClick = false; // Odblokowanie przycisku

            //     _visible = false;
            //     await HideDialog();

            //     return;
            // }
            //Console.WriteLine("Dodaje nową szybę 2");
            // Użycie POST do dodania nowego rekordu
            response = await Http.PostAsJsonAsync($"api/SzybyDoZlecen/", szyby);

            //Console.WriteLine("Dodaje nową szybę 3");

        }
        else
        {
            // Użycie PUT do aktualizacji istniejącego rekordu
            response = await Http.PutAsJsonAsync($"api/SzybyDoZlecen/{szyby.Id}", szyby);

            // Zaktualizowanie lokalnej kopii danych
            if (szybyDoZlecen != null)
            {
                oryginalSzybyDoZlecen = szybyDoZlecen.DeepCopyList();
            }
        }

        if (response.IsSuccessStatusCode)
        {
            if (szyby.Id == 0)
            {
                // Dodanie nowego rekordu do listy
                szybyDoZlecen.Add(szyby);
            }
            else
            {
                // Znalezienie i aktualizacja istniejącego rekordu
                var index = szybyDoZlecen.FindIndex(z => z.Id == szyby.Id);
                if (index != -1)
                {
                    szybyDoZlecen[index] = szyby;
                }
            }

            _visible = false;  // Ukrycie formularza
            szyby = new SzybyDoZlecen();  // Zresetowanie danych formularza

            await HideDialog(); // Zamknięcie dialogu
            StateHasChanged(); // Odświeżenie widoku

            _visible = false;
            await HideDialog();
        }
        else
        {
            // Obsługa błędów
            Console.WriteLine("Błąd podczas zapisywania rodzaju szyby - źródło RAZOR");
            await _message.Error("Wystąpił błąd podczas zapisywania danych.");
        }

        dblBlokClick = false; // Odblokowanie przycisku po zakończeniu

        _visible = false;
        await HideDialog();
    }


    public async Task deleteRow(long id)
    {
        if (szybyDoZlecen == null) return;

        try
        {
            var response = await Http.DeleteAsync($"api/SzybyDoZlecen/{id}");

            if (response.IsSuccessStatusCode)
            {
                // Usunięcie rekordu z listy po pomyślnym usunięciu z serwera
                szybyDoZlecen = null;
                Console.WriteLine("Rekord został pomyślnie usunięty.");

                szybyDoZlecen = await Http.GetFromJsonAsync<List<SzybyDoZlecen>>($"api/SzybyDoZlecen/rowid/{RowIdZlecenia}");
            }
            else
            {
                Console.WriteLine($"Błąd podczas usuwania rekordu: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"******* Błąd {ex.Message}");
        }
    }


    public async Task editRow(long id)
    {
        //listOfData = listOfData.Where(d => d.Id != id).ToArray();
        if (szybyDoZlecen == null) return;

        oryginalSzybyDoZlecen = szybyDoZlecen.DeepCopyList();

        // Logika edycji
        if (_visible)
        {
            _visible = false;
            await HideDialog();
        }
        else
        {
            szyby = new SzybyDoZlecen();

            var listOfData = szybyDoZlecen.Where(d => d.Id == id).ToArray();

            // Pobierz szyby na podstawie indeksu wiersza
            if (listOfData != null && listOfData.Count() > 0)
            {
                cid = id;

                szyby = listOfData[0];

                _visible = true;

                await ShowDialog();
            }

            // Wyświetl numer zamówienia w konsoli
            Console.WriteLine(szyby.RodzajSzyby);
        }

    }

    public async Task HandleAddNew()
    {
        await Task.Delay(1);

        _visible = true;

        if (szyby.Wysokosc == 0 || szyby.Szerokosc == 0 || szyby.IloscSztuk == 0 ||
        string.IsNullOrEmpty(szyby.RodzajSzyby) || string.IsNullOrEmpty(szyby.RodzajRamki))
        {
            return;
        }

        await HandleSubmit();
    }

    public async Task HandleCancel()
    {
        _visible = false;
        await HideDialog();
    }

    public async Task HandleCloseAdd()
    {
        _visible = false;
        await HideDialog();
        await HandleSubmit();
    }

    public async Task ShowDialogAddNew()
    {
        szyby = new SzybyDoZlecen();
        szyby.KtoZapisal = user;
        szyby.DataZamowienia = DateTime.MinValue; 
        szyby.OstatniaZmiana = $"Dodano {DateTime.Now} {user}";

        szyby.Id = 0;
        szyby.RowIdZlecenia = RowIdZlecenia;

        cid = -1;

        display = "block";
        await Task.Delay(50);
        classShow = "show";

        StateHasChanged();
    }

    public async Task ShowDialog()
    {
        display = "block";
        await Task.Delay(50);
        classShow = "show";
        StateHasChanged();
    }

    private async Task HideDialog()
    {
        if (cid > 0 && szybyDoZlecen != null)
        {
            szybyDoZlecen = oryginalSzybyDoZlecen;
        }

        cid = -1;

        classShow = "";
        await Task.Delay(200);
        display = "none";

        StateHasChanged();
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    private bool boolOdczyt = false;
    private bool boolZmiana = false;
    private bool boolUsuniecia = false;
    private bool boolAdmin = false;
    private string RowIdPracownika = "";
    private string? user;
    private bool isNotDisabled => !boolZmiana || !boolAdmin;
    private List<UprawnieniaPracownikaViewModel>? uprawnienia;

    private async Task Laduj_Uprawnienia()
    {
        user = await LocalStorage.GetStringAsync("user");

        if (string.IsNullOrEmpty(user))
        {
            //NavigationManager.NavigateTo($"", true);
            user = "NaN";
            return;
        }

        string nazwaTabeli = "SzybyDoZlecen";

        Console.WriteLine($"api/ZwrocSatus/{user}/{nazwaTabeli}");

        try
        {
            uprawnienia = await Http.GetFromJsonAsync<List<UprawnieniaPracownikaViewModel>>($"/api/ZwrocSatus/{user}/{nazwaTabeli}");
        }
        catch (System.Net.Http.HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            Console.WriteLine("Brak danych!!!");
            await _message.Error("Brak danych - status użytkownika");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await _message.Error(ex.Message);
        }

        if (uprawnienia != null)
        {
            if (uprawnienia.Count > 0)
            {
                var znalezioneElementy = uprawnienia.Where(uprawnienie => uprawnienie.TableName == nazwaTabeli);
                Console.WriteLine("Znaleziono uprawnienia dla użytkownika: " + user + " w tabeli: " + nazwaTabeli + " ilość rekordów: " + znalezioneElementy.Count());
                if (znalezioneElementy.Any())
                {
                    var szuk = znalezioneElementy.FirstOrDefault(x => x.TableName == nazwaTabeli);
                    if (szuk != null)
                    {
                        boolOdczyt = szuk.Odczyt;
                        boolZmiana = szuk.Zmiana;
                        boolUsuniecia = szuk.Usuniecie;
                        boolAdmin = szuk.Administrator;
                        RowIdPracownika = szuk.RowId;
                    }
                }
            }
        }
    }
}
