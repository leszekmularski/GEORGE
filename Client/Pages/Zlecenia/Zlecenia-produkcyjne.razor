@page "/zlecenia-produkcyjne"
@using GEORGE.Shared.Models
@using GEORGE.Shared.Class
@inject HttpClient Http
@inject ModalService ModalService;
@inject ConfirmService ComfirmService;
@inject IMessageService _message
@inject NavigationManager NavigationManager
@using AntDesign
@using System.Net;

<style>
    .custom-link {
        color: blue;
    }

    .highlighted-background {
        background-color: white;
        overflow: auto; /* Dodaje paski przewijania, gdy zawartość przekracza rozmiar kontenera */
        max-height: calc(100vh - 155px); /* Maksymalna wysokość kontenera dopasowana do wysokości okna minus 150px */
        width: calc(100% - 260px); /* Ustawia szerokość na 100% okna minus 300px */
        box-sizing: border-box; /* Uwzględnia padding i border w obliczaniu wysokości */
        position: absolute;
        left: 260px; /* Ustawia lewą krawędź 300px od lewej strony okna */
        top: 155px; /* Ustawia górną krawędź 150px od góry okna */
    }


</style>

<PageTitle>Program do wspomagania produkcji zlecenia</PageTitle>

<h3>Zlecenia Produkcyjne</h3>

<Button Type="primary" OnClick="@(ShowDialogAddNew)">
    Dodaj Zlecenie
</Button>
<Divider></Divider>

@if (zleceniaProdukcyjne == null)
{
    <p><em>Czekaj na załadowanie danych...</em></p>
}
else
{
    <div class="highlighted-background">
        <Table TItem="ZleceniaProdukcyjne" DataSource="@zleceniaProdukcyjne">
            <ActionColumn Title="Materiały">
                <a @onclick="() => DodajKantowke(context)" class="custom-link">Kantówka</a>
            </ActionColumn>
            <Column Title="Status" TData="string">
                @if (context.Tags != null)
                {
                    @foreach (var tag in context.Tags)
                    {
                        <Tag Color="@(tag.Contains("szyb") ? "volcano" : tag.Contains("do produkcji")  ? "geekblue" : "green")">@tag</Tag>
                    }
                }
                else
                {
                    <Tag Color="black">Brak danych</Tag>
                }
            </Column>
            <Column Title="ID" @bind-Field="@context.Id" Hidden />
            <Column Title="Typ Dokumentu" @bind-Field="@context.TypZamowienia" Sortable OnFilter="(a, b) => a == b" Filterable />
            <Column Title="Numer Zamówienia" @bind-Field="@context.NumerZamowienia" Sortable OnFilter="(a, b) => a == b" Filterable />
            <Column Title="Data Produkcji" @bind-Field="@context.DataProdukcji" Sortable />
            <Column Title="Klient" @bind-Field="@context.Klient" Sortable OnFilter="(a, b) => a == b" Filterable />
            <Column Title="Nazwa Produktu" @bind-Field="@context.NazwaProduktu" Sortable />
            <Column Title="Adres" @bind-Field="@context.Adres" Sortable OnFilter="(a, b) => a == b" Filterable />
            <Column Title="Telefon" @bind-Field="@context.Telefon" Sortable />
            <Column Title="Email" @bind-Field="@context.Email" Sortable />
            <Column Title="CWZ" @bind-Field="@context.JednostkiNaZlecenie" Style="width:30px" Sortable />

            <!-- Przykład kolumny dla danych zagnieżdżonych -->
            @*    <Column Title="Nazwa Produktu 2" TData="string" DataIndex="NazwaProduktu2" Sortable /> *@

            <!-- Przykład kolumny dla daty z formatowaniem -->
            <Column Title="Data Zapisu" TData="DateTime" DataIndex="DataZapisu" Format="yyyy-MM-dd HH:mm:ss" Sortable />
            <!-- Przykład kolumny z niestandardowym renderowaniem komórki -->
            <ActionColumn Title="Akcja">
                <Popconfirm Title="Czy chcesz edytować pozycję?"
                            OnConfirm="()=> editRow(context.Id)"
                            OkText="Tak"
                            CancelText="Nie">
                    <a>Edytuj</a>
                </Popconfirm>
                <Popconfirm Title="Czy chcesz usunąć pozycję?"
                            OnConfirm="()=> ShowDialogPass(context.Id)"
                            OkText="Tak"
                            CancelText="Nie">
                    <a style="color:red">Usuń</a>
                </Popconfirm>
                <br />
                <a @onclick="() => FileEdit(context)">Zapisane pliki</a>
            </ActionColumn>
        </Table>
    </div>


}

<div class="modal fade @classShow" tabindex="-1" style="display: @display;">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <AntDesign.Form Model="@zlecenie" Layout="FormLayout.Vertical">
                    <AntDesign.Row Gutter="16">
                        <AntDesign.Col Span="12">
                            <AntDesign.FormItem Label="Typ Dokumentu">
                                <Select TItem="TypZamowienia"
                                        TItemValue="string"
                                        DataSource="@_TypZamowienia"
                                        @bind-Value="@zlecenie.TypZamowienia"
                                        ValueName="@nameof(TypZamowienia.Value)"
                                        LabelName="@nameof(TypZamowienia.Name)"
                                        GroupName="@nameof(TypZamowienia.Role)"
                                        SortByLabel="@SortDirection.Ascending"
                                        SortByGroup="@SortDirection.Ascending"
                                            DefaultActiveFirstOption="true"
                                        Style="width: 200px;">
                                </Select>
                            </AntDesign.FormItem>
                        </AntDesign.Col>
                    </AntDesign.Row>
                    <AntDesign.Row Gutter="16">
                        <AntDesign.Col Span="12">
                            <AntDesign.FormItem Label="Numer Zamówienia">
                                <AntDesign.Input @bind-Value="zlecenie.NumerZamowienia" />
                            </AntDesign.FormItem>
                        </AntDesign.Col>
                        <AntDesign.Col Span="12">
                            <AntDesign.FormItem Label="Numer Umowy">
                                <AntDesign.Input @bind-Value="zlecenie.NumerUmowy" />
                            </AntDesign.FormItem>
                        </AntDesign.Col>
                    </AntDesign.Row>
                    <AntDesign.Row Gutter="16">
                        <AntDesign.Col Span="12">
                            <AntDesign.FormItem Label="Data Produkcji">
                                <AntDesign.DatePicker @bind-Value="zlecenie.DataProdukcji" />
                            </AntDesign.FormItem>
                        </AntDesign.Col>
                        <AntDesign.Col Span="12">
                            <AntDesign.FormItem Label="Data Montażu">
                                <AntDesign.DatePicker @bind-Value="zlecenie.DataMontazu" />
                            </AntDesign.FormItem>
                        </AntDesign.Col>
                    </AntDesign.Row>
                    <AntDesign.Row Gutter="16">
                        <AntDesign.Col Span="12">
                            <AntDesign.FormItem Label="Data Wysyłki">
                                <AntDesign.DatePicker @bind-Value="zlecenie.DataWysylki" />
                            </AntDesign.FormItem>
                        </AntDesign.Col>
                        <AntDesign.Col Span="12">
                            <AntDesign.FormItem Label="Klient">
                                <AntDesign.Input @bind-Value="zlecenie.Klient" />
                            </AntDesign.FormItem>
                        </AntDesign.Col>
                    </AntDesign.Row>
                    <AntDesign.Row Gutter="16">
                        <AntDesign.Col Span="12">
                            <AntDesign.FormItem Label="Adres">
                                <AntDesign.Input @bind-Value="zlecenie.Adres" />
                            </AntDesign.FormItem>
                        </AntDesign.Col>
                        <AntDesign.Col Span="12">
                            <AntDesign.FormItem Label="Miejscowość">
                                <AntDesign.Input @bind-Value="zlecenie.Miejscowosc" />
                            </AntDesign.FormItem>
                        </AntDesign.Col>
                    </AntDesign.Row>
                    <AntDesign.Row Gutter="16">
                        <AntDesign.Col Span="12">
                            <AntDesign.FormItem Label="Telefon">
                                <AntDesign.Input @bind-Value="zlecenie.Telefon" />
                            </AntDesign.FormItem>
                        </AntDesign.Col>
                        <AntDesign.Col Span="12">
                            <AntDesign.FormItem Label="Adres Email">
                                <AntDesign.Input @bind-Value="zlecenie.Email" />
                            </AntDesign.FormItem>
                        </AntDesign.Col>
                        <AntDesign.Col Span="12">
                            <AntDesign.FormItem Label="Status nowy wpis po [,]">
                                <InputTextArea @bind-Value="zlecenie.TagsString" />
                            </AntDesign.FormItem>
                        </AntDesign.Col>
                        <AntDesign.Col Span="12">
                            <AntDesign.FormItem Label="Nazwa Produktu">
                                <AntDesign.Input @bind-Value="zlecenie.NazwaProduktu" />
                            </AntDesign.FormItem>
                        </AntDesign.Col>
                    </AntDesign.Row>
                    <AntDesign.Row Gutter="16">
                        <AntDesign.Col Span="12">
                            <AntDesign.FormItem Label="Nazwa Produktu 2">
                                <AntDesign.Input @bind-Value="zlecenie.NazwaProduktu2" />
                            </AntDesign.FormItem>
                        </AntDesign.Col>
                        <AntDesign.Col Span="12">
                            <AntDesign.FormItem Label="Kod Produktu">
                                <AntDesign.Input @bind-Value="zlecenie.KodProduktu" />
                            </AntDesign.FormItem>
                        </AntDesign.Col>
                    </AntDesign.Row>
                    <AntDesign.Row Gutter="16">
                        <AntDesign.Col Span="12">
                            <AntDesign.FormItem Label="Ilość">
                                <AntDesign.InputNumber @bind-Value="zlecenie.Ilosc" />
                            </AntDesign.FormItem>
                        </AntDesign.Col>
                        <AntDesign.Col Span="12">
                            <AntDesign.FormItem Label="Jednostki produkcyjne na wyk. Zlecenia">
                                <AntDesign.InputNumber @bind-Value="zlecenie.JednostkiNaZlecenie" />
                            </AntDesign.FormItem>
                        </AntDesign.Col>
                        <AntDesign.Col Span="12">
                            <AntDesign.FormItem Label="Kto Zapisał">
                                <AntDesign.Input @bind-Value="zlecenie.KtoZapisal" />
                            </AntDesign.FormItem>
                        </AntDesign.Col>
                    </AntDesign.Row>
                    <AntDesign.Row Gutter="16">
                        <AntDesign.Col Span="12">
                            <AntDesign.FormItem Label="Ostatnia Zmiana">
                                <AntDesign.Input @bind-Value="zlecenie.OstatniaZmiana" />
                            </AntDesign.FormItem>
                        </AntDesign.Col>
                        <AntDesign.Col Span="12">
                            <AntDesign.FormItem Label="Zapisano: ">@pliki.Count().ToString()</AntDesign.FormItem>
                            @if (cid != -1)
                            {
                                <InputFile OnChange="HandleSelected" multiple>Wybierz pliki powiązane ze zleceniem</InputFile>
                            }
                        </AntDesign.Col>
                    </AntDesign.Row>
                    <AntDesign.Row>
                        <AntDesign.Col Span="24" class="d-flex justify-content-end">
                            @if(!blokuDwuKlik)
                            {
                            <AntDesign.Button Type="primary" @onclick="@HandleAddNew" HtmlType="submit">Zapisz</AntDesign.Button>
                            }
                            <AntDesign.Button @onclick="@HandleCancel">Anuluj</AntDesign.Button>
                        </AntDesign.Col>
                    </AntDesign.Row>
                </AntDesign.Form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade @classShowFile" tabindex="-1" style="display: @displayFile;">
    <div class="modal-dialog" style="max-width: 90%;">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Ilość plików powiązanych: @pliki.Count()</h5>
            </div>
            <div class="modal-body">
                <Table TItem="PlikiZlecenProdukcyjnych" DataSource="@pliki">
                    <Column Title="ID" @bind-Field="@context.Id" Hidden />
                    <Column Title="Nazwa pliku" @bind-Field="@context.NazwaPliku" Sortable OnFilter="(a, b) => a == b" Filterable />
                    <Column Title="Oryginalna nazwa pliku" @bind-Field="@context.OryginalnaNazwaPliku" Sortable OnFilter="(a, b) => a == b" Filterable />
                    <Column Title="Typ" @bind-Field="@context.TypPliku" Sortable OnFilter="(a, b) => a == b" Filterable />
                    <Column Title="Data Zapisu" @bind-Field="@context.DataZapisu" Sortable OnFilter="(a, b) => a == b" Filterable />
                    <ActionColumn Title="Uwagi / Akcja">
                        <Template>
                            @{
                                // <a style="color:blue" @onclick="() => ZmienUwage(context)">@context.Uwagi &nbsp;</a><br/>
                                <Input Placeholder="Podaj uwagę." @bind-Value="@context.Uwagi" MaxLength="45" OnBlur="@( () => ZmienUwage(context.Id, context.Uwagi))" />
                                var item = context as PlikiZlecenProdukcyjnych;
                                if (!string.IsNullOrEmpty(item.NazwaPliku))
                                {
                                    <a href="uploads_zlecenia/@item.NazwaPliku" download @onclick="@( () => DownloadFile(item.NazwaPliku) )">Pobierz plik</a>
                                }
                            }
                        </Template>
                    </ActionColumn>
                </Table>
            </div>
            <div class="modal-footer d-flex">
                <Button class="ms-auto" @onclick="() => HideDialogFile()">Zakończ</Button>
            </div>
        </div>
    </div>
</div>

    <div class="modal fade @classShowPass" tabindex="-1" style="display: @displayPass;margin: auto; top: 50%; left: 50%; transform: translate(-50%, -50%); position: absolute; width: 25%;">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Aby usunąć zlecenie musisz podać hasło</h5>
            </div>
            <div class="modal-body">

                <Input Placeholder="Podaj hasło!!!" @bind-Value="@classPass" MaxLength="25" />

            </div>
            <div class="modal-footer d-flex">
                <Button class="ms-auto" @onclick="() => HideDialogPass()">OK</Button>
            </div>
        </div>
    </div>
</div>

@code {

    [Inject]
    private NavigationManager? navigationManager { get; set; }

    private List<ZleceniaProdukcyjne>? zleceniaProdukcyjne;
    private List<ZleceniaProdukcyjne>? originalzleceniaProdukcyjne;

    private List<PlikiZlecenProdukcyjnych> pliki = new List<PlikiZlecenProdukcyjnych>();

    List<TypZamowienia>? _TypZamowienia;

    private bool _visible = false;
    private string display = "none;";
    private string classShow = "";

    IEnumerable<PlikiZlecenProdukcyjnych> _selectedRows = [];

    private string displayFile = "none;";
    private string classShowFile = "";

    private string displayPass = "none;";
    private string classShowPass = "";
    private string classPass = "";
    private long id_del = -1;

    private long cid = -1;

    private ZleceniaProdukcyjne zlecenie = new ZleceniaProdukcyjne();

    protected override async Task OnInitializedAsync()
    {

        try
        {
            _TypZamowienia = new List<TypZamowienia>
            {
                new TypZamowienia {Value = "Pomiary", Name = "Pomiary", Role = "Oferta"},
                new TypZamowienia {Value = "Oferta", Name = "Oferta", Role = "Oferta"},
                new TypZamowienia {Value = "Zlec.Pomiarów", Name = "Zlec.Pomiarów", Role = "Oferta"},
                new TypZamowienia {Value = "Zlecenie", Name = "Zlecenie", Role = "Zamówienie"},
                new TypZamowienia {Value = "Dok.Powykonawczy", Name = "Dok.Powykonawczy", Role = "Zamówienie"},
                new TypZamowienia {Value = "Zakończono", Name = "Zakończono", Role = "Zamówienie"}
            };

            zleceniaProdukcyjne = await Http.GetFromJsonAsync<List<ZleceniaProdukcyjne>>("api/ZleceniaProdukcyjne");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Wystąpił błąd podczas pobierania pliku: {ex.Message}/ {ex.StackTrace}");
            zleceniaProdukcyjne = new List<ZleceniaProdukcyjne>();
        }
    }

    private async Task LoadFiles(string rowId)
    {
        var response = await Http.GetAsync($"api/FileUploadZlec/files/{rowId}");
        if (response.IsSuccessStatusCode)
        {
            pliki = await response.Content.ReadFromJsonAsync<List<PlikiZlecenProdukcyjnych>>();

            if (pliki != null)
            {
                foreach (var itm in pliki)
                {
                    if (string.IsNullOrEmpty(itm.Uwagi))
                    {
                        itm.Uwagi = "";
                    }
                }
            }

        }
        else
        {
            // Obsłuż błąd
        }
    }

    private void DodajKantowke(ZleceniaProdukcyjne row)
    {
        navigationManager.NavigateTo($"/Kantowka-do-zlecen/{row.RowId}");
    }

    private async Task DownloadFile(string fileUrl)
    {
        var filePath = Path.Combine("uploads_zlecenia", fileUrl); // Tworzy ścieżkę do pliku w folderze uploads

        try
        {
            using (var httpClient = new HttpClient())
            {
                // Ustaw odpowiedni timeout dla dużych plików
                httpClient.Timeout = TimeSpan.FromMinutes(10);

                using (var response = await httpClient.GetAsync(fileUrl, HttpCompletionOption.ResponseHeadersRead))
                {
                    if (response.IsSuccessStatusCode)
                    {
                        using (var contentStream = await response.Content.ReadAsStreamAsync())
                        {
                            using (var fileStream = new FileStream(filePath, FileMode.Create, FileAccess.Write, FileShare.None, 8192, true))
                            {
                                await contentStream.CopyToAsync(fileStream);
                            }
                        }

                        Console.WriteLine($"Plik został pobrany i zapisany: {filePath}");
                    }
                    else
                    {
                        Console.WriteLine("Nie udało się pobrać pliku.");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Wystąpił błąd podczas pobierania pliku: {ex.Message}/ {ex.StackTrace}");
            Console.WriteLine(filePath);
        }
    }

    private async Task FileEdit(ZleceniaProdukcyjne row)
    {
        pliki = new List<PlikiZlecenProdukcyjnych>();

        zlecenie = new ZleceniaProdukcyjne();

        if (zleceniaProdukcyjne == null) return;

        var listOfData = zleceniaProdukcyjne.Where(d => d.Id == row.Id).ToArray();

        // Pobierz zlecenie na podstawie indeksu wiersza
        if (listOfData != null && listOfData.Count() > 0)
        {
            zlecenie = listOfData[0];

            await LoadFiles(zlecenie.RowId);

            await ShowDialogFile();
        }

    }

    bool blokuDwuKlik = false;

    private async Task HandleSubmit()
    {

        if (_visible == false || blokuDwuKlik) return;

        blokuDwuKlik = true;

        HttpResponseMessage response;

        _visible = false;

        if (zlecenie.Id == 0)
        {
            response = await Http.PostAsJsonAsync("api/ZleceniaProdukcyjne", zlecenie);

            zleceniaProdukcyjne = await Http.GetFromJsonAsync<List<ZleceniaProdukcyjne>>("api/ZleceniaProdukcyjne");
        }
        else
        {
            response = await Http.PutAsJsonAsync($"api/ZleceniaProdukcyjne/{zlecenie.Id}", zlecenie);

            if (zleceniaProdukcyjne != null) originalzleceniaProdukcyjne = zleceniaProdukcyjne.DeepCopyList();
        }

        if (response.IsSuccessStatusCode)
        {
            if (zlecenie.Id == 0)
            {
              //  zleceniaProdukcyjne.Add(zlecenie); // Dodaj nowe zlecenie do listy
            }
            else
            {
                // Znajdź istniejące zlecenie i zaktualizuj je
                var index = zleceniaProdukcyjne.FindIndex(z => z.Id == zlecenie.Id);

                if (index != -1)
                {
                    zleceniaProdukcyjne[index] = zlecenie;
                }
            }

            _visible = false;
            zlecenie = new ZleceniaProdukcyjne(); // Zresetuj formularz

            await HideDialog();

            await _message.Success("Zlecenie zapisano!");

            StateHasChanged(); // Odśwież widok

        }
        else
        {
            // Obsługa błędów
            Console.WriteLine("Błąd podczas zapisywania zlecenia");
            await _message.Error("Błąd podczas zapisywania zlecenia");
        }

        blokuDwuKlik = false;

    }

    public async Task editRow(long id)
    {

        //listOfData = listOfData.Where(d => d.Id != id).ToArray();
        if (zleceniaProdukcyjne == null) return;

        _visible = true;

        originalzleceniaProdukcyjne = zleceniaProdukcyjne.DeepCopyList();

            zlecenie = new ZleceniaProdukcyjne();

            var  listOfData = zleceniaProdukcyjne.Where(d => d.Id == id).ToArray();

            // Pobierz zlecenie na podstawie indeksu wiersza
            if (listOfData != null && listOfData.Count() > 0 )
            {
                cid = id;

                zlecenie = listOfData[0];

                zlecenie.OstatniaZmiana = "*Zmiana: " + DateTime.Now.ToLongDateString();

                if (string.IsNullOrEmpty(zlecenie.RowId)) zlecenie.RowId = Guid.NewGuid().ToString();

                await LoadFiles(zlecenie.RowId);

                _visible = true;

                await ShowDialog();
            }

            // Wyświetl numer zamówienia w konsoli
            Console.WriteLine(zlecenie.NumerZamowienia);

    }

    private async Task delRow()
    {
        if (classPass != "admin1")
        {
            await _message.Error("Błędne hasło");
            return;
        }

        var response = await Http.DeleteAsync($"api/ZleceniaProdukcyjne/{id_del}");
        if (response.IsSuccessStatusCode)
        {
            var zlecenie = zleceniaProdukcyjne.FirstOrDefault(z => z.Id == id_del);
            if (zlecenie != null)
            {
                zleceniaProdukcyjne.Remove(zlecenie);
                await _message.Success("Zlecenie usunięto!");
            }
        }
        else
        {
            Console.WriteLine("Błąd podczas usuwania zlecenia.");
            await _message.Error("Błąd podczas usuwania zlecenia");
        }

        id_del = -1;
        classPass = "";
    }

    public async Task HandleAddNew()
    {
        // await Task.Delay(1);
        // _visible = true;

        await HandleSubmit();
        // await HandleSubmit();
        // _visible = false;
       // await HideDialog();
    }

    public async Task HandleCancel()
    {
        _visible = false;
        await HideDialog();
    }

    public async Task HandleCloseAdd()
    {
        await HideDialog();
        await HandleSubmit();
        _visible = false;
    }

    public async Task ShowDialogAddNew()
    {
        _visible = true;
        zlecenie = new ZleceniaProdukcyjne();
        cid = -1;

        display = "block";
        await Task.Delay(50);
        classShow = "show";
        StateHasChanged();
    }

    public async Task ShowDialog()
    {
        display = "block";
        await Task.Delay(50);
        classShow = "show";
        StateHasChanged();
    }

    private async Task HideDialog()
    {
        if (cid >0 && zleceniaProdukcyjne != null)
        {
            zleceniaProdukcyjne = originalzleceniaProdukcyjne;
        }

        cid = -1;

        classShow = "";
        await Task.Delay(200);
        display = "none";

        StateHasChanged();
    }
    //********************************************************************************************************************//
    public async Task ShowDialogFile()
    {
        displayFile = "block";
        await Task.Delay(50);
        classShowFile = "show";
        StateHasChanged();
    }

    private async Task HideDialogFile()
    {

        classShowFile = "";
        await Task.Delay(200);
        displayFile = "none";

        StateHasChanged();
    }
    //********************************************************************************************************************//
    public async Task ShowDialogPass(long id)
    {
        id_del = id;
        displayPass = "block";
        await Task.Delay(50);
        classShowPass = "show";
        StateHasChanged();

    }

    private async Task HideDialogPass()
    {

        classShowPass = "";
        await Task.Delay(200);
        displayPass = "none";

        StateHasChanged();

       await delRow();
    }

    private async Task ZmienUwage(long id, string uwaga)
    {
        var response = await Http.PostAsJsonAsync($"api/FileUploadZlec/zmien-uwage?id={id}", uwaga);
        if (response.IsSuccessStatusCode)
        {
            // Logika do aktualizacji UI, jeśli potrzebne
            var plik = pliki.FirstOrDefault(p => p.Id == id);
            if (plik != null)
            {
                plik.Uwagi = uwaga;
                plik.OstatniaZmiana = "Zmiana: " + DateTime.Now.ToLongDateString();
            }
        }
        else
        {
            // Logika do obsługi błędów
            Console.WriteLine("Błąd podczas zmiany uwagi");
        }
    }

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {

        //NazwaRejestru = WebUtility.UrlEncode(NazwaRejestru);

        foreach (var file in e.GetMultipleFiles())
        {
            var content = new MultipartFormDataContent();

            var tmpFileName = WebUtility.UrlEncode(file.Name);

            Console.WriteLine($"api/FileUploadZlec/upload/{zlecenie.RowId}/{tmpFileName}");

            content.Add(new StreamContent(file.OpenReadStream(Int64.MaxValue)), "file", file.Name);

            var response = await Http.PostAsync($"api/FileUploadZlec/upload/{zlecenie.RowId}/{tmpFileName}", content);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseModel>();
                Console.WriteLine($"File uploaded successfully. URL: {result?.url}");
                //Dodaj akjcę zapisu do bazy danych
                //zleceniaProdukcyjne.LinkDoKartyNaSerwerze = result?.url;
            }
            else
            {
                Console.WriteLine("File upload failed.");
            }
        }
    }


    public class ResponseModel
    {
        public string? name { get; set; }
        public string? status { get; set; }
        public string? url { get; set; }
        public string? thumbUrl { get; set; }
    }

    class TypZamowienia
    {
        public string? Value { get; set; }
        public string? Name { get; set; }
        public string? Role { get; set; }
    }

}
