@page "/KompletacjaOkuc/{RowId?}"
@using GEORGE.Shared.Models
@using GEORGE.Shared.ViewModels
@using GEORGE.Shared.Class
@inject HttpClient Http
@using AntDesign
@using System.Net
@using System.ComponentModel
@using AntDesign.TableModels
@inject IMessageService _message
@inject Utilities.ILocalStorage LocalStorage
@inject IJSRuntime JSRuntime
@inject INotificationService _notice
@using AntDesign.TableModels

<style>
    #calosc {
        background-color: #1a1a1a;
        border: 1px dashed red;
        font-size: 1.2em; /* Zmniejszenie rozmiaru czcionki dla mniejszych kontenerów */
        display: flex;
        flex-wrap: wrap;
        justify-content: space-around;
        padding: 1px; /* Mniejsze paddingi */
        color: white; /* Biały tekst dla lepszej widoczności */
        border-radius: 5px; /* Zaokrąglone rogi */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5); /* Lekki cień dla głębi */
        height: 5vh; /* Wysokość 5% wysokości okna przeglądarki */
        min-height: 50px; /* Minimalna wysokość dla zapewnienia miejsca na treść */
    }

    #kol1, #kol2 {
        flex: 1 1 25%; /* Kolumny mają elastyczną szerokość i zajmują 45% */
        margin: 5px; /* Mniejszy margines dla kolumn */
        padding: 1px; /* Mniejszy padding */
        border-radius: 3px; /* Zaokrąglone rogi dla kolumn */
        text-align: center; /* Centrowanie tekstu */
    }

    #kol1 {
        background-color: #3e8eec; /* Mocniejszy, bardziej kontrastujący niebieski */
        color: white; /* Biały tekst dla lepszej widoczności */
    }

    #kol2 {
        background-color: black; /* Mocniejszy zielony dla lepszego kontrastu */
        color: white;
    }

    h2, h3 {
        margin: 5px 0; /* Mniejsze marginesy dla nagłówków */
        font-size: 1em; /* Zmniejszenie rozmiaru tekstu w nagłówkach */
    }

    /* Stylowanie przycisku dla lepszego wyglądu */
    .btn-back {
        background-color: #ff4d4d; /* Czerwony kolor przycisku */
        color: white;
        font-weight: bold;
        border-radius: 2px; /* Zaokrąglone rogi */
        border: none; /* Bez ramki */
        transition: background-color 0.3s ease; /* Animacja przejścia koloru */
        padding: 5px 10px; /* Zmniejszenie paddingu dla lepszej czytelności */
        font-size: 0.9em; /* Zmniejszenie rozmiaru czcionki */
    }

        /* Efekt hover dla przycisku */
        .btn-back:hover {
            background-color: #e63939; /* Ciemniejszy czerwony na hover */
            color: #ffffff;
        }
</style>


@if (wzorzecSzczegoly == null && !brakDanych)
{
    <Spin size="large" >
        <div id="calosc">
            <div id="kol1">
                <h3>Wybierz wzorzec kompletacji</h3>
            </div>
            <div id="kol2">
           
                <p style="margin-left:40%"><em>Czekaj na załadowanie danych...</em></p>
            </div>

        </div>
    </Spin>
}
else if (brakDanych)
{
    <h3>Wybierz wzorzec kompletacji</h3>
    <Divider>Informacja: brak zleceń</Divider>
    <div id="calosc">
        <div id="kol1">
            <h2>Nie znaleziono zamówień do wybranego klienta</h2>
        </div>
        <div id="kol2">
            <Tooltip Placement="@Placement.TopRight" Title="Wróć do poprzedniej strony" Style="width:100%">
                <Button class="btn-back" Icon="@IconType.Fill.Backward" Style="width:100%" OnClick="GoBack">Wróć do poprzedniej strony</Button>
            </Tooltip>
        </div>
    </div>
}
else
{
    <div id="calosc">
        <div id="kol1">
            @if (wzorzecSzczegoly.Count() > 0)
            {
                <h6>@wzorzecSzczegoly[0].NazwaWzorca</h6>
            }
            else
            {
                <h3>Wybierz wzorzec kompletacji</h3>
            }
        </div>
        <div id="kol2">
            <Tooltip Placement="@Placement.TopRight" Style="width:100%" Title="Wróć do poprzedniej strony">
                <Button class="btn-back" Style="width:100%" Icon="@IconType.Fill.Backward" OnClick="GoBack">Wróć do poprzedniej strony</Button>
            </Tooltip>
        </div>
    </div>

    <div id="calosc">
        <div id="kol1">

            <Select TItem="WzorceKompletacji"
                    TItemValue="Guid?"
                    DataSource="@wzorzecSzczegolyDistinct"
                    @bind-Value="@_selectedValue"
                    LabelName="@nameof(WzorceKompletacji.NazwaWzorca)"
                    ValueName="@nameof(WzorceKompletacji.RowIdWzorca)"
                    Placeholder="Wybierz wzorzec"
                    OnSelectedItemChanged="OnSelectedItemChangedHandler"
                    AllowClear
                    EnableSearch>
            </Select>

        </div>
        <div id="kol2">
            <Tooltip Title="Podaj nazwę wzorca">
                <Button Shape="ButtonShape.Circle" Icon="@IconType.Outline.Plus" OnClick="HandleAdd"> Dodaj nowy wzorzec </Button>
            </Tooltip>
        </div>
    </div>

    <ul>

        <Table DataSource="@data" TItem="Data" OnExpand="OnRowExpand">
            <ColumnDefinitions>
                <PropertyColumn Property="c => c.NazwaWzorca" />
                <PropertyColumn Property="c => c.RowIdWzorca" Hidden />
                <ActionColumn Title="Akcje">
                    <CellRender Context="cellContext">
                        <!-- Zmieniona nazwa kontekstu -->
         
                        <Space Size="SpaceSize.Middle">
                            <SpaceItem>
                                <Popconfirm Title="@GetPopconfirmTitle(context.NazwaWzorca ?? "Brak nawy!!!")"
                                            OnConfirm="() => HandleUsunGrupp(context.RowIdWzorca.ToString())"
                                            OkText="Tak"
                                            CancelText="Nie">
                                    <a style="color:red; cursor:pointer;">Usuń Grupę</a>
                                </Popconfirm>
                            </SpaceItem>
                            <SpaceItem>
                                <a style="color:blue; cursor:pointer;"
                                   @onclick="() => ShowEditGruppModal(context)">
                                    Edytuj Grupę
                                </a>
                            </SpaceItem>
                        </Space>
                    </CellRender>
                </ActionColumn>
            </ColumnDefinitions>
            <ExpandTemplate Context="rowData">
                <Table DataSource="rowData.Data.NestedData" Loading="rowData.Data.NestedData == null" HidePagination>
                    <PropertyColumn Property="c => c.NazwaWzorca" Hidden />
                    <PropertyColumn Property="c => c.RowIdWzorca" Hidden />
                    <PropertyColumn Property="c => c.NazwaProduktu" />
                    <PropertyColumn Property="c => c.NumerKatalogowy" />
                    <PropertyColumn Property="c => c.Typ" />
                    <PropertyColumn Property="c => c.Ilosc" />
                    <ActionColumn Title="Akcje">
                        <CellRender Context="cellData">

                            <Space Size="SpaceSize.Middle">
                                <SpaceItem>
                                    <Popconfirm Title="@GetPopconfirmTitle(context.NazwaProduktu)"
                                                OnConfirm="() => HandleUsun(context.Id)"
                                                OkText="Tak"
                                                CancelText="Nie">
                                        <a style="color:red; cursor:pointer;">Usuń</a>
                                    </Popconfirm>
                                </SpaceItem>

                                <SpaceItem>
                                    <a style="color:blue; cursor:pointer;"
                                       @onclick="() => ShowEditModal(context)">
                                        Edytuj
                                    </a>
                                </SpaceItem>
                                <SpaceItem>
                                    <a style="color:blue; cursor:pointer;"
                                       @onclick="() => ShowDodajModal(context.RowIdWzorca, context.NazwaWzorca)">
                                        Dodaj
                                    </a>
                                </SpaceItem>
                            </Space>
                        </CellRender>
                    </ActionColumn>
                </Table>
            </ExpandTemplate>
        </Table>

    </ul>

    <Modal Title="@(_productAdd ? "Dodaj nowy wzorzec kompletacji" : "Zmień wzorzec kompletacji")"
              Visible="@_visible"
              OnOk="@HandleOk"
              OnCancel="@HandleCancel"
           Footer=@footer>
        <p>Podaj nazwę wzorca.</p>
        <TextArea ShowCount MaxLength=100 OnChange="onChange" @bind-Value="selName" />
        <p style="color:red">@infoDodaj</p>
        <p style="color:yellowgreen">GUID: @selValue</p>
    </Modal>

<Modal Title="@(_productAdd ? "Dodaj nowy produkt" : "Edytuj produkt")"
       Visible="@_visibleEdit"
       OnOk="@HandleEditOk"
       OnCancel="@HandleEditCancel">

    <p>Podaj nazwę wzorca.</p>
    <Input @bind-Value="_editowanyWzorzec.NazwaWzorca" ReadOnly />

     <p>Podaj nazwę produktu.</p>
     <Input @bind-Value="_editowanyWzorzec.NazwaProduktu" />

    <p>Numer Katalogowy.</p>
    <Input @bind-Value="_editowanyWzorzec.NumerKatalogowy" />

    <p>Podaj ilość.</p>
        <Input Type="InputType.Number" @bind-Value="_editowanyWzorzec.Ilosc" />

    <p>Podaj jednostkę.</p>
    <Input @bind-Value="_editowanyWzorzec.Jednostka" />

        <p>Typ</p>
        <Input @bind-Value="_editowanyWzorzec.Typ" />

    <p style="color:red">@infoEdit</p>
        <p style="color:yellowgreen">GUID: @_editowanyWzorzec.RowIdWzorca</p>
</Modal>


}

@code {

    [Inject] private AppState AppState { get; set; } = default!;

    [Parameter]
    public string? RowId { get; set; } // Parametr z URL

    private Table<WzorceKompletacji>? table; // Referencja do tabeli
                                                          // private List<RowData<ElemetZamDoZlecenWithProducent>> expandedGroups = new(); // Lista rozwiniętych wierszy

    private List<WzorceKompletacji>? wzorzecSzczegoly;

    private List<WzorceKompletacji>? wzorzecSzczegolyDistinct;

    private List<WzorceKompletacji> wzorzecSzczegolyAll = new();

    private WzorceKompletacji? edytowanyWzorzec;

    private Guid? _selectedValue;
    private string? _selectedName = "";
    private Guid selValue;// do zmiany nazwy grupy zapamiętuje RowId
    private string selName = "";// do zmiany nazwy grupy zapamiętuje Nazwę

    private string? infoDodaj = "";

    private bool brakDanych = false;

    bool _visible = false;
    bool _loading = false;

    private bool _visibleEdit;
    private WzorceKompletacji _editowanyWzorzec = new();
    private string infoEdit = string.Empty;

    private bool _isExpand = false;

    private bool _productAdd = false;

    IEnumerable<WzorceKompletacji> _selectedRows = [];

    Data[] data;

    protected override async Task OnInitializedAsync()
    {
        if (AppState != null)
        {
            AppState.SomeData = "";
        }

        await Laduj_Uprawnienia();

        try
        {
            var response = await Http.GetAsync($"api/WzorceKompletacji");

            if (response.IsSuccessStatusCode) // Sprawdź, czy odpowiedź jest poprawna (status 2xx)
            {
                wzorzecSzczegoly = await response.Content.ReadFromJsonAsync<List<WzorceKompletacji>>();

                wzorzecSzczegolyAll = wzorzecSzczegoly ?? new();

                if (wzorzecSzczegoly != null)
                {
                    wzorzecSzczegolyDistinct = wzorzecSzczegoly
                        .GroupBy(wz => wz.RowIdWzorca)
                        .Select(g =>
                        {
                            var parent = g.First();

                            var newParent = new WzorceKompletacji
                            {
                                // Copy all properties from parent
                                Id = parent.Id,
                                RowId = parent.RowId,
                                NazwaWzorca = parent.NazwaWzorca,
                                RowIdWzorca = parent.RowIdWzorca,
                                // ... copy all other properties ...

                                // Now set the NestedData
                                NestedData = g.Select(item => new NestedData
                                {
                                    Id = item.Id, // or another unique key, note: casting long to int might cause overflow
                                    DataZapisu = item.DataZapisu,
                                    NazwaProduktu = item.NazwaProduktu ?? string.Empty,
                                    RowIdWzorca = item.RowIdWzorca,
                                    NazwaWzorca = item.NazwaWzorca ?? string.Empty,
                                    NumerKatalogowy = item.NumerKatalogowy ?? string.Empty,
                                    Typ = item.Typ ?? string.Empty,
                                    Jednostka = item.Jednostka ?? string.Empty,
                                    Dlugosc = item.Dlugosc,
                                    Ilosc = item.Ilosc
                                }).ToArray()
                            };
                            return newParent;
                        })
                        .ToList();

                    data = wzorzecSzczegolyDistinct.Select(wz => new Data 
                    {
                        NazwaWzorca = wz.NazwaWzorca,
                        RowIdWzorca = wz.RowIdWzorca.Value,
                        NestedData = wz.NestedData
                    }).ToArray();
                }

                Console.WriteLine($"******* Załadowano DISTINCT wzorców: {wzorzecSzczegolyDistinct.Count()}");

            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound) // Obsłuż błąd 404
            {
                Console.WriteLine("******* Błąd: Brak danych dla podanego wzorca");
                // Możesz tu dodać logikę, np. ustawienie zmiennej dla wyświetlenia komunikatu o braku danych
                brakDanych = true; // Przykład flagi, aby wyświetlić komunikat w UI
            }
            else
            {
                Console.WriteLine($"******* Inny błąd: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"******* Ogólny błąd: {ex.Message}");
        }

    }

    private RenderFragment footer => @<div>
        <Button OnClick="@HandleOk"
                Type="ButtonType.Primary"
                Loading="@_loading">
        @(!_productAdd ? "Zmień nazwę wzorca" : "Dodaj nowy wzorzec")
        </Button>
        <Button OnClick="@HandleCancel">Anuluj</Button>
    </div>
    ;

    private void onChange(string value)
    {
        Console.WriteLine("onChange =>" + value);

        _selectedName = value;
        _selectedValue = Guid.NewGuid();
    }

    async Task OnRowExpand(RowData<Data> rowData)
    {
        Console.WriteLine("Start funkcji OnRowExpand.");

        try
        {
            if (rowData?.Data == null)
            {
                Console.WriteLine("Błąd: brak danych w wierszu.");
                return;
            }

            var xselG = rowData.Data.RowIdWzorca;
            var xselName = rowData.Data.NazwaWzorca;

            var matches = wzorzecSzczegolyAll
            .Where(x => x.RowIdWzorca == xselG)
            .ToList();

            Console.WriteLine($"Znaleziono {matches.Count} szczegółów dla RowIdWzorca={xselG}");

            rowData.Data.NestedData = matches
                .Select(item => new NestedData
                {
                    Id = item.Id,
                    DataZapisu = item.DataZapisu,
                    NazwaProduktu = item.NazwaProduktu ?? string.Empty,
                    NumerKatalogowy = item.NumerKatalogowy ?? string.Empty,
                    RowIdWzorca = xselG,
                    NazwaWzorca = xselName,
                    Ilosc = item.Ilosc
                })
                .ToArray();


            if (rowData.Data.NestedData != null)
            {
                Console.WriteLine("NestedData Już załadowane");
                return; // Już załadowane
            }

            await Task.Delay(20);

            selName = rowData.DataItem?.Data?.NazwaWzorca ?? "<brak nazwy>";
            selValue = rowData.Data.RowIdWzorca;

            Console.WriteLine($"1. Rozwijam wiersz dla wzorca: {selName} / {selValue}");

            if (rowData.Data.RowIdWzorca == null)
            {
                Console.WriteLine("Błąd: RowIdWzorca jest null – nie można powiązać danych.");
                return;
            }

            if (wzorzecSzczegolyAll == null)
            {
                Console.WriteLine("Błąd: lista wzorzecSzczegolyAll nie została zainicjalizowana.");
                return;
            }


            rowData.Data.NestedData = wzorzecSzczegolyAll
                .Where(x => x.RowIdWzorca == xselG)
                .Select(item => new NestedData
                {
                    Id = item.Id,
                    DataZapisu = item.DataZapisu,
                    NazwaProduktu = item.NazwaProduktu ?? string.Empty,
                    NumerKatalogowy = item.NumerKatalogowy ?? string.Empty,
                    RowIdWzorca = xselG,
                    NazwaWzorca = selName,
                    Ilosc = item.Ilosc
                })
                .ToArray();

            Console.WriteLine($"2. Rozwinąłem wiersz dla wzorca: {selName} / {xselG}");

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd w OnRowExpand: {ex.Message}");
            await _message.Error($"Nie udało się rozwinąć wiersza: {ex.Message}");
        }
    }


    private async Task HandleOk(MouseEventArgs e)
    {

        infoDodaj = "";

        selName = selName?.Trim();

        Console.WriteLine($"Rozpoaczyna akcję HandleOk --> _productAdd: {_productAdd}. selValue: {selValue} selName: {selName}");

        var exists = wzorzecSzczegolyAll
       .Where(w => w.NazwaWzorca == selName);

        if (exists != null && exists.Count() > 0)
        {
            Console.WriteLine ("Nazwa wzorca już istnieje.");
            infoDodaj = "Nazwa wzorca już istnieje.";
            return;
        }

        if (string.IsNullOrWhiteSpace(selName))
        {
            infoDodaj = "Nazwa wzorca jest wymagana.";
            return;
        }

        if (selValue == Guid.Empty)
        {
            infoDodaj = "RowId wzorca jest pusty.";
            return;
        }

        _loading = true;

        if (_productAdd)
        {
            edytowanyWzorzec = new WzorceKompletacji
            {
                RowIdWzorca = selValue,
                NazwaWzorca = selName,
                NumerKatalogowy = "Podaj numer katalogowy",
                NazwaProduktu = "Podaj nazwę produktu",
                Typ = "Podaj typ",
                Ilosc = 0,
                Jednostka = "szt.",
                Dlugosc = 0,
            };

            // wysyłka do API
            var response = await Http.PostAsJsonAsync("api/WzorceKompletacji", edytowanyWzorzec);

            if (response.IsSuccessStatusCode)
            {
                wzorzecSzczegoly?.Add(edytowanyWzorzec);

                wzorzecSzczegolyAll = wzorzecSzczegoly ?? new();

                wzorzecSzczegolyDistinct = wzorzecSzczegoly
                .GroupBy(wz => wz.NazwaWzorca) // grupujemy po nazwie
                .Select(g => g.First())        // bierzemy pierwszy rekord z każdej grupy
                .ToList();

                infoDodaj = "Nowy wzorzec dodany.";

                StateHasChanged();

                await Task.Delay(1100); // Krótkie opóźnienie, aby użytkownik zauważył komunikat

                await FetchUpdatedData();

                _visible = false;
            }
            else
            {
                // log albo komunikat użytkownikowi
                var msg = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Błąd: {msg}");
                infoDodaj = $"Błąd: {msg}";
            }
        }
        else
        {
            Console.WriteLine("Zmieniam nazwę wzorca: " + selName);

            Console.WriteLine("Zmieniam id wzorca: " + selValue.ToString());

            var request = new { NowaNazwaGrupy = selName };

            var response = await Http.PutAsJsonAsync(
            $"api/WzorceKompletacji/all/{selValue.ToString()}",
                request
            );

            if (response.IsSuccessStatusCode)
            {
                await FetchUpdatedData();

                infoDodaj = "Nazwa wzorca zmieniona.";

                StateHasChanged();

                await Task.Delay(1500); // Krótkie opóźnienie, aby użytkownik zauważył komunikat

                _visible = false;

            }
            else
            {
                var msg = await response.Content.ReadAsStringAsync();
                if (string.IsNullOrWhiteSpace(msg))
                {
                    msg = $"Kod błędu: {(int)response.StatusCode} ({response.ReasonPhrase})";
                }
                infoDodaj = $"Błąd: {msg}";

            }
        }

        _loading = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        _visible = false;
    }

    private async Task HandleAdd(MouseEventArgs e)
    {
        infoDodaj = "";

        _productAdd = true;

        selName = "";
        selValue = Guid.NewGuid();
        _visible = true;

        await Task.CompletedTask;
    }

    private async Task OnSelectedItemChangedHandler(WzorceKompletacji value)
    {
        if (value == null) // kliknięto "x" (AllowClear)
        {
            wzorzecSzczegoly = wzorzecSzczegolyAll.ToList();
            Console.WriteLine("Filtr wyczyszczony – przywrócono pełną listę");
        }
        else
        {
            Console.WriteLine($"selected RowIdWzorca: {value.RowIdWzorca}");
            wzorzecSzczegoly = wzorzecSzczegolyAll
                .Where(wz => wz.RowIdWzorca == value.RowIdWzorca)
                .ToList();
        }

        await InvokeAsync(StateHasChanged);
    }

    private void ShowEditGruppModal(Data element)
    {

        Console.WriteLine("ShowEditGruppModal => RowIdWzorca =>" + element.RowIdWzorca);

        if (!boolZmiana && boolAdmin)
        {
            _ = _notice.Info(new()
            {
                Message = "Nie posiadasz uprawnień do EDYCJI danych.",
                Description = "Uwaga!!!",
                Placement = NotificationPlacement.BottomLeft
            });
            return;
        }
        _productAdd = false;

        infoDodaj = "";

        _ = _notice.Info(new()
        {
            Message = "Zmieniam nazwę całej grupy.",
            Description = $"Uwaga!!! RowIdWzorca: {element.RowIdWzorca}",
            Placement = NotificationPlacement.BottomLeft
        });

        selName = element.NazwaWzorca;
        selValue = element.RowIdWzorca;

        _visible = true;
    }


    private void ShowEditModal(NestedData data)
    {
        if (!boolZmiana && boolAdmin)
        {
            _ = _notice.Info(new()
            {
                Message = "Nie posiadasz uprawnień do EDYCJI danych.",
                Description = "Uwaga!!!",
                Placement = NotificationPlacement.BottomLeft
            });
            return;
        }

        _productAdd = false;

        selValue = data.RowIdWzorca ?? Guid.Empty;
        selName = data.NazwaWzorca ?? "BRAK DANYCH!!!!";

        Console.WriteLine("ShowEditModal ==> RowIdWzorca =>" + data.RowIdWzorca + " NazwaWzorca: =>" + data.NazwaWzorca);

        _editowanyWzorzec = new WzorceKompletacji
    {
            Id = data.Id,
            RowIdWzorca = data.RowIdWzorca,
            NazwaWzorca = data.NazwaWzorca,
            NazwaProduktu = data.NazwaProduktu,
            NumerKatalogowy = data.NumerKatalogowy,
            Typ = data.Typ,
            Ilosc = data.Ilosc,
            Jednostka = data.Jednostka,
            Dlugosc = data.Dlugosc,
            DataZapisu = data.DataZapisu,
            RowId = data.RowId,
            Kolor = data.Kolor,
            Uwagi = data.Uwagi,
            CenaNetto = data.CenaNetto
    };

        _visibleEdit = true;
    }

    private void ShowDodajModal(Guid? rowIdWzorca, string nawaWzorca)
    {
        if (!boolZmiana && boolAdmin)
        {
            _ = _notice.Info(new()
            {
                Message = "Nie posiadasz uprawnień do EDYCJI danych.",
                Description = "Uwaga!!!",
                Placement = NotificationPlacement.BottomLeft
            });
            return;
        }

        if (rowIdWzorca == Guid.Empty)
        {
            _ = _notice.Error(new()
            {
                Message = $"Nie udało się pobrać ID dla wiersza: {nawaWzorca}",
                Description = "Błąd danych",
                Placement = NotificationPlacement.BottomRight
            });
            return;
        }

        _editowanyWzorzec.RowIdWzorca = rowIdWzorca;

        _editowanyWzorzec.NazwaWzorca = nawaWzorca;

        selName = nawaWzorca;
        selValue = rowIdWzorca ?? Guid.Empty;

        _visibleEdit = true;
        _productAdd = true;
    }

    private async Task HandleEditOk()
    {
        Console.WriteLine($"Rozpoczynam akcję --> HandleEditOk _productAdd:{_productAdd}");

        if (string.IsNullOrWhiteSpace(_editowanyWzorzec.NazwaWzorca))
        {
            infoEdit = "Nazwa wzorca jest wymagana!";
            return;
        }

        if (!_editowanyWzorzec.RowIdWzorca.HasValue || _editowanyWzorzec.RowIdWzorca == Guid.Empty)
        {
            infoEdit = "Row Id produktu jest wymagany!";
            return;
        }

        if (_productAdd)
        {
            Console.WriteLine("Dodaję nowy produkt do wzorca: " + _editowanyWzorzec.NazwaWzorca + " / " + _editowanyWzorzec.RowIdWzorca);

            // upewnij się, że NestedData nie jest null (jeśli serwer tego wymaga)
           // _editowanyWzorzec.NestedData ??= Array.Empty<NestedData>();

            _editowanyWzorzec.Id = 0;

            // debug: pokaż co wysyłasz
            Console.WriteLine("Wysyłany JSON: " + System.Text.Json.JsonSerializer.Serialize(_editowanyWzorzec));

            // WYŚLIJ poprawny obiekt (z podłogą)
            var response = await Http.PostAsJsonAsync("api/WzorceKompletacji", _editowanyWzorzec);

            if (response.IsSuccessStatusCode)
            {
                // dodajemy wysłany obiekt do listy (używaj tej samej instancji)
                await FetchUpdatedData();

                infoDodaj = "Nowy wzorzec dodany.";
                await Task.Delay(1200);
                _visibleEdit = false;
                _productAdd = false;
            }
            else
            {
                var msg = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Błąd: {msg}");
                infoDodaj = $"Błąd: {msg}";
                infoEdit = $"Błąd: {msg}";
            }
        }
        else
        {
         //  _editowanyWzorzec.NestedData ??= Array.Empty<NestedData>();

            var response = await Http.PutAsJsonAsync(
                $"api/WzorceKompletacji/{_editowanyWzorzec.Id}",
                _editowanyWzorzec);

            if (response.IsSuccessStatusCode)
            {
                selName = _editowanyWzorzec.NazwaWzorca;
                await _message.Success("Zmieniono dane wzorca", 1);
                _visibleEdit = false;
                _productAdd = false;
                await FetchUpdatedData();
            }
            else
            {
                var msg = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Błąd: {msg}");
                infoDodaj = $"Błąd: {msg}";
                infoEdit = $"Błąd: {msg}";
            }
        }
    }

    private void HandleEditCancel()
    {
        _visibleEdit = false;
        infoEdit = string.Empty;
    }

    private string GetPopconfirmTitle(string NazwaProduktu)
    {

        return $"Czy usunąć produkt lub grupę produktów: {NazwaProduktu} ?";
    }

    private async Task HandleUsunGrupp(string rowIdWzorca)
    {
        if (!boolZmiana && boolAdmin)
        {
            _ = _notice.Info(new()
            {
                Message = "Nie posiadasz uprawnień do USUNIĘCIA danych.",
                Description = "Uwaga!!!",
                Placement = NotificationPlacement.BottomLeft
            });
            return;
        }

        var response = await Http.DeleteAsync($"api/WzorceKompletacji/by-rowid/{rowIdWzorca}");

        if (response.IsSuccessStatusCode)
        {
            await _message.Success("Usunięto pozycję wzorca", 1);
            await FetchUpdatedData();
        }
        else
        {
            await _message.Error("Błąd podczas usuwania danych!");
        }
    }


    private async Task HandleUsun(long id)
    {
  
        if (!boolZmiana && boolAdmin)
        {
            _ = _notice.Info(new()
            {
                Message = "Nie posiadasz uprawnień do USUNIĘCIA danych.",
                Description = "Uwaga!!!",
                Placement = NotificationPlacement.BottomLeft
            });
            return;
        }

        var response = await Http.DeleteAsync($"api/WzorceKompletacji/{id.ToString()}");

        if (response.IsSuccessStatusCode)
        {
            await _message.Success("Usunięto pozycję wzorca", 1);
            await FetchUpdatedData();
        }
        else
        {
            await _message.Error("Błąd podczas usuwania danych!");
        }
    }

    private async Task HandleZmien(long id)
    {

        if (!boolZmiana && boolAdmin)
        {
            _ = _notice.Info(new()
            {
                Message = "Nie posiadasz uprawnień do ZMIANY danych.",
                Description = "Uwaga!!!",
                Placement = NotificationPlacement.BottomLeft
            });
            return;
        }

        var elementyDoWzorca = wzorzecSzczegoly?.FirstOrDefault(p => p.Id == id);

        var response = await Http.PutAsJsonAsync($"api/WzorceKompletacji/{elementyDoWzorca.Id}", elementyDoWzorca);

        if (response.IsSuccessStatusCode)
        {
            await _message.Success("Zmieniono dane wybranego wzorca", 1);
            await FetchUpdatedData();
        }
        else
        {
            await _message.Error("Nie udało się zmienić danych");
        }
    }


    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    private async Task FetchUpdatedData()
    {
        var response = await Http.GetAsync($"api/WzorceKompletacji");

        if (response.IsSuccessStatusCode) // Sprawdź, czy odpowiedź jest poprawna (status 2xx)
        {
            wzorzecSzczegoly = await response.Content.ReadFromJsonAsync<List<WzorceKompletacji>>();

            wzorzecSzczegolyAll = wzorzecSzczegoly ?? new();

            if (wzorzecSzczegoly != null)
            {
                wzorzecSzczegolyDistinct = wzorzecSzczegoly
                    .GroupBy(wz => wz.RowIdWzorca)
                    .Select(g =>
                    {
                        var parent = g.First();

                        var newParent = new WzorceKompletacji
                        {
                            // Copy all properties from parent
                            Id = parent.Id,
                            RowId = parent.RowId,
                            NazwaWzorca = parent.NazwaWzorca,
                            RowIdWzorca = parent.RowIdWzorca,
                            // ... copy all other properties ...

                            // Now set the NestedData
                            NestedData = g.Select(item => new NestedData
                            {
                                Id = item.Id, // or another unique key, note: casting long to int might cause overflow
                                DataZapisu = item.DataZapisu,
                                NazwaProduktu = item.NazwaProduktu ?? string.Empty,
                                RowIdWzorca = item.RowIdWzorca,
                                NazwaWzorca = item.NazwaWzorca ?? string.Empty,
                                NumerKatalogowy = item.NumerKatalogowy ?? string.Empty,
                                Typ = item.Typ ?? string.Empty,
                                Jednostka = item.Jednostka ?? string.Empty,
                                Dlugosc = item.Dlugosc,
                                Ilosc = item.Ilosc
                            }).ToArray()
                        };
                        return newParent;
                    })
                    .ToList();

                data = wzorzecSzczegolyDistinct.Select(wz => new Data
                {
                    NazwaWzorca = wz.NazwaWzorca,
                    RowIdWzorca = wz.RowIdWzorca.Value,
                    NestedData = wz.NestedData
                }).ToArray();
            }
        }
    }

    private bool boolOdczyt = false;
    private bool boolZmiana = false;
    private bool boolUsuniecia = false;
    private bool boolAdmin = false;
    private string RowIdPracownika = "";
    private string? user;
    private List<UprawnieniaPracownikaViewModel>? uprawnienia;

    private async Task Laduj_Uprawnienia()
    {
        user = await LocalStorage.GetStringAsync("user");

        if (string.IsNullOrEmpty(user))
        {
            //NavigationManager.NavigateTo($"", true);
            return;
        }

        string nazwaTabeli = "WzorceKompltacji";

        Console.WriteLine($"api/ZwrocSatus/{user}/{nazwaTabeli}");

        try
        {
            uprawnienia = await Http.GetFromJsonAsync<List<UprawnieniaPracownikaViewModel>>($"/api/ZwrocSatus/{user}/{nazwaTabeli}");
        }
        catch (System.Net.Http.HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            Console.WriteLine("Brak danych!!!");
            await _message.Error("Brak danych - status użytkownika - sprawdź dostęp!");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await _message.Error(ex.Message);
        }

        if (uprawnienia != null)
        {
            if (uprawnienia.Count > 0)
            {
                var znalezioneElementy = uprawnienia.Where(uprawnienie => uprawnienie.TableName == nazwaTabeli);
                Console.WriteLine("Znaleziono uprawnienia dla użytkownika: " + user + " w tabeli: " + nazwaTabeli + " ilość rekordów: " + znalezioneElementy.Count());
                if (znalezioneElementy.Any())
                {
                    var szuk = znalezioneElementy.FirstOrDefault(x => x.TableName == nazwaTabeli);
                    if (szuk != null)
                    {
                        boolOdczyt = szuk.Odczyt;
                        boolZmiana = szuk.Zmiana;
                        boolUsuniecia = szuk.Usuniecie;
                        boolAdmin = szuk.Administrator;
                        RowIdPracownika = szuk.RowId;
                    }
                }
            }
        }
    }

    public class Data
    {
        public string? NazwaWzorca { get; set; }
        public Guid RowIdWzorca { get; set; }

        public NestedData[] NestedData { get; set; }
    }

}
