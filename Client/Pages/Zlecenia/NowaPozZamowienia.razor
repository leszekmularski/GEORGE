@using GEORGE.Shared.Models
@using GEORGE.Shared.ViewModels
@inject HttpClient Http;
@using Microsoft.AspNetCore.Components.Web
@using System.Text
@inject Utilities.ILocalStorage LocalStorage
@inject NavigationManager NavigationManager
@using System.Text.Json;
@using System.Net;
@inject IJSRuntime JSRuntime
@inject INotificationService _notice

<style>
    .form-item-small-margin {
    margin-bottom: 8px; /* Możesz dostosować tę wartość */
    }
</style>

@if (!bAdmin)
{
    <p><em>Nie masz uprawnień....</em></p>
}
else
{
    <AntDesign.Form Model="@elementyZamowienia" Layout="FormLayout.Horizontal" OnFinish="@HandleSubmit">
        <Tabs DefaultActiveKey="0" @bind-ActiveKey="activeKey" TabPosition="TabPosition.Left" OnChange="OnTabClick">
            <TabPane Key="0" Tab="Pozycje zamówienia">
                <FormItem Required Label="Wybierz producenta (dostawcę)">
                    <Select Mode="default"
                    DataSource="@_producenci"
                    @bind-Value="@context.ElemetZamDoZlecen.RowIdProducent"
                    LabelName="@nameof(Producent.NazwaProducenta)"
                    ValueName="@nameof(Producent.RowId)">
                    </Select>
                </FormItem>
                
                <AntDesign.FormItem Label="Numer Katalogowy">
                    <AntDesign.Input @bind-Value="elementyZamowienia.ElemetZamDoZlecen.NumerKatalogowy" Placeholder="Podaj numer katalogowy producemnta" />
                </AntDesign.FormItem>
                <AntDesign.FormItem Label="Nazwa produktu">
                    <AntDesign.Input @bind-Value="elementyZamowienia.ElemetZamDoZlecen.NazwaProduktu" Required Placeholder="Podaj Nazwę produktu" />
                </AntDesign.FormItem>

                <AntDesign.FormItem Label="Jednostka">
                    @*   <AntDesign.Input @bind-Value="elementyZamowienia.ElemetZamDoZlecen.Jednostka" Placeholder="Podaj jednostkę (szt. kpl. litr, metr)" /> *@
                    <Select TItem="Item"  TItemValue="string"
                    DataSource="@_itemsJednostki"
                    @bind-Value="@elementyZamowienia.ElemetZamDoZlecen.Jednostka"
                    ValueName="@nameof(Item.Value)"
                    LabelName="@nameof(Item.Name)"
                    DefaultActiveFirstOption
                    Style="width: 200px;">
                        @*  <ItemTemplate>
                        <span>@((contextX as Item).DisplayName)</span>
                    </ItemTemplate> *@
                    </Select> 
                </AntDesign.FormItem>

                <AntDesign.FormItem Label="Kolor">
                    <AntDesign.Input @bind-Value="elementyZamowienia.ElemetZamDoZlecen.Kolor" Placeholder="Podaj kolor" />
                </AntDesign.FormItem>
                <AntDesign.FormItem Label="Ilość">
                    <AntDesign.InputNumber Step="0.01" @bind-Value="elementyZamowienia.ElemetZamDoZlecen.IloscSztuk" Required />
                </AntDesign.FormItem>
                <AntDesign.FormItem Label="Typ (Kod producenta)">
                    <AntDesign.Input @bind-Value="elementyZamowienia.ElemetZamDoZlecen.Typ" Placeholder="Podaj typ produktu" />
                </AntDesign.FormItem>
                <AntDesign.FormItem Label="Czy zamówiono">
                    <AntDesign.Checkbox @bind-Value="elementyZamowienia.ElemetZamDoZlecen.CzyZamowiono" />
                </AntDesign.FormItem>
                <AntDesign.FormItem Label="Czy dostarczono">
                    <Switch @bind-Value="@context.ElemetZamDoZlecen.PozDostarczono" />
                </AntDesign.FormItem>
                <AntDesign.FormItem Label="Dodaj uwagę sprawdzić!!!">
                    <Button OnClick="DodajUwSprawdz">Kliknij aby dodać Uwagę - Sprawdź!!!</Button>
                </AntDesign.FormItem>
            </TabPane>

            <!-- Kolumna 2 -->
            <TabPane Key="1" Tab="Daty w zamówienu">
                <AntDesign.FormItem Label="Data Zamówienia">
                    <DatePicker @bind-Value="elementyZamowienia.ElemetZamDoZlecen.DataZamowienia" />
                </AntDesign.FormItem>
                <AntDesign.FormItem Label="Data Realizacji">
                    <DatePicker @bind-Value="elementyZamowienia.ElemetZamDoZlecen.DataRealizacji" />
                </AntDesign.FormItem>
                <AntDesign.FormItem Label="Kto Zapisał">
                    <AntDesign.Input @bind-Value="elementyZamowienia.ElemetZamDoZlecen.KtoZapisal" Required ReadOnly />
                </AntDesign.FormItem>
                <AntDesign.FormItem Label="Data Dostarczenia">
                    <DatePicker @bind-Value="elementyZamowienia.ElemetZamDoZlecen.DataDostarczenia" />
                </AntDesign.FormItem>
                <AntDesign.FormItem Label="Ostatnia Zmiana">
                    <AntDesign.Input @bind-Value="elementyZamowienia.ElemetZamDoZlecen.OstatniaZmiana" ReadOnly />
                </AntDesign.FormItem>

            </TabPane>

            <TabPane Key="2" Tab="Jednostki">
                <AntDesign.FormItem Label="Długość">
                    <AntDesign.InputNumber @bind-Value="elementyZamowienia.ElemetZamDoZlecen.Dlugosc" />
                </AntDesign.FormItem>
                <AntDesign.FormItem Label="Szerokość">
                    <AntDesign.InputNumber @bind-Value="elementyZamowienia.ElemetZamDoZlecen.Szerokosc" />
                </AntDesign.FormItem>
                <AntDesign.FormItem Label="Wysokość">
                    <AntDesign.InputNumber @bind-Value="elementyZamowienia.ElemetZamDoZlecen.Wysokosc" />
                </AntDesign.FormItem>
                <AntDesign.FormItem Label="Waga">
                    <AntDesign.InputNumber @bind-Value="elementyZamowienia.ElemetZamDoZlecen.Waga " Placeholder="Podaj wagę" />
                </AntDesign.FormItem>
                <AntDesign.FormItem Label="Powierzchnia">
                    <AntDesign.InputNumber @bind-Value="elementyZamowienia.ElemetZamDoZlecen.Powierzchnia" Placeholder="Podaj powierzchnię" />
                </AntDesign.FormItem>
                <AntDesign.FormItem Label="Objętość">
                    <AntDesign.InputNumber @bind-Value="elementyZamowienia.ElemetZamDoZlecen.Objetosc" />
                </AntDesign.FormItem>
                <AntDesign.FormItem Label="Cena Netto">
                    <AntDesign.InputNumber @bind-Value="elementyZamowienia.ElemetZamDoZlecen.CenaNetto" />
                </AntDesign.FormItem>
            </TabPane>

            <TabPane Key="3" Tab="Wylicz wkładkę">
                <AntDesign.Row Gutter="16">
                    <AntDesign.Col Span="12">
                        <img src="../Images/dob_wkladek.jpg" style="width: 100%; max-width: 400px;" />
                    </AntDesign.Col>
                    <AntDesign.Col Span="18">
                        <AntDesign.FormItem Label="Wartość wysunięcia poza szyld domyślnie 2-3mm" Class="form-item-small-margin">
                            <AntDesign.InputNumber @bind-Value="@wkladka_wys" />
                        </AntDesign.FormItem>
                        <AntDesign.FormItem Label="Grubość szyldu / Rozety wew.">
                            <AntDesign.InputNumber @bind-Value="@wkladka_szyldWew" Class="form-item-small-margin" />
                        </AntDesign.FormItem>
                        <AntDesign.FormItem Label="Odległość od pow. drzwi do środka rowka - Wymiar A" Class="form-item-small-margin">
                            <AntDesign.InputNumber @bind-Value="@wkladka_wymA" />
                        </AntDesign.FormItem>
                        <AntDesign.FormItem Label="Odległość od pow. drzwi do środka rowka - Wymiar B" Class="form-item-small-margin">
                            <AntDesign.InputNumber @bind-Value="@wkladka_wymB" />
                        </AntDesign.FormItem>
                        <AntDesign.FormItem Label="Grubość szyldu / Rozety zew." Class="form-item-small-margin">
                            <AntDesign.InputNumber @bind-Value="@wkladka_szyldZew" />
                        </AntDesign.FormItem>
                        <AntDesign.FormItem Label="Wkładko gałka" Class="form-item-small-margin">
                            <Switch @bind-Value="@wkladkoGalka" />
                        </AntDesign.FormItem>
                        <AntDesign.FormItem Label="Zapisz wynik obliczeń" Class="form-item-small-margin">
                            <Tooltip Placement="Placement.Top" Title="Np. dla skrzydła 90mm domyślne ustawienia zew:34mm wew:56mm + szer. wkładki">
                                <Button OnClick="ZapiszWynikObliczenWkladki">Zapisz wynik obliczeń do Nazwa produktu</Button>
                            </Tooltip>
                        </AntDesign.FormItem>
                    </AntDesign.Col>
                </AntDesign.Row>
            </TabPane>

            <TabPane Key="4" Tab="Wylicz okapiki">
                <AntDesign.FormItem Label="Zapisz wynik obliczeń" Class="form-item-small-margin">
                    <Button OnClick="ZapiszWynikObliczenOkapik">Kliknij aby system wyliczył ilość sztang okapików</Button>
                    <Tooltip Placement="@Placement.TopLeft" Title="Zapisz wynik obliczeń do Nazwa produktu">
                        <Button Icon="@IconType.Fill.Appstore" OnClick="ZapiszWynikObliczenOkapikDoNazProd" />
                    </Tooltip>
                    <Button OnClick="ZapiszGrupyDlugoscOkapik">Wylicz pogrupowane długości i ilości</Button>
                </AntDesign.FormItem>
                <h5 style="color:blue">@((MarkupString)wyliczonoOkapikow)</h5>
            </TabPane>

            <TabPane Key="5" Tab="Pozostałe informacje">
                <AntDesign.FormItem Label="Opis">
                    <AntDesign.Input @bind-Value="elementyZamowienia.ElemetZamDoZlecen.Opis" Placeholder="Podaj opis produktu" />
                </AntDesign.FormItem>
                <AntDesign.FormItem Label="Uwagi">
                    <AntDesign.Input @bind-Value="elementyZamowienia.ElemetZamDoZlecen.Uwagi" Placeholder="Podaj uwagi do pozycji" />
                </AntDesign.FormItem>
                <AntDesign.FormItem Label="Wybierz plik załącznika #1">
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <Select Mode="default"
                        DataSource="@pliki"
                        @bind-Value="@elementyZamowienia.ElemetZamDoZlecen.RowIdPliku"
                        LabelName="@nameof(Plik.OryginalnaNazwaPliku)"
                        AllowClear
                        ValueName="@nameof(Plik.RowId)">
                        </Select>

                        <Button Type="@ButtonType.Primary"
                        Icon="@IconType.Outline.Download"
                        Size="@ButtonSize.Default"
                        OnClick="() => OnFileChange(elementyZamowienia.ElemetZamDoZlecen.RowIdPliku)" />
                    </div>
                </AntDesign.FormItem>
                <AntDesign.FormItem Label="Wybierz plik załącznika #2">
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <Select Mode="default"
                        DataSource="@pliki"
                        @bind-Value="@elementyZamowienia.ElemetZamDoZlecen.RowIdPlikuDodatkowy"
                        LabelName="@nameof(Plik.OryginalnaNazwaPliku)"
                        AllowClear
                        ValueName="@nameof(Plik.RowId)">
                        </Select>

                        <Button Type="@ButtonType.Primary"
                        Icon="@IconType.Outline.Download"
                        Size="@ButtonSize.Default"
                        OnClick="() => OnFileChange(elementyZamowienia.ElemetZamDoZlecen.RowIdPlikuDodatkowy)" />
                    </div>
                </AntDesign.FormItem>
            </TabPane>
        </Tabs>

        <AntDesign.FormItem Style="justify-content: flex-end; display: flex; gap: 10px;">
            <AntDesign.Button Type="primary" @onclick="@HandleAddNew" HtmlType="submit">Zapisz</AntDesign.Button>
            <AntDesign.Button @onclick="@HandleCancel">Anuluj</AntDesign.Button>
        </AntDesign.FormItem>

    </AntDesign.Form>

}


@code {
    [Parameter]
    public ElemetZamDoZlecenWithProducent? elementyZamowienia { get; set; }

    [Parameter]
    public List<ElemetZamDoZlecenWithProducent>? elementyDoZlecen { get; set; }

    [Parameter]
    public EventCallback OnButtonClicked { get; set; }

    [Parameter]
    public string? user { get; set; }

    [Inject] private AppState AppState { get; set; } = default!;

    private List<ProducenciPodwykonawcy>? _producenci;

    private ProducenciPodwykonawcy? Producent;

    private List<PlikiZlecenProdukcyjnych> pliki = new List<PlikiZlecenProdukcyjnych>();

    private PlikiZlecenProdukcyjnych? Plik;

    private bool bAdmin = true;

    private string? activeKey = "0";

    private int wkladka_wys = 3;
    private int wkladka_szyldWew = 0;
    private int wkladka_wymA = 0;
    private int wkladka_wymB = 0;
    private int wkladka_szyldZew = 0;
    private bool wkladkoGalka = false;

    private string wyliczonoOkapikow = "";

    protected override async Task OnInitializedAsync()
    {
        if (AppState != null)
        {
            AppState.SomeData = "";
        }

        _itemsJednostki = new List<Item>
        {
            new Item { Value = "szt.", Name = "szt.", DisplayName = "sztuki"},
            new Item { Value = "kpl.", Name = "kpl.", DisplayName = "komplet"},
            new Item { Value = "mb", Name = "mb", DisplayName = "metry bierzące"},
            new Item { Value = "mm", Name = "mm", DisplayName = "milimetry"},
            new Item { Value = "l", Name = "l", DisplayName = "litry"},
            new Item { Value = "kg", Name = "kg", DisplayName = "kilogramy"},
            new Item { Value = "g", Name = "g", DisplayName = "gramy"},
            new Item { Value = "t", Name = "t", DisplayName = "tony"},
            new Item { Value = "m3", Name = "m3", DisplayName = "metry sześcienny"},
        };

        _producenci = await Http.GetFromJsonAsync<List<ProducenciPodwykonawcy>>($"api/ProducenciPodwykonawcy");

        if (elementyZamowienia != null && elementyZamowienia.ElemetZamDoZlecen != null)  elementyZamowienia.ElemetZamDoZlecen.KtoZapisal = "Autor ostatniej zmiany: " + user + " [" + DateTime.Now + "]";

    }

    //------------------------------------------------------------------------------------------------------------------------

    bool submitOk = false;
    private async Task HandleSubmit()
    {

        Console.WriteLine($"Start zapisu RowIdProducent: {elementyZamowienia.ElemetZamDoZlecen.RowIdProducent}.");

        elementyZamowienia.ElemetZamDoZlecen.NazwaProduktu = elementyZamowienia.ElemetZamDoZlecen.NazwaProduktu.Trim();

        if (elementyZamowienia.ElemetZamDoZlecen.RowIdPliku == elementyZamowienia.ElemetZamDoZlecen.RowIdPlikuDodatkowy && !string.IsNullOrEmpty(elementyZamowienia.ElemetZamDoZlecen.RowIdPlikuDodatkowy))
        {
            elementyZamowienia.ElemetZamDoZlecen.RowIdPlikuDodatkowy = "";

            _ = _notice.Info(new()
                {
                    Message = "Uwaga zapisano tylko jeden plik!!!!",
                    Description = "Nie można zapisać dwóch tych samych plików do jedej pozycji zamówienia!!!",
                    Placement = NotificationPlacement.BottomLeft
                });
        }


        HttpResponseMessage response;

        if (elementyZamowienia.ElemetZamDoZlecen.Id == 0)
        {
            // Sprawdź unikalność NumerRodzajuKart
            var responsedbl = elementyDoZlecen.Where(e => e.ElemetZamDoZlecen.RowIdZlecenia == elementyZamowienia.ElemetZamDoZlecen.RowIdZlecenia);

            elementyZamowienia.ElemetZamDoZlecen.DataZapisu = DateTime.Now;

            if (responsedbl != null && responsedbl.Count() > 0)
            {
                // Wyświetl komunikat o błędzie, że NumerRodzajuKart nie jest unikalny
                Console.WriteLine("Zapisuje kolejne dane do zlecenia!!!.");
                // await _message.Error("Numer Rodzaju Kart musi być unikalny.");
                // return;
            }

            response = await Http.PostAsJsonAsync("api/ElementyDoZlecen", elementyZamowienia.ElemetZamDoZlecen);
        }
        else
        {
            if (elementyZamowienia != null && elementyZamowienia.ElemetZamDoZlecen != null) elementyZamowienia.ElemetZamDoZlecen.KtoZapisal = "Autor ostatniej zmiany: " + user + " [" + DateTime.Now + "]";
            response = await Http.PutAsJsonAsync($"api/ElementyDoZlecen/{elementyZamowienia.ElemetZamDoZlecen.Id}", elementyZamowienia.ElemetZamDoZlecen);
            // if (elementyDoZlecen != null) oryginalElementyDoZlecen = elementyDoZlecen.DeepCopyList();
        }

        if (response.IsSuccessStatusCode)
        {
            // Obsługa błędów
            Console.WriteLine("Błąd podczas zapisywania rodzaju elementyZamowienia - źródło RAZOR");
        }

        await HandleCancel();

        submitOk = true;

        if (elementyDoZlecen != null)
        {
            // Filtrowanie elementów, które mają zgodny RowIdPliku lub RowIdPlikuDodatkowy
            var elementdbl1 = elementyDoZlecen
                .Where(e => (e.ElemetZamDoZlecen.RowIdPliku == elementyZamowienia.ElemetZamDoZlecen.RowIdPliku
                         || e.ElemetZamDoZlecen.RowIdPliku == elementyZamowienia.ElemetZamDoZlecen.RowIdPlikuDodatkowy) && !string.IsNullOrEmpty(e.ElemetZamDoZlecen.RowIdPliku))
                .ToList();

            // Sprawdzenie, czy znaleziono więcej niż jeden taki element
            if (elementdbl1.Count > 1)
            {
                _ = _notice.Info(new()
                    {
                        Message = "Ważna informacja plik #1",
                        Description = $"Plik jest już dodany do innej pozycji zamówienia: {elementdbl1[0].ElemetZamDoZlecen.NazwaProduktu}",
                        Placement = NotificationPlacement.BottomLeft,
                        Duration = 3,
                    });
            }

            var elementdbl2 = elementyDoZlecen
                .Where(e => (e.ElemetZamDoZlecen.RowIdPlikuDodatkowy == elementyZamowienia.ElemetZamDoZlecen.RowIdPliku
                         || e.ElemetZamDoZlecen.RowIdPlikuDodatkowy == elementyZamowienia.ElemetZamDoZlecen.RowIdPlikuDodatkowy) && !string.IsNullOrEmpty(e.ElemetZamDoZlecen.RowIdPlikuDodatkowy))
                .ToList();

            if (elementdbl2.Count() > 1)
            {
                _ = _notice.Info(new()
                    {
                        Message = "Ważna informacja plik #2",
                        Description = $"Plik jest już dodany do innej pozycji zamówienia: {elementdbl2[0].ElemetZamDoZlecen.NazwaProduktu}",
                        Placement = NotificationPlacement.BottomLeft,
                        Duration = 3,
                    });
            }
        }
    }

    public async Task HandleAddNew()
    {
        if (submitOk)
            await HandleCancel();
    }

    public async Task HandleCancel()
    {

        if (OnButtonClicked.HasDelegate)
        {
            await OnButtonClicked.InvokeAsync();
        }
    }

    public async Task DodajUwSprawdz()
    {
        if (elementyZamowienia == null) return;
        elementyZamowienia.ElemetZamDoZlecen.Opis = $"Sprawdzić!! - Zapisano: {DateTime.Now}";
        await Task.CompletedTask;
    }

    public async Task ZapiszGrupyDlugoscOkapik()
    {
        if (elementyZamowienia == null || elementyZamowienia.ElemetZamDoZlecen == null)
        {
            wyliczonoOkapikow = "Brak danych potrzebych do wyliczeń ilości oraz długości okapików.";
            return;
        }

        var url = $"api/PozWZleceniu/GetDaneDoZlecenia/{elementyZamowienia.ElemetZamDoZlecen.RowIdZlecenia}/";
        var szukajDlugosci = await Http.GetFromJsonAsync<List<PozDoZlecen>>(url);

        if (szukajDlugosci == null)
        {
            wyliczonoOkapikow = "Brak lub błąd danych potrzebych do wyliczeń ilości oraz długości okapików.";
            Console.WriteLine("No data returned from API.");
        }
        else
        {
            // Tworzymy listę wszystkich odcinków
            List<float> wszystkieOdcinki = new List<float>();
            foreach (var pozycja in szukajDlugosci)
            {
                for (int i = 0; i < pozycja.IloscOkien; i++)
                {
                    wszystkieOdcinki.Add(pozycja.Szerokosc);
                }
            }

            // Grupujemy odcinki według długości i sumujemy ilości
            var grupyOdcinkow = wszystkieOdcinki
                .GroupBy(dlugosc => dlugosc)
                .Select(grupa => new
                {
                    Dlugosc = grupa.Key,
                    Ilosc = grupa.Count(),
                    SumaDlugosci = grupa.Sum()
                })
                .OrderBy(grupa => grupa.Dlugosc) // Sortujemy rosnąco po długości
                .ToList();

            // Tworzymy tabelę HTML
            StringBuilder wynikTabeli = new StringBuilder();
            wynikTabeli.Append("<table style='width:100%; border:1px solid black;'>");
            wynikTabeli.Append("<thead><tr><th>Długość Odcinka</th><th>Ilość</th><th>Suma Długości</th></tr></thead><tbody>");

            foreach (var grupa in grupyOdcinkow)
            {
                wynikTabeli.Append($"<tr><td>{grupa.Dlugosc}</td><td>{grupa.Ilosc}</td><td>{grupa.SumaDlugosci}</td></tr>");
            }

            wynikTabeli.Append("</tbody></table>");
            wyliczonoOkapikow = wynikTabeli.ToString();

            Console.WriteLine($"Grupowanie zakończone sukcesem: {grupyOdcinkow.Count} grup.");
        }

        await Task.CompletedTask;
    }


    int iloscSztangZap = 0;
    public async Task ZapiszWynikObliczenOkapik()
    {
        iloscSztangZap = 0;
        if (elementyZamowienia == null || elementyZamowienia.ElemetZamDoZlecen == null)
        {
            wyliczonoOkapikow = "Brak danych potrzebych do wyliczeń ilości oraz długości okapików.";
            return;
        }

        var url = $"api/PozWZleceniu/GetDaneDoZlecenia/{elementyZamowienia.ElemetZamDoZlecen.RowIdZlecenia}/";
        var szukajDlugosci = await Http.GetFromJsonAsync<List<PozDoZlecen>>(url);

        if (szukajDlugosci == null)
        {
            wyliczonoOkapikow = "Brak lub błąd danych potrzebych do wyliczeń ilości oraz długości okapików.";
            Console.WriteLine("No data returned from API.");
        }
        else
        {
            List<List<float>> listaCiec = new List<List<float>>();
            float dlugoscSztangi = 6000f;
            List<float> wszystkieOdcinki = new List<float>();

            foreach (var pozycja in szukajDlugosci)
            {
                for (int i = 0; i < pozycja.IloscOkien; i++)
                {
                    wszystkieOdcinki.Add(pozycja.Szerokosc);
                }
            }

            wszystkieOdcinki.Sort((a, b) => b.CompareTo(a));

            foreach (var odcinek in wszystkieOdcinki)
            {
                bool dopasowano = false;

                foreach (var sztanga in listaCiec)
                {
                    float sumaCiecWSztandze = sztanga.Sum();
                    if (sumaCiecWSztandze + odcinek <= dlugoscSztangi)
                    {
                        sztanga.Add(odcinek);
                        dopasowano = true;
                        break;
                    }
                }

                if (!dopasowano)
                {
                    listaCiec.Add(new List<float> { odcinek });
                }
            }

            // Stworzenie HTML dla tabeli
            StringBuilder wynikTabeli = new StringBuilder();
            wynikTabeli.Append("<table style='width:100%; border:1px solid black;'>");
            wynikTabeli.Append("<thead><tr><th>Sztanga</th><th>Cięcia</th><th>Suma Długości</th></tr></thead><tbody>");

            int numerSztangi = 1;
            foreach (var sztanga in listaCiec)
            {
                wynikTabeli.Append($"<tr><td>{numerSztangi}</td><td>{string.Join(", ", sztanga)}</td><td>{sztanga.Sum()}</td></tr>");
                numerSztangi++;
            }

            iloscSztangZap = numerSztangi;

            wynikTabeli.Append("</tbody></table>");
            wyliczonoOkapikow = wynikTabeli.ToString();
            Console.WriteLine($"Optymalizacja zakończona sukcesem: {listaCiec.Count} sztang");
        }

        await Task.CompletedTask;
    }

    public async Task ZapiszWynikObliczenOkapikDoNazProd()
    {
        elementyZamowienia.ElemetZamDoZlecen.NazwaProduktu = "Okapik okienny";
        elementyZamowienia.ElemetZamDoZlecen.IloscSztuk = iloscSztangZap;
        elementyZamowienia.ElemetZamDoZlecen.Jednostka = "mb";
        elementyZamowienia.ElemetZamDoZlecen.Dlugosc = 6;
        await Task.CompletedTask;

        activeKey = "0";
    }

    public async Task ZapiszWynikObliczenWkladki()
    {
        // Funkcja zaokrąglająca w górę do najbliższej wartości będącej wielokrotnością 5
        double ZaokraglijWGoreDo5mm(double wartosc)
        {
            return Math.Ceiling(wartosc / 5) * 5;
        }

        // Obliczanie wartości A i B oraz ich zaokrąglanie
        double sumaA = wkladka_wys + wkladka_szyldWew + wkladka_wymA;
        double sumaB = wkladka_wys + wkladka_szyldZew + wkladka_wymB;

        double zaokraglonaA = ZaokraglijWGoreDo5mm(sumaA);
        double zaokraglonaB = ZaokraglijWGoreDo5mm(sumaB);

        // Sprawdzamy, czy wkładko gałka jest ustawione na true
        if (wkladkoGalka)
        {
            elementyZamowienia.ElemetZamDoZlecen.NazwaProduktu = $"Wkładka Gałka Klasa C Standard E8 A={zaokraglonaA} B={zaokraglonaB}";
        }
        else
        {
            elementyZamowienia.ElemetZamDoZlecen.NazwaProduktu = $"Wkładka Klasa C Standard E8 A={zaokraglonaA} B={zaokraglonaB}";
        }

        await Task.CompletedTask;

        activeKey = "0";
    }

    private async Task OnTabClick()
    {

        if(activeKey == "5" && elementyZamowienia.ElemetZamDoZlecen.RowIdZlecenia != null)
        {
            Console.WriteLine("Wyszukuję pasujące pliki");  
            await LoadFiles(elementyZamowienia.ElemetZamDoZlecen.RowIdZlecenia);
        }

    }

    private async Task LoadFiles(string rowId)
    {
        try
        {
            var response = await Http.GetAsync($"api/FileUploadZlec/files/{rowId}");

            if (response.IsSuccessStatusCode)
            {
                var fileList = await response.Content.ReadFromJsonAsync<List<PlikiZlecenProdukcyjnych>>();
                if (fileList != null)
                {
                    // Filtruj pliki, jeśli użytkownik nie jest administratorem
                    //if (!boolAdmin)
                    //{
                    fileList = fileList.Where(p => p.WidocznyDlaWszystkich).ToList();
                    //}

                    // Upewnij się, że pole Uwagi nie jest null lub pusty string
                    foreach (var itm in fileList)
                    {
                        itm.Uwagi ??= string.Empty;
                    }

                    pliki = fileList;
                }
                else
                {
                    pliki = new List<PlikiZlecenProdukcyjnych>();
                }
            }
            else
            {
                // Obsługa błędów dla przypadków nieudanych odpowiedzi
                if (response.StatusCode == HttpStatusCode.NotFound)
                {
                    // Obsługa przypadku 404 Not Found
                    Console.Error.WriteLine($"404 Not Found: The file with RowId {rowId} was not found.");
                }
                else
                {
                    // Obsługa innych błędów
                    Console.Error.WriteLine($"Error loading files: {response.StatusCode} - {response.ReasonPhrase}");
                }
                pliki = new List<PlikiZlecenProdukcyjnych>();
            }
        }
        catch (HttpRequestException httpRequestException)
        {
            // Obsługa błędów połączenia HTTP
            Console.Error.WriteLine($"HTTP request error: {httpRequestException.Message}");
            pliki = new List<PlikiZlecenProdukcyjnych>();
        }
        catch (JsonException jsonException)
        {
            // Obsługa błędów deserializacji JSON
            Console.Error.WriteLine($"JSON parsing error: {jsonException.Message}");
            pliki = new List<PlikiZlecenProdukcyjnych>();
        }
        catch (Exception ex)
        {
            // Globalna obsługa innych wyjątków
            Console.Error.WriteLine($"An unexpected error occurred while loading files: {ex.Message}");
            pliki = new List<PlikiZlecenProdukcyjnych>();
        }
    }

    private async Task OnFileChange(string rowIdPliku)
    {
        if (string.IsNullOrEmpty(rowIdPliku))
        {
            _ = _notice.Info(new()
                {
                    Message = "Uwaga!!!!",
                    Description = "Zamówienie nie posiada załączonego pliku!!!",
                    Placement = NotificationPlacement.BottomLeft
                });
            return;
        }
        Plik = pliki.FirstOrDefault(p => p.RowId == rowIdPliku);
        await DownloadFile(Plik.NazwaPliku);
    }

    private async Task DownloadFile(string fileName)
    {
        try
        {
            //await Task.Delay(1000);  // Czekaj 2 sekundy przed próbą pobrania

            // Konstrukcja pełnego URL dla plików w wwwroot/uploads/
            var fileUrl = $"{NavigationManager.BaseUri}uploads_zlecenia/{fileName}";

            if (!Uri.TryCreate(fileUrl, UriKind.Absolute, out var uri))
            {
                Console.WriteLine("Nieprawidłowy URL: " + fileUrl);
                return;
            }

            using (var httpClient = new HttpClient())
            {
                httpClient.Timeout = TimeSpan.FromMinutes(10);
                Console.WriteLine($"Pobieranie pliku z URL: {fileUrl}");

                using (var response = await httpClient.GetAsync(uri, HttpCompletionOption.ResponseHeadersRead))
                {
                    if (response.IsSuccessStatusCode)
                    {
                        var contentStream = await response.Content.ReadAsStreamAsync();
                        var actualFileName = Path.GetFileName(uri.LocalPath);

                        using (var memoryStream = new MemoryStream())
                        {
                            await contentStream.CopyToAsync(memoryStream);
                            memoryStream.Seek(0, SeekOrigin.Begin);

                            // Wywołaj JavaScript do pobrania pliku
                            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", actualFileName, memoryStream.ToArray());
                        }

                        Console.WriteLine($"Plik został pobrany i zapisany: {actualFileName}");
                    }
                    else
                    {
                        Console.WriteLine($"Nie udało się pobrać pliku. {response.Content.Headers}");

                        _ = _notice.Error(new()
                            {
                                Message = "System napotkał problem. Plik mógł zostać niepoprawnie pobrany",
                                Description = response.Content.Headers.ToString(),
                                Placement = NotificationPlacement.BottomLeft
                            });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Wystąpił błąd podczas pobierania pliku: {ex.Message} / {ex.StackTrace}");
            _ = _notice.Error(new()
                {
                    Message = ex.Message,
                    Description = ex.StackTrace,
                    Placement = NotificationPlacement.BottomLeft
                });
        }
    }

    List<Item>? _itemsJednostki;

    public class Item
    {
        public string? Value { get; set; }
        public string? Name { get; set; }
        public string? DisplayName { get; set; }
    }
}

