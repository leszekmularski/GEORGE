@page "/Zlecenia-produkcyjne-wew/{RowIdZlecenia?}"
@layout MainLayout
@using GEORGE.Shared.Models
@using GEORGE.Shared.Class
@inject HttpClient Http
@inject ModalService ModalService;
@inject ConfirmService ComfirmService;
@inject IMessageService _message
@inject NavigationManager NavigationManager
@inject Utilities.ILocalStorage LocalStorage
@inherits LayoutComponentBase
@inject DialogService DialogService
@using AntDesign
@using System.Net;
@using System.Text.Json;
@inject IJSRuntime JSRuntime

<style>
    .custom-link {
        color: blue;
    }

    .highlighted-background {
        background-color: white;
        overflow: auto; /* Dodaje paski przewijania, gdy zawartość przekracza rozmiar kontenera */
        max-height: calc(100vh - 155px); /* Maksymalna wysokość kontenera dopasowana do wysokości okna minus 150px */
        width: calc(100% - 260px); /* Ustawia szerokość na 100% okna minus 300px */
        box-sizing: border-box; /* Uwzględnia padding i border w obliczaniu wysokości */
        position: absolute;
        left: 260px; /* Ustawia lewą krawędź 300px od lewej strony okna */
        top: 155px; /* Ustawia górną krawędź 150px od góry okna */
    }

    .zlealizowano, .zlealizowano > td {
        background-color: forestgreen !important;
    }

        .zlealizowano:hover, .zlealizowano:hover > td {
            background-color: forestgreen !important;
        }

    .zlecenie, .zlecenie > td {
        background-color: lightblue !important;
    }

        .zlecenie:hover, .zlecenie:hover > td {
            background-color: lightblue !important;
        }
</style>

<PageTitle>Program do wspomagania produkcji zlecenia</PageTitle>

<div style="display: flex; align-items: center; gap: 10px;">
    <h3 style="margin: 0;">Zlecenia Produkcyjne Wewnętrzne</h3>
    <div style="display: flex; align-items: center;padding-left:15px">
        <Text style="margin-right: 5px;">Ilość widocznych linii</Text>
        <AntDesign.InputNumber TValue="int"
                               @bind-Value="iloscRekordow"
                               Min="2"
                               Max="25"
                               Bordered="false"
                               OnChange="@(e => OnClickChange(e))"
                               Style="width: 100px; padding: 0; border-radius: 4px;" />

    </div>

    @if (_TypZamowienia != null)
    {
        <label>Filtruj po:</label>
        <Select TItem="TypZamowienia"
                TItemValue="string"
                DataSource="@_TypZamowienia"
                @bind-Value="@filtrTypZamowienia"
                ValueName="@nameof(TypZamowienia.Value)"
                LabelName="@nameof(TypZamowienia.Name)"
                GroupName="@nameof(TypZamowienia.Role)"
                SortByLabel="@SortDirection.Ascending"
                SortByGroup="@SortDirection.Ascending"
                DefaultActiveFirstOption="false"
                AllowClear
                Style="width: 200px;" OnSelectedItemChanged="OnSelectedItemChangedHandlerFiltr">
        </Select>
    }
</div>

@* @if (boolAdmin || boolNowy)
{
    <Button Type="primary" Style="width:100%" OnClick="@(ShowDialogAddNew)">
        Dodaj Zlecenie Wewnętrzne
    </Button>
} *@
<Divider></Divider>

@if (zleceniaProdukcyjneWew == null)
{
    <p><em>Czekaj na załadowanie danych...</em></p>
}
else
{
    <div class="highlighted-background">

            <Table TItem="ZleceniaProdukcyjneWew" DataSource="@zleceniaProdukcyjneWew"
                   RowClassName="@(x => x.Data.ZlecZrealizowane ? "zlealizowano" : x.Data.TypZamowienia=="Zlecenie" ? "zlecenie" : "" )"
                   ScrollX="1950" PageSize="6" Size="TableSize.Small">
                <ActionColumn Title="Materiały">
                    <a @onclick="() => DodajKantowke(context)">Kantówka</a>
                    <a @onclick="() => DodajCzasyWykonaia(context)" class="custom-link" style="color:chocolate; width:38px">Czasy</a>
                    <a @onclick="() => FileEdit(context)">Pliki</a>
                </ActionColumn>
                <Column Title="Status" TData="string">
                    @if (context.Tags != null)
                    {
                        @foreach (var tag in context.Tags)
                        {
                            <Tag Color="@(tag.Contains("szyb") ? "volcano" : tag.Contains("do produkcji")  ? "geekblue" : "green")">@tag</Tag>
                        }
                    }
                    else
                    {
                        <Tag Color="@("black")">Brak danych</Tag>
                    }
                </Column>
                <Column Title="ID" @bind-Field="@context.Id" Hidden />
                <Column Title="Typ Dokumentu" @bind-Field="@context.TypZamowienia" Sortable OnFilter="(a, b) => a == b" Filterable />
                <Column Title="Numer Zamówienia" @bind-Field="@context.NumerZamowienia" Sortable OnFilter="(a, b) => a == b" Filterable />
                <Column Title="Data Produkcji" @bind-Field="@context.DataProdukcji" Style="font-weight:bold;color:red" Format="yyyy-MM-dd" Sortable />
                <Column Title="Data Gotowości" TData="DateTime" DataIndex="DataGotowosci" Style="font-weight:bold" Format="yyyy-MM-dd" Sortable />
                <Column Title="Klient" @bind-Field="@context.Klient" Style="font-weight:bold" Sortable OnFilter="(a, b) => a == b" Filterable />
                <Column Title="Nazwa Produktu" @bind-Field="@context.NazwaProduktu" Sortable />
                <Column Title="Adres" @bind-Field="@context.Adres" Sortable OnFilter="(a, b) => a == b" Filterable />
                <Column Title="Miejscowość" @bind-Field="@context.Miejscowosc" Sortable OnFilter="(a, b) => a == b" Filterable />
                <Column Title="Telefon" @bind-Field="@context.Telefon" Sortable />
                <Column Title="CWZ" @bind-Field="@context.JednostkiNaZlecenie" Style="width:30px" Sortable />
                <PropertyColumn Property="c=>context.ZlecZrealizowane"></PropertyColumn>

                <!-- Przykład kolumny dla danych zagnieżdżonych -->
                @*    <Column Title="Nazwa Produktu 2" TData="string" DataIndex="NazwaProduktu2" Sortable /> *@

                <!-- Przykład kolumny dla daty z formatowaniem -->
                <Column Title="Data Zapisu" TData="DateTime" DataIndex="DataZapisu" Format="yyyy-MM-dd" Sortable />

                <!-- Przykład kolumny z niestandardowym renderowaniem komórki -->
            <ActionColumn Title="Akcja" Width="100" Fixed="right">
                    @if (boolAdmin || boolZmian)
                    {
                        <Popconfirm Title="Czy chcesz edytować pozycję?"
                                    OnConfirm="()=> editRow(context.Id)"
                                    OkText="Tak"
                                    CancelText="Nie">
                            <a>Edytuj</a>
                        </Popconfirm>
                    }
                    @if (boolAdmin || boolUsuniecia)
                    {
                        <Popconfirm Title="Czy chcesz usunąć pozycję?"
                                OnConfirm="()=> delRow(context.Id)"
                                    OkText="Tak"
                                    CancelText="Nie">
                            <a style="color:red">Usuń</a>
                        </Popconfirm>
                    }
                </ActionColumn>
            </Table>

    </div>
}

<div class="modal fade @classShow" tabindex="-1" style="display: @display;">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Zlecenie wewnętrzne dodaj / zmień</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HandleCancel">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <AntDesign.Form Model="@zlecenie" Layout="FormLayout.Vertical">

                    <Tabs DefaultActiveKey="tw1" TabPosition="TabPosition.Left" Style="height: 100%; width: 100%">
                        <TabPane Key="twPozInformacje" Tab=@($"Pozostałe informacje")>
                            <!-- Section for Other Information Fields -->
                            <AntDesign.Row Gutter="16">
                                <AntDesign.Col Span="12">
                                    <AntDesign.FormItem Label="Typ Dokumentu">
                                        <Select TItem="TypZamowienia"
                                                TItemValue="string"
                                                DataSource="@_TypZamowienia"
                                                @bind-Value="@zlecenie.TypZamowienia"
                                                ValueName="@nameof(TypZamowienia.Value)"
                                                LabelName="@nameof(TypZamowienia.Name)"
                                                GroupName="@nameof(TypZamowienia.Role)"
                                                SortByLabel="@SortDirection.Ascending"
                                                SortByGroup="@SortDirection.Ascending"
                                                DefaultActiveFirstOption="true"
                                                Style="width: 200px;" OnSelectedItemChanged="OnSelectedItemChangedHandler">
                                        </Select>
                                    </AntDesign.FormItem>
                                </AntDesign.Col>
                                <AntDesign.Col Span="12">
                                    <AntDesign.FormItem Label="Numer Zamówienia">
                                        <AntDesign.Input @bind-Value="zlecenie.NumerZamowienia" />
                                    </AntDesign.FormItem>
                                </AntDesign.Col>
                            </AntDesign.Row>
                            <AntDesign.Row Gutter="16">
                                <AntDesign.Col Span="12">
                                    <AntDesign.FormItem Label="Numer Umowy">
                                        <AntDesign.Input @bind-Value="zlecenie.NumerUmowy" />
                                    </AntDesign.FormItem>
                                </AntDesign.Col>
                            </AntDesign.Row>
                        </TabPane>

                        <TabPane Key="twKlient" Tab=@($"Klient")>
                            <!-- Section for Client Fields -->
                            <AntDesign.Row Gutter="16">
                                <AntDesign.Col Span="12">
                                    <AntDesign.FormItem Label="Klient">
                                        <AntDesign.Input @bind-Value="zlecenie.Klient" />
                                    </AntDesign.FormItem>
                                </AntDesign.Col>
                            </AntDesign.Row>
                            <AntDesign.Row Gutter="16">
                                <AntDesign.Col Span="12">
                                    <AntDesign.FormItem Label="Adres">
                                        <AntDesign.Input @bind-Value="zlecenie.Adres" />
                                    </AntDesign.FormItem>
                                </AntDesign.Col>
                            </AntDesign.Row>
                            <AntDesign.Row Gutter="16">
                                <AntDesign.Col Span="12">
                                    <AntDesign.FormItem Label="Miejscowość">
                                        <AntDesign.Input @bind-Value="zlecenie.Miejscowosc" />
                                    </AntDesign.FormItem>
                                </AntDesign.Col>
                            </AntDesign.Row>
                            <AntDesign.Row Gutter="16">
                                <AntDesign.Col Span="12">
                                    <AntDesign.FormItem Label="Numer Telefonu">
                                        <AntDesign.Input @bind-Value="zlecenie.Telefon" />
                                    </AntDesign.FormItem>
                                </AntDesign.Col>
                            </AntDesign.Row>
                        </TabPane>

                        <TabPane Key="twDaty" Tab=@($"Daty  w zleceniu")>
                            <!-- Section for Date Fields -->
                            <AntDesign.Row Gutter="16">
                                <AntDesign.Col Span="12">
                                    <AntDesign.FormItem Label="Data Gotowości Do Produkcji">
                                         <div style="display: flex; align-items: center; gap: 10px;">
                                            <AntDesign.DatePicker Disabled="@czyZamowienie" @bind-Value="zlecenie.DataGotowosci" />
                                            <AntDesign.Button Disabled="@czyZamowienie" OnClick="DataProdUstaw" Style="width:180px">Ustaw datę produkcji</AntDesign.Button>
                                        </div>
                                    </AntDesign.FormItem>
                                </AntDesign.Col>
                            </AntDesign.Row>
                            <AntDesign.Row Gutter="16">
                                <AntDesign.Col Span="12">
                                    <AntDesign.FormItem Label="Data Rozp. Produkcji">
                                        <AntDesign.DatePicker Disabled="@czyZamowienie" @bind-Value="zlecenie.DataProdukcji" />
                                    </AntDesign.FormItem>
                                </AntDesign.Col>
                            </AntDesign.Row>
                            <AntDesign.Row Gutter="16">
                                <AntDesign.Col Span="12">
                                    <AntDesign.FormItem Label="Data Montażu">
                                        <AntDesign.DatePicker Disabled="@czyZamowienie" @bind-Value="zlecenie.DataMontazu" />
                                    </AntDesign.FormItem>
                                </AntDesign.Col>
                                <AntDesign.Col Span="12">
                                    <AntDesign.FormItem Label="Data Wysyłki">
                                        <AntDesign.DatePicker Disabled="@czyZamowienie" @bind-Value="zlecenie.DataWysylki" />
                                    </AntDesign.FormItem>
                                </AntDesign.Col>
                            </AntDesign.Row>
                            <AntDesign.Row Gutter="16">
                                <AntDesign.Col Span="12">
                                    <AntDesign.FormItem Label="Zapisano">
                                            <AntDesign.Input ReadOnly Value="@(zlecenie.DataZapisu.ToString("yyyy-MM-dd"))" Style="width:120px" />
                                    </AntDesign.FormItem>
                                </AntDesign.Col>
                            </AntDesign.Row>
                            </TabPane>

                        <TabPane Key="tw2" Tab=@($"Produkt ilość sztuk")>
                            <AntDesign.Row Gutter="16">
                                <AntDesign.Col Span="12">
                                    <AntDesign.FormItem Label="Nazwa Produktu">
                                            <AutoComplete Placeholder="Nazwa Produktu" @bind-Value="@zlecenie.NazwaProduktu" Options="optionsProdukt" CompareWith="CompareWith"
                                                          OnSelectionChange="OnSelectionChangeProdukt">
                                                <OptionTemplate Context="option">
                                                    <AutoCompleteOption Value="@option.Value" Label="@option.Label">
                                                    </AutoCompleteOption>
                                                </OptionTemplate>
                                            </AutoComplete>
                                    </AntDesign.FormItem>
                                </AntDesign.Col>
                                <AntDesign.Col Span="12">
                                    <AntDesign.FormItem Label="Nazwa Produktu 2">
                                        <AntDesign.Input @bind-Value="zlecenie.NazwaProduktu2" />
                                    </AntDesign.FormItem>
                                </AntDesign.Col>
                            </AntDesign.Row>
                            <AntDesign.Row Gutter="16">
                                <AntDesign.Col Span="12">
                                    <AntDesign.FormItem Label="Kod Produktu">
                                        <AntDesign.Input @bind-Value="zlecenie.KodProduktu" />
                                    </AntDesign.FormItem>
                                </AntDesign.Col>
                                 </AntDesign.Row>
                            <AntDesign.Row Gutter="16">
                                <AntDesign.Col Span="12">
                                    <AntDesign.FormItem Label="Ilość sztuk w zleceniu">
                                        <AntDesign.InputNumber @bind-Value="zlecenie.Ilosc" />
                                    </AntDesign.FormItem>
                                </AntDesign.Col>
                            </AntDesign.Row>
                        </TabPane>

                        <TabPane Key="twStatus" Tab=@($"Status")>
                            <AntDesign.Row Gutter="16">
                                    <AntDesign.Col Span="12">
                                        <AntDesign.FormItem Label="Status nowy wpis po [,]">
                                            <InputTextArea @bind-Value="zlecenie.TagsString" />
                                        </AntDesign.FormItem>
                                    </AntDesign.Col>
                                <AntDesign.Col Span="12">
                                    <AntDesign.FormItem Label="Jednostki produkcyjne na wyk. Zlecenia">
                                        <label>(jeżeli czasy do linii zostaną uzupełnione to ten wpis zostanie pominięty)</label>
                                        <AntDesign.InputNumber @bind-Value="zlecenie.JednostkiNaZlecenie" />
                                    </AntDesign.FormItem>
                                </AntDesign.Col>
                            </AntDesign.Row>
                            <AntDesign.Row Gutter="16">
                                <AntDesign.Col Span="12">
                                    <AntDesign.FormItem Style="font:bold" Label="Zlecenie zrealizowane">
                                        <AntDesign.Checkbox @bind-Value="zlecenie.ZlecZrealizowane" />
                                    </AntDesign.FormItem>
                                </AntDesign.Col>
                                <AntDesign.Col Span="12">
                                    <AntDesign.FormItem Label="Ostatnia Zmiana">
                                        <AntDesign.Input ReadOnly @bind-Value="zlecenie.OstatniaZmiana" />
                                    </AntDesign.FormItem>
                                </AntDesign.Col>
                            </AntDesign.Row>
                            <AntDesign.Row Gutter="16">
                                <AntDesign.Col Span="12">
                                    <AntDesign.FormItem Label="Kto Zapisał">
                                        <AntDesign.Input @bind-Value="zlecenie.KtoZapisal" />
                                    </AntDesign.FormItem>
                                </AntDesign.Col>
                            </AntDesign.Row>
                        </TabPane>

                        <TabPane Key="twPliki" Tab=@($"Załącz pliki")>
                            <AntDesign.Row Gutter="16">
                                <AntDesign.Col Span="12">
                                    <AntDesign.FormItem Label="Zapisano ">@pliki.Count().ToString()</AntDesign.FormItem>
                                    @if (cid != -1)
                                    {
                                        <InputFile OnChange="HandleSelected" multiple>Wybierz pliki powiązane ze zleceniem</InputFile>
                                    }
                                </AntDesign.Col>
                                @bladZapisuPliku
                            </AntDesign.Row>
                        </TabPane>
                    </Tabs>

                    <AntDesign.Row>
                        <AntDesign.Col Span="24" class="d-flex justify-content-end">
                            @if (!blokuDwuKlik)
                            {
                                <AntDesign.Button Type="primary" @onclick="@HandleAddNew" HtmlType="submit">Zapisz</AntDesign.Button>
                            }
                            <AntDesign.Button @onclick="@HandleCancel">Anuluj</AntDesign.Button>
                        </AntDesign.Col>
                    </AntDesign.Row>
                
                 </AntDesign.Form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade @classShowFile" tabindex="-1" style="display: @displayFile;">
    <div class="modal-dialog" style="max-width: 90%;">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Ilość plików powiązanych: @pliki.Count()</h5>
            </div>
            <div class="modal-body">
                <Table TItem="PlikiZlecenProdukcyjnych" DataSource="@pliki">
                    <Column Title="ID" @bind-Field="@context.Id" Hidden />
                    <Column Title="Nazwa pliku" @bind-Field="@context.NazwaPliku" Sortable OnFilter="(a, b) => a == b" Filterable />
                    <Column Title="Oryginalna nazwa pliku" @bind-Field="@context.OryginalnaNazwaPliku" Sortable OnFilter="(a, b) => a == b" Filterable />
                    <Column Title="Typ" @bind-Field="@context.TypPliku" Sortable OnFilter="(a, b) => a == b" Filterable />
                    <Column Title="Data Zapisu" @bind-Field="@context.DataZapisu" Sortable OnFilter="(a, b) => a == b" Filterable />
                    <ActionColumn Title="Uwagi / Akcja">
                        <Template>
                            @{
                                @if (boolAdmin)
                                {
                                    <label>Widoczny dla wszystkich:</label>
                                    <Checkbox Placeholder="Widoczny dla wszystkich." @bind-Value="@context.WidocznyDlaWszystkich" OnChange="@( () => ZmienWidocznosc(context.Id, context.WidocznyDlaWszystkich))" />                          
                                }
                                <Input Placeholder="Podaj uwagę." @bind-Value="@context.Uwagi" MaxLength="45" OnBlur="@( () => ZmienUwage(context.Id, context.Uwagi))" />
                                var item = context as PlikiZlecenProdukcyjnych;
                                if (!string.IsNullOrEmpty(item.NazwaPliku))
                                {
                                    <Spin Spinning=@czekajNaUsuniecie>
                                        <a href="uploads_zlecenia/@item.NazwaPliku" download @onclick="@( () => DownloadFile(item.NazwaPliku) )">Pobierz plik  &nbsp &nbsp</a>
                                        <Popconfirm Title="Czy chcesz usunąć plik?"
                                                    OnConfirm="()=> deleteFile(item.Id, item.NazwaPliku, item.RowIdZleceniaProdukcyjne)"
                                                    OkText="Tak"
                                                    CancelText="Nie">
                                            <a style="color:red">Usuń plik</a>
                                        </Popconfirm>
                                    </Spin>
                                }
                            }
                        </Template>
                    </ActionColumn>
                </Table>
            </div>
            <div class="modal-footer d-flex">
                Załącz nowe pliki <InputFile OnChange="HandleSelected" multiple>Wybierz pliki powiązane ze zleceniem</InputFile>@bladZapisuPliku
                <Button class="ms-auto" @onclick="() => HideDialogFile()">Zakończ</Button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade @classShowTWZ" tabindex="-1" style="display: @displayTWZ;margin: auto; top: 50%; left: 50%; transform: translate(-50%, -50%); position: absolute; width: 40%;">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Ustaw czas produkcji na różnych liniach</h5>
            </div>
            <div class="modal-body">
                @if (rowIdClick != "")
                {
                    <Czasy_Zlecen_Na_Linii RowIdZlecenia="@rowIdClick" NowaStronaRazor="false" />
                }
            </div>
            <div class="modal-footer d-flex">
                <Button class="ms-auto" @onclick="() => HideDialogTWZ()">Zakończ</Button>
            </div>
        </div>
    </div>
</div>

@code {

    [CascadingParameter]
    private MainLayout? Layout { get; set; }

    [Inject] private AppState AppState { get; set; } = default!;

    [Parameter]
    public string? RowIdZlecenia { get; set; }

    [Inject]
    private NavigationManager? navigationManager { get; set; }

    private List<ZleceniaProdukcyjneWew>? zleceniaProdukcyjneWew;
    private List<ZleceniaProdukcyjneWew>? originalzleceniaProdukcyjneWew;

    private List<PlikiZlecenProdukcyjnych> pliki = new List<PlikiZlecenProdukcyjnych>();

    List<TypZamowienia>? _TypZamowienia;

    private bool _visible = false;
    private string display = "none;";
    private string classShow = "";

    IEnumerable<PlikiZlecenProdukcyjnych> _selectedRows = [];

    private string displayFile = "none;";
    private string classShowFile = "";

    private string displayTWZ = "none;";
    private string classShowTWZ = "";
    private string classTWZ = "";

    private string rowIdClick = "";

    private int iloscRekordow = 6;
    private string? filtrTypZamowienia = "";

    private long cid = -1;

    private bool czyZamowienie = true;

    private ZleceniaProdukcyjneWew zlecenie = new ZleceniaProdukcyjneWew();

    private bool czekajNaUsuniecie = false;

    private AutoCompleteOption? selectItemProdukt;

    ObjectValueProduktOption[]? optionsProdukt;

    protected override async Task OnInitializedAsync()
    {
        await SearchProdukt();

        await Laduj_Uprawnienia();

        try
        {
            iloscRekordow = Convert.ToInt32((await LocalStorage.GetStringAsync("zlecenie_ile_widocznych")));
            if (iloscRekordow == 0) iloscRekordow = 6;

            _TypZamowienia = new List<TypZamowienia>
            {
                new TypZamowienia {Value = "Pomiary", Name = "Pomiary", Role = "Oferta"},
                new TypZamowienia {Value = "Oferta", Name = "Oferta", Role = "Oferta"},
                new TypZamowienia {Value = "Zlec.Pomiarów", Name = "Zlec.Pomiarów", Role = "Oferta"},
                new TypZamowienia {Value = "Zlecenie", Name = "Zlecenie", Role = "Zamówienie"},
                new TypZamowienia {Value = "Dok.Powykonawczy", Name = "Dok.Powykonawczy", Role = "Zamówienie"},
                new TypZamowienia {Value = "Zakończono", Name = "Zakończono", Role = "Zamówienie"}
            };

            zleceniaProdukcyjneWew = await Http.GetFromJsonAsync<List<ZleceniaProdukcyjneWew>>("api/ZleceniaProdukcyjneWew");

            originalzleceniaProdukcyjneWew = zleceniaProdukcyjneWew;

            if (RowIdZlecenia != null && RowIdZlecenia != "")
            {
                await editRow(RowIdZlecenia);
            }


        }
        catch (Exception ex)
        {
            Console.WriteLine($"Wystąpił błąd podczas pobierania pliku: {ex.Message}/ {ex.StackTrace}");
            zleceniaProdukcyjneWew = new List<ZleceniaProdukcyjneWew>();
        }

        if (boolAdmin || boolNowy)
        {
            if (AppState != null)
            {
                // Zmień dane w AppState
                Console.WriteLine("Dodaj Produkcyjne Wewnętrzn");
                AppState.SomeData = "Dodaj Produkcyjne Wewnętrzne";
            }
        }

        // Console.WriteLine(Layout == null ? "Layout jest null" : "Layout dostępny");
        // await base.OnInitializedAsync();

        // Powiązanie EventCallback z metodą
        if (Layout != null)
        {
            Layout.OnShowDialogAddNew = EventCallback.Factory.Create(this, ShowDialogAddNew);

            Console.WriteLine("EventCallback przypisany");
        }
        else
        {
            Console.WriteLine("Layout jest null");
        }

    }

    private async Task OnClickChange(int e)
    {
        Console.WriteLine("Zapisano ilość widocznych" + e);
        await LocalStorage.SaveStringAsync("zlecenie_ile_widocznych", e.ToString());

    }

    private void OnSelectedItemChangedHandler(TypZamowienia value)
    {
        try
        {
            Console.WriteLine($"selected: ${value?.Name}");

            if (value?.Name == "Zlecenie")
            {
                czyZamowienie = false;
                if (zlecenie.DataGotowosci == DateTime.MinValue) zlecenie.DataGotowosci = DateTime.Now;
            }
            else
            {
                czyZamowienie = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Wystąpił błąd podczas pobierania pliku: {ex.Message}/ {ex.StackTrace}");
            zleceniaProdukcyjneWew = new List<ZleceniaProdukcyjneWew>();
        }
    }

    private async Task OnSelectedItemChangedHandlerFiltr(TypZamowienia value)
    {
        try
        {
            Console.WriteLine($"Selected: {value?.Name}");

            if (!string.IsNullOrEmpty(filtrTypZamowienia))
            {
                // Filter the list of orders based on the filter value
                zleceniaProdukcyjneWew = originalzleceniaProdukcyjneWew
                    .Where(f => f.TypZamowienia.Contains(filtrTypZamowienia, StringComparison.OrdinalIgnoreCase))
                    .ToList();
            }
            else
            {
                // If no filter value is provided, fetch all orders
                zleceniaProdukcyjneWew = await Http.GetFromJsonAsync<List<ZleceniaProdukcyjneWew>>("api/ZleceniaProdukcyjneWew");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while fetching the data: {ex.Message}\n{ex.StackTrace}");
            zleceniaProdukcyjneWew = new List<ZleceniaProdukcyjneWew>();

            try
            {
                // Retry fetching the data from the API
                zleceniaProdukcyjneWew = await Http.GetFromJsonAsync<List<ZleceniaProdukcyjneWew>>("api/ZleceniaProdukcyjneWew");
            }
            catch (Exception innerEx)
            {
                Console.WriteLine($"Retry failed: {innerEx.Message}\n{innerEx.StackTrace}");
            }
        }
    }

    private void DataProdUstaw()
    {
        if (zlecenie.Id == 0)
        {
            zlecenie.DataProdukcji = DateTime.Now.AddDays(8 * 7);//8 tygodni * 7 dni;
        }
        else
        {
            zlecenie.DataProdukcji = zlecenie.DataGotowosci.AddDays(8 * 7);//8 tygodni * 7 dni;
        }

        bool IsWorkingDay(DateTime date)
        {
            return date.DayOfWeek != DayOfWeek.Saturday && date.DayOfWeek != DayOfWeek.Sunday;
        }

        if (!IsWorkingDay(zlecenie.DataProdukcji))
        {
            zlecenie.DataProdukcji = zlecenie.DataProdukcji.AddDays((DayOfWeek.Monday - zlecenie.DataProdukcji.DayOfWeek + 7) % 7);
        }

        zlecenie.DataWysylki = zlecenie.DataGotowosci.AddDays(12 * 7 - 5);
        zlecenie.DataMontazu = zlecenie.DataGotowosci.AddDays(12 * 7);

    }

    private async Task LoadFiles(string rowId)
    {
        try
        {
            var response = await Http.GetAsync($"api/FileUploadZlec/files/{rowId}");

            if (response.IsSuccessStatusCode)
            {
                var fileList = await response.Content.ReadFromJsonAsync<List<PlikiZlecenProdukcyjnych>>();
                if (fileList != null)
                {
                    // Filtruj pliki, jeśli użytkownik nie jest administratorem
                    if (!boolAdmin)
                    {
                        fileList = fileList.Where(p => p.WidocznyDlaWszystkich).ToList();
                    }

                    // Upewnij się, że pole Uwagi nie jest null lub pusty string
                    foreach (var itm in fileList)
                    {
                        itm.Uwagi ??= string.Empty;
                    }

                    pliki = fileList;
                }
                else
                {
                    pliki = new List<PlikiZlecenProdukcyjnych>();
                }
            }
            else
            {
                // Obsługa błędów dla przypadków nieudanych odpowiedzi
                if (response.StatusCode == HttpStatusCode.NotFound)
                {
                    // Obsługa przypadku 404 Not Found
                    Console.Error.WriteLine($"404 Not Found: The file with RowId {rowId} was not found.");
                }
                else
                {
                    // Obsługa innych błędów
                    Console.Error.WriteLine($"Error loading files: {response.StatusCode} - {response.ReasonPhrase}");
                }
                pliki = new List<PlikiZlecenProdukcyjnych>();
            }
        }
        catch (HttpRequestException httpRequestException)
        {
            // Obsługa błędów połączenia HTTP
            Console.Error.WriteLine($"HTTP request error: {httpRequestException.Message}");
            pliki = new List<PlikiZlecenProdukcyjnych>();
        }
        catch (JsonException jsonException)
        {
            // Obsługa błędów deserializacji JSON
            Console.Error.WriteLine($"JSON parsing error: {jsonException.Message}");
            pliki = new List<PlikiZlecenProdukcyjnych>();
        }
        catch (Exception ex)
        {
            // Globalna obsługa innych wyjątków
            Console.Error.WriteLine($"An unexpected error occurred while loading files: {ex.Message}");
            pliki = new List<PlikiZlecenProdukcyjnych>();
        }
    }



    private async Task DownloadFile(string fileUrl)
    {
        var filePath = Path.Combine("uploads_zlecenia", fileUrl); // Tworzy ścieżkę do pliku w folderze uploads

        try
        {
            using (var httpClient = new HttpClient())
            {
                // Pobierz zawartość pliku jako bajty
                var response = await httpClient.GetAsync(fileUrl);

                // if (response.IsSuccessStatusCode)
                // {
                //     // Uzyskaj zawartość pliku jako bajty
                //     var fileBytes = await response.Content.ReadAsByteArrayAsync();

                //     // Tutaj możesz zrobić coś z tymi bajtami, np. zapisać je do pliku lokalnego
                //     // Przykład: Zapisz plik na dysku
                //     //var fileName = "nazwa_pobranego_pliku.pdf"; // Przykładowa nazwa pliku
                //     //var filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), fileName);

                //     File.WriteAllBytes(filePath, fileBytes);

                //     Console.WriteLine($"Plik został pobrany i zapisany: {filePath}");
                // }
                // else
                // {
                //     Console.WriteLine("Nie udało się pobrać pliku.");
                // }

                // Pobierz dane pliku
                var fileData = await response.Content.ReadAsByteArrayAsync();

                if (response != null)
                {
                    await JSRuntime.InvokeVoidAsync("saveByteArray", fileData, filePath);
                    //await JSRuntime.InvokeVoidAsync("saveByteArray", response, fileName);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Wystąpił błąd podczas pobierania pliku: {ex.Message}/ {ex.StackTrace}");
            Console.WriteLine(filePath);
        }
    }

    private async Task deleteFile(long id, string fileUrl, string roIdZlec)
    {
        czekajNaUsuniecie = true;
        // Step 1: Attempt to delete the record in the database
        var response = await Http.DeleteAsync($"api/FileUploadZlec/{id}");

        if (response.IsSuccessStatusCode)
        {
            // If record deletion is successful, proceed to delete the file
            var fileResponse = await Http.DeleteAsync(fileUrl);

            if (fileResponse.IsSuccessStatusCode)
            {
                // Remove the order from the list only after the file is successfully deleted
                var zlecenie = zleceniaProdukcyjneWew.FirstOrDefault(z => z.Id == id);
                if (zlecenie != null)
                {
                    zleceniaProdukcyjneWew.Remove(zlecenie);
                    await _message.Success("Zapis inf. i plik usunięto!");
                }
            }
            else
            {
                // If file deletion fails, log the error
                Console.WriteLine("Błąd podczas usuwania pliku.");
                await _message.Error("Błąd podczas usuwania pliku.");
            }

            await LoadFiles(roIdZlec);
        }
        else
        {
            // If record deletion fails, log the error
            Console.WriteLine("Błąd podczas usuwania zapis inf..");
            await _message.Error("Błąd podczas usuwania zapis inf..");
        }

        czekajNaUsuniecie = false;
    }

    private async Task FileEdit(ZleceniaProdukcyjneWew row)
    {
        pliki = new List<PlikiZlecenProdukcyjnych>();

        zlecenie = new ZleceniaProdukcyjneWew();

        if (zleceniaProdukcyjneWew == null) return;

        var listOfData = zleceniaProdukcyjneWew.Where(d => d.Id == row.Id).ToArray();

        // Pobierz zlecenie na podstawie indeksu wiersza
        if (listOfData != null && listOfData.Count() > 0)
        {
            zlecenie = listOfData[0];

            await LoadFiles(zlecenie.RowId);

            await ShowDialogFile();
        }

    }

    private void DodajKantowke(ZleceniaProdukcyjneWew row)
    {
        navigationManager.NavigateTo($"/Kantowka-do-zlecen/{row.RowId}");
    }

    private async Task DodajCzasyWykonaia(ZleceniaProdukcyjneWew row)
    {
        rowIdClick = row.RowId == null ? "" : row.RowId;

        Console.WriteLine($"rowIdClick: {rowIdClick}");

        await Task.Delay(1);
        displayTWZ = "block";
        await Task.Delay(50);
        classShowTWZ = "show";
        StateHasChanged();
    }

    bool blokuDwuKlik = false;
    private async Task HandleSubmit()
    {

        if (_visible == false || blokuDwuKlik) return;

        blokuDwuKlik = true;

        HttpResponseMessage response;

        _visible = false;

        if (zlecenie.Id == 0)
        {
            response = await Http.PostAsJsonAsync("api/ZleceniaProdukcyjneWew", zlecenie);

            zleceniaProdukcyjneWew = await Http.GetFromJsonAsync<List<ZleceniaProdukcyjneWew>>("api/ZleceniaProdukcyjneWew");
        }
        else
        {
            response = await Http.PutAsJsonAsync($"api/ZleceniaProdukcyjneWew/{zlecenie.Id}", zlecenie);

            if (zleceniaProdukcyjneWew != null) originalzleceniaProdukcyjneWew = zleceniaProdukcyjneWew.DeepCopyList();
        }

        if (response.IsSuccessStatusCode)
        {
            if (zlecenie.Id == 0)
            {
                //  zleceniaProdukcyjne.Add(zlecenie); // Dodaj nowe zlecenie do listy
            }
            else
            {
                // Znajdź istniejące zlecenie i zaktualizuj je
                var index = zleceniaProdukcyjneWew.FindIndex(z => z.Id == zlecenie.Id);

                if (index != -1)
                {
                    zleceniaProdukcyjneWew[index] = zlecenie;
                }
            }

            _visible = false;
            zlecenie = new ZleceniaProdukcyjneWew(); // Zresetuj formularz

            await HideDialog();

            await _message.Success("Zlecenie zapisano!");

            StateHasChanged(); // Odśwież widok

        }
        else
        {
            // Obsługa błędów
            Console.WriteLine("Błąd podczas zapisywania zlecenia");
            await _message.Error("Błąd podczas zapisywania zlecenia");
        }

        blokuDwuKlik = false;
    }

    public async Task editRow(string row_id)
    {

        //listOfData = listOfData.Where(d => d.Id != id).ToArray();
        if (zleceniaProdukcyjneWew == null) return;

        _visible = true;

        originalzleceniaProdukcyjneWew = zleceniaProdukcyjneWew.DeepCopyList();

        zlecenie = new ZleceniaProdukcyjneWew();

        var listOfData = zleceniaProdukcyjneWew.Where(d => d.RowId == row_id).ToArray();

        // Pobierz zlecenie na podstawie indeksu wiersza
        if (listOfData != null && listOfData.Count() > 0)
        {
            cid = listOfData[0].Id;

            zlecenie = listOfData[0];

            zlecenie.OstatniaZmiana = "*Zmiana: " + DateTime.Now.ToLongDateString();

            if (string.IsNullOrEmpty(zlecenie.RowId)) zlecenie.RowId = Guid.NewGuid().ToString();

            await LoadFiles(zlecenie.RowId);

            _visible = true;

            await ShowDialog();
        }

        // Wyświetl numer zamówienia w konsoli
        Console.WriteLine(zlecenie.NumerZamowienia);

    }

    public async Task editRow(long id)
    {

        //listOfData = listOfData.Where(d => d.Id != id).ToArray();
        if (zleceniaProdukcyjneWew == null) return;

        _visible = true;

        czyZamowienie = true;

        if (zlecenie!= null && zlecenie.TypZamowienia != null)
        {
            if (zlecenie.TypZamowienia.Contains("Zlecenie")) czyZamowienie = false;
        }

        originalzleceniaProdukcyjneWew = zleceniaProdukcyjneWew.DeepCopyList();

        zlecenie = new ZleceniaProdukcyjneWew();

        var listOfData = zleceniaProdukcyjneWew.Where(d => d.Id == id).ToArray();

        // Pobierz zlecenie na podstawie indeksu wiersza
        if (listOfData != null && listOfData.Count() > 0)
        {
            cid = id;

            zlecenie = listOfData[0];

            zlecenie.OstatniaZmiana = "*Zmiana: " + DateTime.Now.ToLongDateString();

            if (string.IsNullOrEmpty(zlecenie.RowId)) zlecenie.RowId = Guid.NewGuid().ToString();

            await LoadFiles(zlecenie.RowId);

            _visible = true;

            await ShowDialog();
        }

        // Wyświetl numer zamówienia w konsoli
        Console.WriteLine(zlecenie.NumerZamowienia);

    }

    private async Task delRow(long id)
    {

        var response = await Http.DeleteAsync($"api/ZleceniaProdukcyjneWew/{id}");
        if (response.IsSuccessStatusCode)
        {
            var zlecenie = zleceniaProdukcyjneWew.FirstOrDefault(z => z.Id == id);
            if (zlecenie != null)
            {
                zleceniaProdukcyjneWew.Remove(zlecenie);
                await _message.Success("Zlecenie usunięto!");
            }
        }
        else
        {
            Console.WriteLine("Błąd podczas usuwania zlecenia.");
            await _message.Error("Błąd podczas usuwania zlecenia");
        }

    }

    public async Task HandleAddNew()
    {
        // await Task.Delay(1);
        // _visible = true;

        await HandleSubmit();
        // await HandleSubmit();
        // _visible = false;
        // await HideDialog();
    }

    public async Task HandleCancel()
    {
        _visible = false;
        await HideDialog();
    }

    public async Task HandleCloseAdd()
    {
        await HideDialog();
        await HandleSubmit();
        _visible = false;
    }

    public async Task ShowDialogAddNew()
    {
        Console.WriteLine("Metoda ShowDialogAddNew została wywołana");
        await DialogService.ShowDialogAsync("Dodaj nowe zlecenie wewnętrzne");

        _visible = true;
        zlecenie = new ZleceniaProdukcyjneWew();

        if (!string.IsNullOrEmpty(user))
        {
            zlecenie.KtoZapisal = user;
        }

        cid = -1;

        display = "block";
        await Task.Delay(50);
        classShow = "show";
        StateHasChanged();
    }

    public async Task ShowDialog()
    {
        display = "block";
        await Task.Delay(50);
        classShow = "show";
        StateHasChanged();
    }

    private async Task HideDialog()
    {
        if (cid > 0 && zleceniaProdukcyjneWew != null)
        {
            zleceniaProdukcyjneWew = originalzleceniaProdukcyjneWew;
        }

        cid = -1;

        classShow = "";
        await Task.Delay(200);
        display = "none";

        StateHasChanged();
    }
    //********************************************************************************************************************//
    public async Task ShowDialogFile()
    {
        displayFile = "block";
        await Task.Delay(50);
        classShowFile = "show";
        StateHasChanged();
    }

    private async Task HideDialogFile()
    {

        classShowFile = "";
        await Task.Delay(200);
        displayFile = "none";

        StateHasChanged();
    }
    //********************************************************************************************************************//

    private async Task HideDialogTWZ()
    {
        displayTWZ = "";
        await Task.Delay(200);
        displayTWZ = "none";

        StateHasChanged();

        rowIdClick = "";
    }

    private async Task ZmienUwage(long id, string uwaga)
    {
        var response = await Http.PostAsJsonAsync($"api/FileUploadZlec/zmien-uwage?id={id}", uwaga);
        if (response.IsSuccessStatusCode)
        {
            // Logika do aktualizacji UI, jeśli potrzebne
            var plik = pliki.FirstOrDefault(p => p.Id == id);
            if (plik != null)
            {
                plik.Uwagi = uwaga;
                plik.OstatniaZmiana = "Zmiana: " + DateTime.Now.ToLongDateString();
            }
        }
        else
        {
            // Logika do obsługi błędów
            Console.WriteLine("Błąd podczas zmiany uwagi");
        }
    }

    private async Task ZmienWidocznosc(long id, bool widocznosc)
    {
        var response = await Http.PostAsJsonAsync($"api/FileUploadZlec/zmien-widocznosc?id={id}", widocznosc);
        if (response.IsSuccessStatusCode)
        {
            // Logika do aktualizacji UI, jeśli potrzebne
            var plik = pliki.FirstOrDefault(p => p.Id == id);
            if (plik != null)
            {
                plik.WidocznyDlaWszystkich = widocznosc;
                plik.OstatniaZmiana = "Zmiana: " + DateTime.Now.ToLongDateString();
            }
        }
        else
        {
            // Logika do obsługi błędów
            Console.WriteLine("Błąd podczas zmiany uwagi");
        }
    }

    private string bladZapisuPliku = "";
    private async Task HandleSelected(InputFileChangeEventArgs e)
    {

        //NazwaRejestru = WebUtility.UrlEncode(NazwaRejestru);

        foreach (var file in e.GetMultipleFiles())
        {
            var content = new MultipartFormDataContent();

            var tmpFileName = WebUtility.UrlEncode(file.Name);

            Console.WriteLine($"api/FileUploadZlec/upload/{zlecenie.RowId}/{tmpFileName}");

            content.Add(new StreamContent(file.OpenReadStream(Int64.MaxValue)), "file", file.Name);

            var response = await Http.PostAsync($"api/FileUploadZlec/upload/{zlecenie.RowId}/{tmpFileName}", content);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseModel>();
                Console.WriteLine($"File uploaded successfully. URL: {result?.url}");
                //Dodaj akjcę zapisu do bazy danych
                //zleceniaProdukcyjne.LinkDoKartyNaSerwerze = result?.url;
            }
            else
            {
                Console.WriteLine("File upload failed.");
                bladZapisuPliku = $"Błąd przy zapisie pliku na serwerze. {response.Content.ReadAsStringAsync().Result}";

            }
        }

        await LoadFiles(zlecenie.RowId);
    }

    private async Task OnSelectionChangeProdukt(AutoCompleteOption item)
    {
        selectItemProdukt = item;

        Console.WriteLine("selectItemPowiat.Value" + selectItemProdukt.Value);

    }

    private async Task SearchProdukt()
    {

        try
        {

            var listapowiat = await Http.GetFromJsonAsync<List<string>>("/api/ZlecenieWewProdukt");

            if (listapowiat != null)
            {
                optionsProdukt = listapowiat.Select(kod => new ObjectValueProduktOption()
                    {
                        value = kod.ToString()
                    }).ToArray();

                zlecenie.NazwaProduktu = zlecenie.NazwaProduktu;

            }


        }
        catch (Exception)
        {
            Console.WriteLine("Metoda -  SearchPowiat");
        }
    }

    //await Laduj_Uprawnienia();

    private bool boolOdczyt = false;
    private bool boolZmian = false;
    private bool boolUsuniecia = false;
    private bool boolAdmin = false;
    private bool boolNowy = false;
    private string RowIdPracownika = "";
    private string? user;
    private List<UprawnieniaPracownikaViewModel>? uprawnienia;

    private async Task Laduj_Uprawnienia()
    {
        user = await LocalStorage.GetStringAsync("user");

        if (string.IsNullOrEmpty(user))
        {
            //NavigationManager.NavigateTo($"", true);
            return;
        }

        string nazwaTabeli = "ZleceniaProdukcyjneWew";

        Console.WriteLine($"api/ZwrocSatus/{user}/{nazwaTabeli}");

        try
        {
            uprawnienia = await Http.GetFromJsonAsync<List<UprawnieniaPracownikaViewModel>>($"/api/ZwrocSatus/{user}/{nazwaTabeli}");
        }
        catch (System.Net.Http.HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            Console.WriteLine("Brak danych!!!");
            await _message.Error("Brak danych - status użytkownika");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await _message.Error(ex.Message);
        }

        if (uprawnienia != null)
        {
            if (uprawnienia.Count > 0)
            {
                var znalezioneElementy = uprawnienia.Where(uprawnienie => uprawnienie.TableName == nazwaTabeli);
                Console.WriteLine("Znaleziono uprawnienia dla użytkownika: " + user + " w tabeli: " + nazwaTabeli + " ilość rekordów: " + znalezioneElementy.Count());
                if (znalezioneElementy.Any())
                {
                    var szuk = znalezioneElementy.FirstOrDefault(x => x.TableName == nazwaTabeli);
                    if (szuk != null)
                    {
                        boolOdczyt = szuk.Odczyt;
                        boolZmian = szuk.Zmiana;
                        boolUsuniecia = szuk.Usuniecie;
                        boolAdmin = szuk.Administrator;
                        boolNowy = szuk.Zapis;
                        RowIdPracownika = szuk.RowId;
                    }
                }
            }
        }
    }

    public class ResponseModel
    {
        public string? name { get; set; }
        public string? status { get; set; }
        public string? url { get; set; }
        public string? thumbUrl { get; set; }
    }

    class TypZamowienia
    {
        public string? Value { get; set; }
        public string? Name { get; set; }
        public string? Role { get; set; }
    }

    public class ObjectValueProduktOption
    {
        public string? value { get; set; }

        public override string ToString()
        {
            return $"{value}";
        }
    }

    Func<object, object, bool> CompareWith = (a, b) =>
       {
           if (a is ObjectValueProduktOption o1 && b is ObjectValueProduktOption o2)
           {
               return o1.value == o2.value;
           }
           else
           {
               return false;
           }
       };
}
