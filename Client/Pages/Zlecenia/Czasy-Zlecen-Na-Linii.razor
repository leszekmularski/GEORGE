@page "/Czasy-Zlecen-Na-Linii/{RowIdZlecenia}"
@using GEORGE.Shared.Models
@using GEORGE.Shared.ViewModels
@using GEORGE.Shared.Class
@inject HttpClient Http
@inject ModalService ModalService;
@inject ConfirmService ComfirmService;
@inject IMessageService _message
@inject NavigationManager NavigationManager
@using AntDesign
@using System.Net;
@inject IJSRuntime JSRuntime
@inject Utilities.ILocalStorage LocalStorage


@* Przyjmujemy, że lista zleceń to `zleceniaCzasNaLinieProdList` *@
<table class="table table-bordered">
    <thead>
        <tr>

            <th>#Id - Linii</th>
            <th>Linia Produkcyjna</th>
            <th>Ilość jednostek produkcyjnych potrzenych do wyk. zlecenia na linii</th>
            <th>Akcja</th>
        </tr>
    </thead>
    <tbody>
        @if (linieProdukcyjneWithCzasViewModel != null)
        {
            @foreach (var zlecenie in linieProdukcyjneWithCzasViewModel)
            {
                <tr>
                    <td>@zlecenie.IdLiniiProdukcyjnej</td>
                    <td>@zlecenie.NazwaLiniiProdukcyjnej</td>
                    <td>
                        <input type="number" class="form-control" @bind="zlecenie.CzasNaZlecenie" />
                    </td>
                    @if(boolAdmin || boolZmian)
                    {
                        <Button Icon="@IconType.Outline.Save" Style="width:55px" @onclick="() => SaveChanges(zlecenie)"></Button>
                    }
                </tr>
            }
            @if (jakiBlad != "")
            {
                <td colspan="4">
                    <Alert Type="@AlertType.Error"
                           Message="Błąd!!"
                           Description="@jakiBlad"
                           ShowIcon="true" />
                </td>
            }
        }
    </tbody>
</table>
@if (NowaStronaRazor)
{
    <Button class="btn-back" OnClick="GoBack">Wróć do poprzedniej strony</Button>
}

@code {
    [Parameter]
    public string? RowIdZlecenia { get; set; }

    [Parameter]
    public bool NowaStronaRazor { get; set; } = true;

    private List<LinieProdukcyjneWithCzasViewModel>? linieProdukcyjneWithCzasViewModel;

    private string jakiBlad = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Laduj_Uprawnienia();
            // Upewnij się, że RowIdZlecenia jest prawidłowy i nie jest pusty
            if (string.IsNullOrEmpty(RowIdZlecenia))
            {
                Console.WriteLine("RowIdZlecenia is null or empty.");
                return;
            }

            // Sprawdź URL API
            var url = $"api/ZleceniaCzasNaLinieProd/rowid/{RowIdZlecenia}/";

            Console.WriteLine($"Fetching data from: {url}");

            // Wywołaj API i przypisz wynik do zmiennej
            linieProdukcyjneWithCzasViewModel = await Http.GetFromJsonAsync<List<LinieProdukcyjneWithCzasViewModel>>(url);

            // Sprawdź, czy dane zostały poprawnie załadowane
            if (linieProdukcyjneWithCzasViewModel == null)
            {
                Console.WriteLine("No data returned from API.");
            }
            else
            {
                Console.WriteLine($"Data loaded successfully. Number of items: {linieProdukcyjneWithCzasViewModel.Count}");
            }
        }
        catch (HttpRequestException httpEx)
        {
            Console.WriteLine($"HTTP error occurred: {httpEx.Message}");
        }
        catch (NotSupportedException notSupEx)
        {
            Console.WriteLine($"Unsupported content type: {notSupEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private async Task SaveChanges(LinieProdukcyjneWithCzasViewModel czaszlecenie)
    {
        try
        {
            // Send the updated data to the API
            var response = await Http.PutAsJsonAsync($"api/ZleceniaCzasNaLinieProd/{RowIdZlecenia}/", czaszlecenie);

            if (response.IsSuccessStatusCode)
            {
                // Handle success (e.g., show a message or update the UI)
                Console.WriteLine("Zmiany zostały zapisane pomyślnie.");
            }
            else
            {
                // Handle failure (e.g., show an error message)
                Console.WriteLine("Nie udało się zapisać zmian.");
                jakiBlad = "Nie udało się zapisać zmian.";
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions (e.g., log the error or show an error message)
            Console.WriteLine($"Błąd przy zapisie: {ex.Message}");
            jakiBlad = $"Błąd przy zapisie: {ex.Message}";
        }
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    //await Laduj_Uprawnienia();
    //@inject Utilities.ILocalStorage LocalStorage
    //@inject HttpClient Http
    //@using System.Net;

    private bool boolOdczyt = false;
    private bool boolZmian = false;
    private bool boolUsuniecia = false;
    private bool boolAdmin = false;
    private string RowIdPracownika = "";
    private string? user;
    private List<UprawnieniaPracownikaViewModel>? uprawnienia;

    private async Task Laduj_Uprawnienia()
    {
        user = await LocalStorage.GetStringAsync("user");

        if (string.IsNullOrEmpty(user))
        {
            //NavigationManager.NavigateTo($"", true);
            return;
        }
        
        string nazwaTabeli = "LinieProdukcyjne";

        Console.WriteLine($"api/ZwrocSatus/{user}/{nazwaTabeli}");

        try
        {
            uprawnienia = await Http.GetFromJsonAsync<List<UprawnieniaPracownikaViewModel>>($"/api/ZwrocSatus/{user}/{nazwaTabeli}");
        }
        catch (System.Net.Http.HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            Console.WriteLine("Brak danych!!!");
            await _message.Error("Brak danych - status użytkownika");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await _message.Error(ex.Message);
        }

        if (uprawnienia != null)
        {
            if (uprawnienia.Count > 0)
            {
                var znalezioneElementy = uprawnienia.Where(uprawnienie => uprawnienie.TableName == nazwaTabeli);
                Console.WriteLine("Znaleziono uprawnienia dla użytkownika: " + user + " w tabeli: " + nazwaTabeli + " ilość rekordów: " + znalezioneElementy.Count());
                if (znalezioneElementy.Any())
                {
                    var szuk = znalezioneElementy.FirstOrDefault(x => x.TableName == nazwaTabeli);
                    if (szuk != null)
                    {
                        boolOdczyt = szuk.Odczyt;
                        boolZmian = szuk.Zmiana;
                        boolUsuniecia = szuk.Usuniecie;
                        boolAdmin = szuk.Administrator;
                        RowIdPracownika = szuk.RowId;
                    }
                }
            }
        }
    }
}