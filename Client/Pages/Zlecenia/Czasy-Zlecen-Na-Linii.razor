@page "/Czasy-Zlecen-Na-Linii/{RowIdZlecenia}"
@using GEORGE.Shared.Models
@using GEORGE.Shared.ViewModels
@using GEORGE.Shared.Class
@inject HttpClient Http
@inject ModalService ModalService;
@inject ConfirmService ComfirmService;
@inject IMessageService _message
@inject NavigationManager NavigationManager
@using AntDesign
@using System.Net;
@inject IJSRuntime JSRuntime
@inject Utilities.ILocalStorage LocalStorage
@inject INotificationService _notice

<Tabs Animated @bind-ActiveKey="@activeKey" OnChange="ShowData">
    <TabPane Tab="Czasy na liniach" Key="1">
        <Checkbox @bind-Checked="isCheckedZastapPozycje">Zastąp pozycje przed wklejeniem</Checkbox>
        <table class="table table-bordered">
            <thead>
                <tr>

                    <th>#Id - Linii</th>
                    <th>Linia Produkcyjna</th>
                    <th>Ilość jednostek produkcyjnych potrzenych do wyk. zlecenia na linii</th>
                    <th>Akcja</th>
                </tr>
            </thead>
            <tbody>

                @if (linieProdukcyjneWithCzasViewModel != null)
                {
                    @foreach (var zlecenie in linieProdukcyjneWithCzasViewModel)
                    {
                        <tr>
                            <td>@zlecenie.IdLiniiProdukcyjnej</td>
                            <td>@zlecenie.NazwaLiniiProdukcyjnej</td>
                            <td>
                                <div class="d-flex align-items-center">
                                    @if (boolAdmin || boolZmian || boolNowy)
                                    {
                                        <input type="number" class="form-control" style="width:40%" @bind="zlecenie.CzasNaZlecenie" />
                                        <button style="font-size:0.8em; width:60%; height:38px" @onclick="() => PasteStolcad(zlecenie)">Wklej czasy z <br /> STOLCAD [PLANOWANIE]</button>
                                    }
                                    else
                                    {
                                        <input type="number" class="form-control" style="width:100%" @bind="zlecenie.CzasNaZlecenie" />
                                    }
                                </div>
                            </td>
                            @if (boolAdmin || boolZmian || boolNowy)
                            {
                                <Button Icon="@IconType.Outline.Save" Style="width:55px" @onclick="() => SaveChanges(zlecenie)"></Button>
                            }
                        </tr>
                    }
                    @if (jakiBlad != "")
                    {
                    <td colspan="4">
                        <Alert Type="@AlertType.Error"
                               Message="Błąd!!"
                               Description="@jakiBlad"
                               ShowIcon="true" />
                    </td>
                    }
                }

            </tbody>
        </table>
    </TabPane>
    <TabPane Tab="Dane do zlecenia" Key="2">
        @if (wykazPozycjiDoZlecenia != null)
        {
            <Table DataSource="@wykazPozycjiDoZlecenia" PageSize="5" Size="TableSize.Small" ScrollY="290px">
                <PropertyColumn Property="c=>c.Nr" Title="Lp" />
                <PropertyColumn Property="c=>c.System" />
                <PropertyColumn Property="c=>c.Kolor" />
                <PropertyColumn Property="c=>c.Szerokosc" Title="Szerokość" />
                <PropertyColumn Property="c=>c.Wysokosc" Title="Wysokość" />
                <PropertyColumn Property="c=>c.IloscOkien" Title="Ilość"/>
                <PropertyColumn Property="c=>c.Ciezar1Sztuki" Title="Ciężar 1 sztuki"/>
                <PropertyColumn Property="c=>c.JednostkiOkienDoPoz" Title="Jed. produkcyjne" />
                <PropertyColumn Property="c=>c.Iloscskrzydel" Title="Ilość skrzydel" />
            </Table>

            @if (boolAdmin || boolUsuniecia)
            {
                <Popconfirm Title="Czy chcesz usunąć dane do zlecenia?"
                            OnConfirm="()=> DellAllData()"
                            OkText="Tak"
                            CancelText="Nie">
                    <a style="color:red">Usuń wszystkie dane</a>
                </Popconfirm>
                <label style="inset-inline-start:inherit; padding-left:255px">Ilość sztuk: @iloszSztukPoz</label>
            }
        }
        else
        {
            <h2>Czekaj na załadowanie danych...</h2>
        }
    </TabPane>
</Tabs>



@if (NowaStronaRazor)
{
    <Button class="btn-back" OnClick="GoBack">Wróć do poprzedniej strony</Button>
}

@code {
    [Parameter]
    public string? RowIdZlecenia { get; set; }

    [Parameter]
    public bool NowaStronaRazor { get; set; } = true;

    [Inject] private AppState AppState { get; set; } = default!;

    private List<LinieProdukcyjneWithCzasViewModel>? linieProdukcyjneWithCzasViewModel;

    private List<PozDoZlecen>? wykazPozycjiDoZlecenia;

    private string jakiBlad = "";

    string activeKey { get; set; } = "1";

    int iloszSztukPoz = 0;

    private bool isCheckedZastapPozycje = true;

    protected override async Task OnInitializedAsync()
    {
        if (AppState != null)
        {
            AppState.SomeData = "";
        }

        try
        {
            await Laduj_Uprawnienia();

            if (string.IsNullOrEmpty(RowIdZlecenia))
            {
                Console.WriteLine("RowIdZlecenia is null or empty.");
                return;
            }

            // Sprawdź URL API
            var url = $"api/ZleceniaCzasNaLinieProd/rowid/{RowIdZlecenia}/";

            // Console.WriteLine($"Fetching data from: {url}");

            // Wywołaj API i przypisz wynik do zmiennej
            linieProdukcyjneWithCzasViewModel = await Http.GetFromJsonAsync<List<LinieProdukcyjneWithCzasViewModel>>(url);

            // Sprawdź, czy dane zostały poprawnie załadowane
            if (linieProdukcyjneWithCzasViewModel == null)
            {
                Console.WriteLine("No data returned from API.");
            }
            else
            {
                Console.WriteLine($"Data loaded successfully. Number of items: {linieProdukcyjneWithCzasViewModel.Count}");
            }
        }
        catch (HttpRequestException httpEx)
        {
            Console.WriteLine($"HTTP error occurred: {httpEx.Message}");
        }
        catch (NotSupportedException notSupEx)
        {
            Console.WriteLine($"Unsupported content type: {notSupEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    public async Task ShowData()
    {
        if (activeKey != "2") return;

        wykazPozycjiDoZlecenia = await Http.GetFromJsonAsync<List<PozDoZlecen>>($"api/PozWZleceniu/GetDaneDoZlecenia/{RowIdZlecenia}");

        if (wykazPozycjiDoZlecenia != null) iloszSztukPoz = wykazPozycjiDoZlecenia.Sum(x => x.IloscOkien);

        StateHasChanged();
    }
    private async Task DellAllData()
    {
        var deleteResponse = await Http.DeleteAsync($"api/PozWZleceniu/rowid/{RowIdZlecenia}");
        if (!deleteResponse.IsSuccessStatusCode)
        {
            _ = _notice.Error(new()
                {
                    Message = "Błąd podczas usuwania",
                    Description = $"Nie udało się usunąć istniejących danych dla RowIdZlecenia: {RowIdZlecenia}. Kod odpowiedzi: {deleteResponse.StatusCode}",
                    Placement = NotificationPlacement.BottomLeft
                });
            return; // Opcjonalnie przerwij proces
        }
        else
        {
            _ = _notice.Success(new()
                {
                    Message = "W zleceniu",
                    Description = $"Usunołem wszytkie pozycje!",
                    Placement = NotificationPlacement.BottomLeft
                });
        }
    }

    private async Task PasteStolcad(LinieProdukcyjneWithCzasViewModel czaszlecenie)
    {
        try
        {
            // Pobranie danych ze schowka
            var clipboardText = await JSRuntime.InvokeAsync<string>("navigator.clipboard.readText");

            // Podział danych na poszczególne linie
            var lines = clipboardText.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);

            var list = new List<PozDoZlecen>();

            foreach (var line in lines.Skip(1)) // Pomiń pierwszy wiersz nagłówków
            {
                var values = line.Split('\t'); // Zakładam, że dane są oddzielone tabulacjami

                if (values.Length < 6) continue; // Sprawdzenie, czy linia ma wystarczającą liczbę kolumn

                var pozDoZlecen = new PozDoZlecen
                    {
                        RowIdZlecenia = RowIdZlecenia,
                        RowIdLiniiProdukcyjnej = czaszlecenie.RowIdLinieProdukcyjne,
                        Nr = float.Parse(values[1].Replace(".", ",")),
                        IloscOkien = int.Parse(values[2]),
                        JednostkiOkienDoPoz = float.Parse(values[4].Replace(".", ",")) / int.Parse(values[2]),
                        JednostkiOkienSumaDoPoz = float.Parse(values[4].Replace(".", ",")),
                        JednostkiOkienDoPozZrobione = float.Parse(values[5].Replace(".", ",")),
                        Szerokosc = float.Parse(values[6].Replace(".", ",")),
                        Wysokosc = float.Parse(values[7].Replace(".", ",")),
                        System = values[8].Trim(),
                        Technologia = values[9].Trim(),
                        Kolor = values[10].Trim(),
                        Ciezar1Sztuki = float.Parse(values[11].Replace(".", ",")),
                        Iloscskrzydel = int.Parse(values[12]),
                        Szyba = values[13].Trim(),
                    };

                list.Add(pozDoZlecen);
            }

            if (list.Any() && isCheckedZastapPozycje)
            {

                // Usunięcie istniejących danych
                var deleteResponse = await Http.DeleteAsync($"api/PozWZleceniu/rowid/{RowIdZlecenia}");

                if (!deleteResponse.IsSuccessStatusCode)
                {
                    _ = _notice.Error(new()
                        {
                            Message = $"Błąd podczas usuwania {DateTime.Now}",
                            Description = $"Nie udało się usunąć istniejących danych dla RowIdZlecenia: {RowIdZlecenia}. Kod odpowiedzi: {deleteResponse.StatusCode}",
                            Placement = NotificationPlacement.BottomLeft
                        });
                    return; // Przerwij proces, jeśli usuwanie się nie powiodło
                }
            }

            // Wysłanie każdego elementu listy do serwera
            foreach (var item in list)
            {
                var response = await Http.PostAsJsonAsync("api/PozWZleceniu", item);

                if (!response.IsSuccessStatusCode)
                {
                    // Obsługa błędów
                    _ = _notice.Error(new()
                        {
                            Message = "Błąd podczas zapisu",
                            Description = $"Nie udało się zapisać elementu z Nr: {item.Nr}. Kod odpowiedzi: {response.StatusCode}",
                            Placement = NotificationPlacement.BottomLeft
                        });
                    return; // Przerwij proces, jeśli zapis się nie powiódł
                }
            }

            var suma = list.Sum(f => f.JednostkiOkienSumaDoPoz);

            _ = _notice.Success(new()
                {
                    Message = "Załadowałem i zapisałem dane ze schowka.",
                    Description = $"Ilość pozycji: {list.Count()} Suma wszystkich jednostek: {suma}",
                    Placement = NotificationPlacement.BottomLeft
                });

            if (czaszlecenie != null)
            {
                if (isCheckedZastapPozycje)
                {
                    czaszlecenie.CzasNaZlecenie = (int)Math.Ceiling(suma);
                }
                else
                {
                    czaszlecenie.CzasNaZlecenie += (int)Math.Ceiling(suma);
                }
                await SaveChanges(czaszlecenie);
            }
            else
            {
                Console.WriteLine($"Nie zmieniłem czasu wykonania zlecenia IdLinii:{czaszlecenie.RowIdLinieProdukcyjne}");
            }

        }
        catch (Exception ex)
        {
            _ = _notice.Error(new()
                {
                    Message = ex.Message,
                    Description = ex.StackTrace,
                    Placement = NotificationPlacement.BottomLeft
                });
        }
    }


    private async Task SaveChanges(LinieProdukcyjneWithCzasViewModel czaszlecenie)
    {
        try
        {
            // Send the updated data to the API
            var response = await Http.PutAsJsonAsync($"api/ZleceniaCzasNaLinieProd/{RowIdZlecenia}/", czaszlecenie);

            if (response.IsSuccessStatusCode)
            {
                // Handle success (e.g., show a message or update the UI)
                Console.WriteLine("Zmiany zostały zapisane pomyślnie.");
            }
            else
            {
                // Handle failure (e.g., show an error message)
                Console.WriteLine("Nie udało się zapisać zmian.");
                jakiBlad = "Nie udało się zapisać zmian.";
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions (e.g., log the error or show an error message)
            Console.WriteLine($"Błąd przy zapisie: {ex.Message}");
            jakiBlad = $"Błąd przy zapisie: {ex.Message}";
        }
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    //await Laduj_Uprawnienia();
    //@inject Utilities.ILocalStorage LocalStorage
    //@inject HttpClient Http
    //@using System.Net;

    private bool boolOdczyt = false;
    private bool boolZmian = false;
    private bool boolUsuniecia = false;
    private bool boolAdmin = false;
    private bool boolNowy = false;
    private string RowIdPracownika = "";
    private string? user;
    private List<UprawnieniaPracownikaViewModel>? uprawnienia;

    private async Task Laduj_Uprawnienia()
    {
        user = await LocalStorage.GetStringAsync("user");

        if (string.IsNullOrEmpty(user))
        {
            //NavigationManager.NavigateTo($"", true);
            return;
        }

        string nazwaTabeli = "ZleceniaCzasNaLinieProd";

        Console.WriteLine($"api/ZwrocSatus/{user}/{nazwaTabeli}");

        try
        {
            uprawnienia = await Http.GetFromJsonAsync<List<UprawnieniaPracownikaViewModel>>($"/api/ZwrocSatus/{user}/{nazwaTabeli}");
        }
        catch (System.Net.Http.HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            Console.WriteLine("Brak danych!!!");
            await _message.Error("Brak danych - status użytkownika");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await _message.Error(ex.Message);
        }

        if (uprawnienia != null)
        {
            if (uprawnienia.Count > 0)
            {
                var znalezioneElementy = uprawnienia.Where(uprawnienie => uprawnienie.TableName == nazwaTabeli);
                Console.WriteLine("Znaleziono uprawnienia dla użytkownika: " + user + " w tabeli: " + nazwaTabeli + " ilość rekordów: " + znalezioneElementy.Count());
                if (znalezioneElementy.Any())
                {
                    var szuk = znalezioneElementy.FirstOrDefault(x => x.TableName == nazwaTabeli);
                    if (szuk != null)
                    {
                        boolOdczyt = szuk.Odczyt;
                        boolZmian = szuk.Zmiana;
                        boolUsuniecia = szuk.Usuniecie;
                        boolAdmin = szuk.Administrator;
                        boolNowy = szuk.Zapis;
                        RowIdPracownika = szuk.RowId;

                        Console.WriteLine($"{boolAdmin} || {boolZmian} || {boolNowy}");
                    }
                }
            }
        }
    }
}