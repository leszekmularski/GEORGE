@page "/FrappeGantt/{numerSel?}"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IMessageService _message
@inject IConfirmService _confirmService
@inject ModalService ModalService
@inject ConfirmService ComfirmService
@using System.Text.Json
@using GEORGE.Shared.ViewModels
@using GEORGE.Shared.Models
@using GEORGE.Shared.Class
@using Microsoft.JSInterop
@using System.Text.Json.Serialization
@using System.Threading.Tasks
@using AntDesign
@using System.Globalization

<!DOCTYPE html>
<html>
<head>
    <title>GEORGE Planowania produkcji GANTT</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta charset="utf-8" />
    <link rel="stylesheet" type="text/css" href="../dist/frappe-gantt.css" />
    <script type="text/javascript" src="../dist/moment.min.js"></script>
    <script type="text/javascript" src="../dist/snap.svg-min.js"></script>
    <script src="../Gantt/JFrappeGantt.js"></script>
    <script type="text/javascript" src="../dist/frappe-gantt.js"></script>

    <style>
        .container {
            width: 95%;
            margin: 0 auto;
            position: sticky; /* Upewnij się, że nagłówek jest sticky */
        }
        /* custom class */
        .gantt .bar-milestone .bar {
            fill: tomato;
        }

        /* custom class */
        .gantt .bar-secmilestone .bar {
            fill: cadetblue;
        }


        .heading {
            text-align: center;
        }

        .gantt-target.dark {
            background-color: #252525;
        }

        .grid-background {
            background-color: blue;
        }


        /* Resetowanie stylów dla table, tr, th */
        table, tr, th {
            all: initial;
            /* Można także użyć unset lub none, w zależności od potrzeb */
        }

    </style>

</head>
<body>
    <Spin Spinning=loading>
        @if (!ladujDane || rodzajeLinieProdukcyjne == null)
        {
            <Button Style="width:100%; background-color: indigo;" Type="@ButtonType.Primary" Icon="@IconType.Outline.Dashboard" OnClick="BazaPobierz">
                Zaczekaj na załadowanie danych ... lub kliknij w przycisk aby załadować ponownie
            </Button>
        }

        <div style="width:40%">
            @if (rodzajeLinieProdukcyjne != null)
            {
                <label>Wybierz linię produkcyjną</label>
                <Select TItem="LinieProdukcyjne" TItemValue="string" DataSource="@rodzajeLinieProdukcyjne" @bind-Value="@_selectedValueGantt"
                        LabelName="@nameof(LinieProdukcyjne.NazwaLiniiProdukcyjnej)" ValueName="@nameof(LinieProdukcyjne.RowId)"
                        Placeholder="Wybierz linię produkcyjną" DefaultActiveFirstOption="false" EnableSearch
                        OnSelectedItemChanged="OnSelectedItemChangedHandlerGantt">
                </Select>
            }
        </div>
        <Divider></Divider>
        <section class="section section-padding-top section-padding-bottom">
            <div class='container'>
                <Layout Style="background-color: white;">
                    <Header Style="background-color: lightblue;">
                        <h7 class="button-container">

                            <AntDesign.TextArea ReadOnly Value="@(click_task)" Style="width:25%; height:65px; font-size:10px; background-color: lightblue;" />
          
                            <Button class="btn-detail" OnClick="() => AddNewZlec()">Dodaj zlecenie do planu</Button>
                            <Button class="btn-detail" OnClick="() => OpenDetailModal()">Idź do zlecenia</Button>
                            <Button class="btn-refresh" Icon="@IconType.Outline.Delete" OnClick="@(async ()=> { await DelTask(ConfirmButtons.YesNo); })"></Button>
                            <Button class="btn-refresh" Icon="@IconType.Outline.Reload" OnClick="RefreshData"></Button>
                            <Button type="button" class="btn btn-sm btn-light" Icon="@IconType.Outline.Save" @onclick="SaveView"></Button>
                            <Button class="btn-back" OnClick="GoBack">Wróć do poprzedniej strony</Button>
                        </h7>
                    </Header>
                    <layout>
                        <content>
                                <div id="gantt-container">
                                    <svg id="gantt" style="overflow: scroll"></svg>
                                </div>
                            <br />
                        </content>
                    </layout>
                    <Footer>
                        <div class="mx-auto mt-3 btn-group" role="group">
                            <button type="button" class="btn btn-sm btn-light" @onclick="@(async () => await ChangeView("Half Day"))">Pół dnia</button>
                            <button type="button" class="btn btn-sm btn-light" @onclick="@(async () => await ChangeView("Day"))">Dzień</button>
                            <button type="button" class="btn btn-sm btn-light" @onclick="@(async () => await ChangeView("Week"))">Tydzień</button>
                            <button type="button" class="btn btn-sm btn-light" @onclick="@(async () => await ChangeView("Month"))">Miesiąc</button>
                            &nbsp
                            <Button type="button" class="btn btn-sm btn-light" @onclick="SaveView">Zapisz zmiany</Button>
                        </div>
                    </Footer>
                </Layout>
            </div>
        </section>
    </Spin>

    <Modal Title="Dodaj nowe zlecenie" @bind-Visible="@_visible" Style="width:50%" OkText="@("Zapisz")" CancelText="@("Anuluj")" MaxBodyHeight="@("55vh")" OnOk="AddPlanEdit">
        <div>
            <p style="height: 500px;">
                Nie przypisane zlecenia
                <Select TItem="LinieProdukcyjne" TItemValue="string" DataSource="@rodzajeLinieProdukcyjne" @bind-Value="@_selectedValue"
                        LabelName="@nameof(LinieProdukcyjne.NazwaLiniiProdukcyjnej)" ValueName="@nameof(LinieProdukcyjne.RowId)"
                        Placeholder="Wybierz linię produkcyjną" DefaultActiveFirstOption="false" EnableSearch
                        OnSelectedItemChanged="OnSelectedItemChangedHandler">
                </Select>
                <div>
                    <RadioGroup @bind-Value="@_valueZlecenie" onclick="@ClicRadioGroup()">
                        <Radio Value="false">Zlecenia zewnętrzne</Radio>
                        <Radio Value="true">Zlecenia wewnętrzne</Radio>
                                   </RadioGroup>
                </div>
                @if (daneDoPlanowania == null)
                {
                    <h3>@komunikatOZleceniach</h3>
                }
                else
                {
                    <div style="padding-top:25px">
                        <Table @ref="_table" PageSize="3" DataSource="@daneDoPlanowania" Total="_total" @bind-SelectedRows="_selectedRows" RowKey="x=>x.ZleceniaProdukcyjneDto.RowId">
                            <Selection Title="Wybierz" />
                            <PropertyColumn Title="Data Rozp. Prod." Property="c=>c.PlanowanaDataRozpoczeciaProdukcji" />
                            <PropertyColumn Title="Typ dokumentu" Property="c=>c.ZleceniaProdukcyjneDto.TypZamowienia" />
                            <PropertyColumn Title="Plan. Data Rozp. Prod." Property="c=>c.ZleceniaProdukcyjneDto.DataProdukcji" />
                            <PropertyColumn Title="Klient" Property="c=>c.ZleceniaProdukcyjneDto.Klient" />
                            <PropertyColumn Title="Numer Zamowienia" Property="c=>c.ZleceniaProdukcyjneDto.NumerZamowienia" />
                            <PropertyColumn Title="Czas na wykon." Property="c=>c.DomyslnyCzasProdukcji" />
                        </Table>
                    </div>
                }
            </p>
        </div>
    </Modal>

</body>
</html>


@code {

    [Parameter]
    public string? numerSel { get; set; } = "";

    public string? DataStartStop { get; set; }

    private DateTime SDataStart;
    private DateTime SDataStop;

    private bool loading = false;
    private bool ladujDane = true;

    private bool blokuj_petle = false;


    private string click_task = "";
    private string click_RowIdZlecenia = "";

    private object? gantt;

    bool _visible = false;

    private List<object>? taskArray;

    private List<LinieProdukcyjne>? rodzajeLinieProdukcyjne;
    string? _selectedValue;
    LinieProdukcyjne? _selectedItem;

    string? _selectedValueGantt = "";//"cdc0d09a-d248-48b9-b263-f54e254d1290";
    LinieProdukcyjne? _selectedItemGantt;

    private List<DaneDoPlanowaniaViewModel>? daneDoPlanowania;

    ITable? _table;
    IEnumerable<DaneDoPlanowaniaViewModel> _selectedRows = [];
    List<DaneDoPlanowaniaViewModel> mockDb = new();

    private List<DaneDoPlanowaniaViewModel>? przefiltrowaneDaneDoPlanowania;

    int _total;

    private DotNetObjectReference<FrappeGantt>? dotNetHelper;
    //private List<PodmiotPrzypisPracownikowiViewModel>? dane_full_plan;

    private string komunikatOZleceniach = "Wybierz linię produkcyjną";

    private int wydajnoscWybranejLinii = 1;

    private bool _valueZlecenie = false;

    protected override async Task OnInitializedAsync()
    {

        loading = true;

        try
        {

            rodzajeLinieProdukcyjne = await Http.GetFromJsonAsync<List<LinieProdukcyjne>>("api/LinieProdukcyjne/");

        }
        catch (Exception ex)
        {
            // Obsługa błędów, np. wyświetlenie komunikatu o błędzie
            Console.WriteLine($"Wystąpił błąd (OnInitializedAsync): {ex.Message}");
            click_task = "Sprawdź powiązania podmiot / pracownik wejdź do Moje obiekty";
        }

        loading = false;

      await _message.Loading("Załadowano dane wykresu");

    }

    private async Task AddPlanEdit()
    {
        // Konwersja wybranych elementów na ZleceniaNaLinii
        var noweZleceniaNaLinii = _selectedRows.Select(row => new ZleceniaNaLinii
            {
                RowIdLinieProdukcyjne = row.RowIdLiniiProdukcyjnej,
                RowIdZleceniaProdukcyjne = row.ZleceniaProdukcyjneDto.RowId,
                Uwagi = "Automatycznie dodane",
                DataZapisu = DateTime.Now,
                ZlecenieWewnetrzne = _valueZlecenie,
                OstatniaZmiana = "Zmiana: " + DateTime.Now.ToLongDateString()
            }).ToList();

        // Wysyłanie danych do API
        var response = await Http.PostAsJsonAsync("api/ZleceniaNaLinii", noweZleceniaNaLinii);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Zlecenia zostały dodane.");
            _visible = false; // Zamknięcie modalnego okna po dodaniu

            daneDoPlanowania = null;
        }
        else
        {
            Console.WriteLine("Wystąpił błąd podczas dodawania zleceń.");
        }
    }

    private async Task<bool> Comfirm(string message)
    {
        return await ComfirmService.Show(message, "Confirm", ConfirmButtons.YesNo, ConfirmIcon.Warning) == ConfirmResult.Yes;
    }

    private async Task OnSelectedItemChangedHandlerGantt(LinieProdukcyjne value)
    {
        ladujDane = false;
        // if(dotNetHelper == null)
        //     dotNetHelper = DotNetObjectReference.Create(this);

        _selectedItemGantt = value;

        if (_selectedItemGantt != null)
        {

            wydajnoscWybranejLinii = _selectedItemGantt.DziennaZdolnoscProdukcyjna;

            Console.WriteLine($"_selectedItemGantt:{_selectedItemGantt.RowId}");

        }
        else
        {
            wydajnoscWybranejLinii = 1;
        }

        await FetchData();

        await BazaPobierz();

        ladujDane = true;
    }

    private async Task OnSelectedItemChangedHandler(LinieProdukcyjne value)
    {
        komunikatOZleceniach = "Czekaj na załadowanie danych...";

        _selectedItem = value;

        Console.WriteLine($"selected: {value?.RowId}");

        if (value?.RowId != null)
        {
            // Pobierz dane z API dla wybranego elementu
            var daneDoPlanowania = await Http.GetFromJsonAsync<List<DaneDoPlanowaniaViewModel>>($"api/ZleceniaNaLinii/GetDaneDoPlanowania/{value.RowId}/NIE");

            // Zaktualizuj stan
            this.daneDoPlanowania = daneDoPlanowania;

            if (daneDoPlanowania != null)
                this.daneDoPlanowania = daneDoPlanowania.Where(x => !x.ZlecenieWewnetrzne).ToList();

            if (daneDoPlanowania == null || daneDoPlanowania.Count == 0)
            {
                komunikatOZleceniach = "Brak DANYCH - wszystkie zlecenia są zaplanowane";
            }
            else
            {
                komunikatOZleceniach = "Wyszukano dane: " + daneDoPlanowania.Count.ToString();
            }
        }
        else
        {
            komunikatOZleceniach = "Błąd - wybierz linię produkcyjna";
        }
    }


    private async Task BazaPobierz()
    {
        try
        {
            blokuj_petle = false;

            await OnAfterRenderAsync(true);

            ladujDane = true;
        }
        catch (Exception ex)
        {
            // Obsługa błędów, np. wyświetlenie komunikatu o błędzie
            Console.WriteLine($"Wystąpił błąd (BazaPobierz-OnInitializedAsync): {ex.Message}");
            click_task = $"Wystąpił błąd (BazaPobierz-OnInitializedAsync): {ex.Message}";
        }
    }

    private async Task ClicRadioGroup()
    {
        if (this.daneDoPlanowania != null && przefiltrowaneDaneDoPlanowania != null)
        {
            this.daneDoPlanowania = przefiltrowaneDaneDoPlanowania.Where(x => x.ZlecenieWewnetrzne == _valueZlecenie).ToList();

            await Task.Delay(10);
            // Odśwież widok (jeśli używasz Blazor)
            StateHasChanged();

            Console.WriteLine($"daneDoPlanowania.Count:{this.daneDoPlanowania.Count()} _valueZlecenie:{_valueZlecenie}");
        }
    }


    [JSInvokable]
    private async Task RefreshData()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("refreshGanttData", dotNetHelper);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Obsługa błędów, np. wyświetlenie komunikatu o błędzie
            Console.WriteLine($"Wystąpił błąd (RefreshData): {ex.Message}");
        }
    }

    private async void AddNewZlec()
    {
        _visible = true;
        await Task.Delay(1);
    }

    private async void OpenDetailModal()
    {
        if (click_RowIdZlecenia == "" || przefiltrowaneDaneDoPlanowania == null)
        {
            await _message.Info("Kliknij w obiekt na wykresie");
            Console.WriteLine("Kliknij w obiekt na wykresie");
            return;
        }

        var obiektDoAktualizacji = przefiltrowaneDaneDoPlanowania
        .FirstOrDefault(dane => dane.ZleceniaProdukcyjneDto != null && dane.ZleceniaProdukcyjneDto.RowId == (click_RowIdZlecenia));

        if (obiektDoAktualizacji != null)
        {
            if (!obiektDoAktualizacji.ZlecenieWewnetrzne)
            {
                // Przekazujemy informacje o poprzedniej stronie jako parametry
                NavigationManager.NavigateTo($"/zlecenia-produkcyjne/{click_RowIdZlecenia}");
            }
            else
            {
                // Przekazujemy informacje o poprzedniej stronie jako parametry
                NavigationManager.NavigateTo($"/zlecenia-/Zlecenia-produkcyjne-wew/{click_RowIdZlecenia}");
            }
        }

        return;

    }

    public async Task DelTask(ConfirmButtons confirmButtons)
    {
        // Sprawdzenie, czy użytkownik kliknął w obiekt
        if (string.IsNullOrEmpty(click_RowIdZlecenia) || _selectedItemGantt == null)
        {
            await _message.Info("Kliknij w obiekt na wykresie, aby go usunąć.");
            click_task = "Kliknij w obiekt na wykresie, aby go usunąć.";
            return;
        }

        // Treść komunikatu i tytuł
        var content = "Czy chcesz usunąć wskazany obiekt?             Uwaga zmiany automatycznie zostaną zapisane!";
        var title = "Uwaga!!!";

        // Wyświetlenie komunikatu potwierdzającego
        var confirmResult = await _confirmService.Show(content, title, confirmButtons);

        // Sprawdzenie wyniku potwierdzenia

        if (confirmResult == ConfirmResult.No)
        {
            return;
        }

        // // Ustawienie daty
        // await UstawDatePlanowaniProdukcji(click_RowIdZlecenia);

        await UsunRekord(click_RowIdZlecenia, _selectedItemGantt.RowId);

    }

    // private async Task UstawDatePlanowaniProdukcji(string rowId)
    // {
    //     if (przefiltrowaneDaneDoPlanowania == null) return;


    //     Console.WriteLine($"test - UstawDatePlanowaniProdukcji");

    //     // Znajdź obiekt z odpowiednim RowId
    //     var obiektDoAktualizacji = przefiltrowaneDaneDoPlanowania
    //         .FirstOrDefault(dane => dane.ZleceniaProdukcyjne != null && dane.ZleceniaProdukcyjne.RowId == rowId);

    //     if (obiektDoAktualizacji != null)
    //     {
    //         try
    //         {
    //             // Pobranie danych z wykresu
    //             var gantt = await JSRuntime.InvokeAsync<object[]>("SaveGanttData");

    //             click_task = "";

    //             bool jestBlad = false;

    //             foreach (var task in gantt)
    //             {
    //                 string taskJson = task.ToString();

    //                 //  Console.WriteLine($"Original JSON: {taskJson}");

    //                 // Deserialize JSON to a model object
    //                 var updateTaskRequest = JsonSerializer.Deserialize<UpdateTaskRequest>(taskJson);

    //                 if (updateTaskRequest != null)
    //                 {
    //                     string rowIdPodmiot = updateTaskRequest.Id; // Assuming 'Id' is the 'RowIdPodmiotu'
    //                     string rowIdPracownik = "";//RowIdPracownika; // Replace with the appropriate value for 'RowIdPracownika'

    //                     //  Console.WriteLine($"updateTaskRequest: {updateTaskRequest.Start} - {updateTaskRequest.End}");
    //                     // Send PUT request to the server
    //                     var response = await Http.PutAsJsonAsync($"api/PodmiotPrzypisPracownikowi/{rowIdPodmiot}/{rowIdPracownik}/{rowId}", updateTaskRequest);

    //                     if (response.IsSuccessStatusCode)
    //                     {
    //                         Console.WriteLine($"Pomyślnie zaktualizowano zadanie o identyfikatorze id: {rowIdPodmiot}");
    //                     }
    //                     else
    //                     {
    //                         Console.WriteLine($"Nie udało się zaktualizować zadania o identyfikatorze id: {rowIdPodmiot}");
    //                         jestBlad = true;
    //                     }
    //                 }
    //             }

    //             if (jestBlad)
    //             {
    //                 await _message.Error("Zmiany nie zapisano. Sprawdź konsolę");

    //             }

    //         }
    //         catch (Exception ex)
    //         {
    //             Console.WriteLine($"Wystąpił błąd podczas aktualizacji zadania: {ex.Message}");
    //         }

    //     }

    // }

    [JSInvokable]
    private async Task UsunRekord(string rowId, string rowIdLinii)
    {
        if (przefiltrowaneDaneDoPlanowania == null) return;

        // Znajdź obiekt z odpowiednim RowId
        var obiektDoUsuniecia = przefiltrowaneDaneDoPlanowania
            .FirstOrDefault(dane => dane.ZleceniaProdukcyjneDto != null && dane.ZleceniaProdukcyjneDto.RowId == rowId && dane.RowIdLiniiProdukcyjnej == rowIdLinii);

        if (obiektDoUsuniecia != null)
        {
            // Usuń obiekt z listy
            przefiltrowaneDaneDoPlanowania.Remove(obiektDoUsuniecia);

            await InitializeFrappeGantt();

            click_task = "";
            click_RowIdZlecenia = "";

        }

    }

    [JSInvokable]
    private async Task ChangeView(string mode)
    {
        try
        {

            await JSRuntime.InvokeVoidAsync("ChangeView", mode, dotNetHelper);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Obsługa błędów, np. wyświetlenie komunikatu o błędzie
            Console.WriteLine($"Wystąpił błąd (ChangeView - OnInitializedAsync): {ex.Message}");
        }
    }


    [JSInvokable]
    public async Task SaveView()
    {

        loading = true;
        // Pobranie danych z wykresu
        var gantt = await JSRuntime.InvokeAsync<object[]>("SaveGanttData");

        click_task = "";

        bool jestBlad = false;

        foreach (var task in gantt)
        {
            string taskJson = task.ToString();

            // Console.WriteLine($"Original JSON: {taskJson}");

            // Deserialize JSON to a model object
            var updateTaskRequest = JsonSerializer.Deserialize<UpdateTaskRequest>(taskJson);

            if (updateTaskRequest != null)
            {
                string rowID = updateTaskRequest.Id.Replace("Task_0_", "").Replace("Task_1_", ""); // Assuming 'Id' is the 'RowIdZlec'

                DateTime nowaData = DateTime.ParseExact(updateTaskRequest._Start,
                "yyyy-MM-ddTHH:mm:ss.fffZ",
                CultureInfo.InvariantCulture,
                DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);


                nowaData= nowaData.AddHours(3); //Poprawka błedu JS z wartości _start 22:00


                // Console.WriteLine($"updateTaskRequest: {updateTaskRequest.Start} - {updateTaskRequest.End}");
                // Send PUT request to the server
                var response = await Http.PostAsJsonAsync($"api/ZleceniaProdukcyjne/zmien-date-produkcji?rowid={rowID}", nowaData);

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Pomyślnie zaktualizowano zadanie o identyfikatorze rowID: {rowID}");
                }
                else
                {
                    Console.WriteLine($"Nie udało się zaktualizować zadania o identyfikatorze rowID: {rowID}");
                    Console.WriteLine($"DateTime NowaData = Convert.ToDateTime({updateTaskRequest._Start})");
                    jestBlad = true;
                }
            }
        }

        if (jestBlad)
        {
            await _message.Error("Zmiany nie zapisano. Sprawdź konsolę");
            click_task = "Bład przy zapisie...";
        }
        else
        {
            await _message.Success("Zmiany zapisano");
            click_task = "Zapisano zmiany...";
        }


        click_RowIdZlecenia = "";

        loading = false;

    }

    public class UpdateTaskRequest
    {
        [JsonPropertyName("id")]
        public string? Id { get; set; }

        [JsonPropertyName("name")]
        public string? Name { get; set; }

        [JsonPropertyName("start")]
        public string? Start { get; set; }

        [JsonPropertyName("end")]
        public string? End { get; set; }

        [JsonPropertyName("progress")]
        public int Progress { get; set; }

        [JsonPropertyName("_start")]
        public string? _Start { get; set; }

        [JsonPropertyName("_end")]
        public string? _End { get; set; }

        [JsonPropertyName("_progress")]
        public int _Progress { get; set; }

    }


    [JSInvokable]
    public async Task OnClick(int taskIndex)
    {
        await Task.CompletedTask;
        var task = await JSRuntime.InvokeAsync<object>("on_click", taskIndex);

        await Task.Delay(5);

        //   click_task = task.ToString();
        if (task.ToString() == null) return;

        var taskDes = JsonSerializer.Deserialize<JsonElement>(task.ToString());

        Console.WriteLine(task.ToString());

        taskArray = new List<object>();

        foreach (var property in taskDes.EnumerateObject())
        {
            taskArray.Add(property.Value);
        }

        click_task = taskArray[1].ToString();

        click_RowIdZlecenia = taskArray[0].ToString().Replace("Task_0_", "").Replace("Task_1_", "");

        click_task += $"\r\n przed zmianą {FormatDateString(taskArray[2].ToString(), false)} do: {FormatDateString(taskArray[3].ToString(), false)} [po zmianie: {FormatDateStringMove(taskArray[4].ToString(), false)}]";

        StateHasChanged();
    }

    public string FormatDateString(string isoDateString, bool start)
    {
        // Zamiana separatora '_' na 'T' dla poprawnego parsowania
        isoDateString = isoDateString.Replace('_', 'T');

        // Parsowanie daty z formatu ISO 8601
        DateTime dateTime;
        try
        {
            dateTime = DateTime.ParseExact(isoDateString, "yyyy-MM-ddTHH:mm:ss", System.Globalization.CultureInfo.InvariantCulture);
        }
        catch (FormatException)
        {
            // Obsługa przypadku, gdy format daty jest niepoprawny
            throw new FormatException($"String '{isoDateString}' was not recognized as a valid DateTime - FormatDateString.");
        }

        // Dodawanie godzin, jeśli godzina jest większa niż 21 i jest to start
        if (dateTime.Hour > 21 && start)
        {
            dateTime = dateTime.AddHours(4);
        }

        // Formatowanie daty na żądany format
        string formattedDateString = dateTime.ToString("yyyy-MM-dd");
        return formattedDateString;
    }

    public string FormatDateStringMove(string isoDateString, bool start)
    {
        // Zamiana separatora '_' na 'T' dla poprawnego parsowania
        isoDateString = isoDateString.Replace('_', 'T');

        // Parsowanie daty z formatu ISO 8601 z milisekundami i strefą czasową
        DateTimeOffset dateTimeOffset;
        try
        {
            dateTimeOffset = DateTimeOffset.ParseExact(isoDateString, "yyyy-MM-ddTHH:mm:ss.fffK", System.Globalization.CultureInfo.InvariantCulture);
        }
        catch (FormatException)
        {
            // Obsługa przypadku, gdy format daty jest niepoprawny
            throw new FormatException($"String '{isoDateString}' was not recognized as a valid DateTime - FormatDateStringMove.");
        }

        // Konwersja do lokalnego czasu (jeśli potrzebne)
        DateTime dateTime = dateTimeOffset.LocalDateTime;

        // Dodawanie godzin, jeśli godzina jest większa niż 21 i jest to start
        if (dateTime.Hour > 21 && start)
        {
            dateTime = dateTime.AddHours(4);
        }

        // Formatowanie daty na żądany format (bez godzin)
        string formattedDateString = dateTime.ToString("yyyy-MM-dd");
        return formattedDateString;
    }

    private string FormatDate(DateTime date, int godzina)
    {
        // Ustawianie godziny na 07:00:00
        DateTime adjustedDate = new DateTime(date.Year, date.Month, date.Day, godzina, 0, 0);
        return adjustedDate.ToString("yyyy-MM-dd_HH:mm:ss");
    }


    // Don't forget to dispose of the DotNetObjectReference to avoid memory leaks
    public void Dispose()
    {
        dotNetHelper?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeFrappeGantt();

        }
    }

    private async Task InitializeFrappeGantt()
    {
        if (przefiltrowaneDaneDoPlanowania == null) return;

        dotNetHelper = DotNetObjectReference.Create(this);

        Console.WriteLine("InitializeFrappeGantt.....");

        await JSRuntime.InvokeVoidAsync("console.log", "Calling clearGantt");

        await JSRuntime.InvokeVoidAsync("clearGantt", "#gantt");

        var tasks = new List<object>();

        Console.WriteLine("InitializeFrappeGantt foreach.....");

        string s_dependencies = "";

        foreach (var item in przefiltrowaneDaneDoPlanowania)
        {
            var czasProdukcjiWDniach = (double)item.ZleceniaProdukcyjneDto?.JednostkiNaZlecenie / wydajnoscWybranejLinii;
            var czasProdukcjiWHours = czasProdukcjiWDniach * 24;

            DateTime start = item.PlanowanaDataRozpoczeciaProdukcji;
            DateTime end = start.AddHours(czasProdukcjiWHours);

            // Funkcja sprawdzająca, czy dzień jest dniem roboczym
            bool IsWorkingDay(DateTime date)
            {
                return date.DayOfWeek != DayOfWeek.Saturday && date.DayOfWeek != DayOfWeek.Sunday;
            }

            // Jeśli start przypada na weekend, przesuwamy na najbliższy poniedziałek
            if (!IsWorkingDay(start))
            {
                start = start.AddDays((DayOfWeek.Monday - start.DayOfWeek + 7) % 7);
            }

            // Jeśli end przypada na weekend, przesuwamy na najbliższy poniedziałek i wydłużamy czas produkcji
            if (!IsWorkingDay(end))
            {
                end = end.AddDays((DayOfWeek.Monday - end.DayOfWeek + 7) % 7);
            }

            // Ponowne przeliczenie czasu produkcji w godzinach, aby uwzględnić przesunięcie na dni robocze
            czasProdukcjiWHours = (end - start).TotalHours;

            char tzlec;
            tzlec = item.ZlecenieWewnetrzne ? '1' : '0';

            string miles = item.ZlecenieWewnetrzne ? "bar-secmilestone" : "bar-milestone";

            var task = new
            {
                id = $"Task_{tzlec}_{item.ZleceniaProdukcyjneDto.RowId}",
                name = $"{item.ZleceniaProdukcyjneDto?.NumerZamowienia} {item.ZleceniaProdukcyjneDto?.Klient}",
                start = FormatDate(start, 7),
                end = FormatDate(end, 15),
                _start = FormatDate(start, 7),
                _end = FormatDate(end, 15),
                progress = 0,
                dependencies = s_dependencies,
                custom_class = miles
            };
  
            if (s_dependencies == "") s_dependencies = $", Task_{tzlec}_{item.ZleceniaProdukcyjneDto.RowId}";

            Console.WriteLine($"task: start: {task.start} stop: {task.end} dependencies:{s_dependencies}");

            tasks.Add(task);
        }


        Console.WriteLine($"Załadowano danych do wykresu Gannt'a: {tasks.Count} z {przefiltrowaneDaneDoPlanowania.Count} w dniu {DateTime.Now}");

        var optionsJson = JsonSerializer.Serialize(new
        {
            header_height = 50,
            column_width = 30,
            step = 24,
            view_modes = new[] { "Quarter Day", "Half Day", "Day", "Week", "Month" },
            bar_height = 20,
            bar_corner_radius = 3,
            arrow_curve = 5,
            padding = 18,
            view_mode = "Day",
            language = "pl",
            date_format = "YYYY-MM-DD", // Zmieniono format
            custom_popup_html = "function(task) {const end_date = task._end.format(&quot; MMM D&quot;);return `<div class=&quot;details-container&quot;><h5>${task.name}</h5><p>Expected to finish by ${end_date}</p><p>${task.progress}% completed! </p></div>`;"
        });

        try
        {
            var tasksJson = JsonSerializer.Serialize(tasks);

            await JSRuntime.InvokeVoidAsync("initializeFrappeGanttFromJson", "#gantt", tasksJson, optionsJson, dotNetHelper);
            await JSRuntime.InvokeVoidAsync("addGanttClickEvent", "#gantt", dotNetHelper);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Wystąpił błąd [InitializeFrappeGantt]: {ex.Message}");
        }

        Console.WriteLine("InitializeFrappeGantt koniec..... :) ");
    }



    [JSInvokable]
    private async Task FetchData()
    {
        // int priorytet = 0;
        // int priorytetMax = 1000;

        if (blokuj_petle) return;

        loading = true;

        try
        {
            var daneDoPlanowania = await Http.GetFromJsonAsync<List<DaneDoPlanowaniaViewModel>>($"api/ZleceniaNaLinii/GetDaneDoPlanowania/{_selectedValueGantt}/TAK");

            // Przefiltruj daneDoPlanowania
            if (daneDoPlanowania != null && daneDoPlanowania.Any())
            {

                przefiltrowaneDaneDoPlanowania = daneDoPlanowania.ToList();
            }
            else
            {
                przefiltrowaneDaneDoPlanowania = new List<DaneDoPlanowaniaViewModel>();
            }

            Console.WriteLine($"FetchData - OK");
        }
        catch (Exception ex)
        {
            // Obsłuż błąd, np. wyświetlając komunikat użytkownikowi
            Console.WriteLine($"Wystąpił błąd podczas pobierania danych: {ex.Message}");
        }

        loading = false;

        if (!blokuj_petle) blokuj_petle = true;
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }


}
