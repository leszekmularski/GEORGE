@page "/FrappeGantt/{numerSel?}"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IMessageService _message
@inject IConfirmService _confirmService
@inject ModalService ModalService
@inject ConfirmService ComfirmService
@inject Utilities.ILocalStorage LocalStorage
@using System.Text.Json
@using GEORGE.Shared.ViewModels
@using GEORGE.Shared.Models
@using GEORGE.Shared.Class
@using Microsoft.JSInterop
@using System.Text.Json.Serialization
@using System.Threading.Tasks
@using AntDesign
@using System.Globalization
@using System.Net;
@using AntDesign.TableModels
@using System.ComponentModel
@using System.Net.Http.Headers


<!DOCTYPE html>
<html>
<head>
    <title>GEORGE Planowania produkcji GANTT</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta charset="utf-8" />
    <link rel="stylesheet" type="text/css" href="../dist/frappe-gantt.css" />
    <script type="text/javascript" src="../dist/moment.min.js"></script>
    <script type="text/javascript" src="../dist/snap.svg-min.js"></script>
    <script src="../Gantt/JFrappeGantt.js"></script>
    <script type="text/javascript" src="../dist/frappe-gantt.js"></script>

    <style>
        .container {
            width: 95%;
            margin: 0 auto;
            position: sticky; /* Upewnij się, że nagłówek jest sticky */
        }
        /* custom class */
        .gantt .bar-milestone .bar {
            fill: tomato;
        }

        /* custom class */
        .gantt .bar-secmilestone .bar {
            fill: cadetblue;
        }


        .heading {
            text-align: center;
        }

        .gantt-target.dark {
            background-color: #252525;
        }

        .grid-background {
            background-color: blue;
        }

        #gantt-container {
            width: 100%;
            height: 100%;
        }

        .details-container {
            background-color: #fff;
            border: 1px solid #ccc;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            position: absolute;
        }

    </style>

</head>
<body>
    <Spin Spinning=loading>

        @if (!ladujDane || rodzajeLinieProdukcyjne == null)
        {
            <Button Style="width:100%; background-color: indigo;" Type="@ButtonType.Primary" Icon="@IconType.Outline.Dashboard" OnClick="BazaPobierz">
                Zaczekaj na załadowanie danych ... lub kliknij w przycisk aby załadować ponownie
            </Button>
        }

        <div style="width:49%">
            @if (rodzajeLinieProdukcyjne != null)
            {
                <label>Wybierz linię produkcyjną</label>
                <Select TItem="LinieProdukcyjne" TItemValue="string" DataSource="@rodzajeLinieProdukcyjne" @bind-Value="@_selectedValueGantt"
                        LabelName="@nameof(LinieProdukcyjne.NazwaLiniiProdukcyjnej)" ValueName="@nameof(LinieProdukcyjne.RowId)"
                        Placeholder="Wybierz linię produkcyjną" DefaultActiveFirstOption="false" EnableSearch
                        OnSelectedItemChanged="OnSelectedItemChangedHandlerGantt">
                </Select>
            }
        </div>
        <Divider></Divider>
        <section class="section section-padding-top section-padding-bottom">
            <div class='container' style="height:100%">
                <Layout Style="background-color: white;">
                    <Header Style="background-color: lightblue;">
                        <h7 class="button-container">

                            <AntDesign.TextArea ReadOnly Value="@(click_task)" Style="width:25%; height:65px; font-size:10px; background-color: lightblue;" />

                            @if (boolNowy || boolAdmin)
                            {
                                <Button class="btn-detail" OnClick="() => AddNewZlec()">Dodaj zlecenie do planu</Button>
                            }
                            <Button class="btn-detail" OnClick="() => OpenDetailModal()">Idź do zlecenia</Button>
                            @if (boolUsuniecia || boolAdmin)
                            {
                                <Button class="btn-refresh" Icon="@IconType.Outline.Delete" OnClick="@(async ()=> { await DelTask(ConfirmButtons.YesNo); })"></Button>
                                <Button class="btn-refresh" Icon="@IconType.Outline.Delete" OnClick="@(async ()=> { await DelTaskALL(ConfirmButtons.YesNo); })">Wszędzie</Button>
                            }
                            <Button class="btn-refresh" Icon="@IconType.Outline.Reload" OnClick="RefreshData"></Button>

                            @if (boolZmian || boolAdmin)
                            {
                                <Button type="button" class="btn btn-sm btn-light" Icon="@IconType.Outline.Save" @onclick="SaveView"></Button>
                                <Tooltip Placement="@Placement.Top" Title="Produkcja rozpoczęta">
                                    <Button type="button" class="btn btn-sm btn-light" Icon="@IconType.Outline.Loading" OnClick="@(async ()=> { await SaveWorks(ConfirmButtons.YesNo); })"></Button>
                                </Tooltip>
                            }

                            <Button class="btn-back" OnClick="GoBack">Wróć do poprzedniej strony</Button>
                        </h7>
                    </Header>
                    <Layout>
                        <Content>
                            <div id="gantt-container" style="display: grid; grid-template-columns: 1fr; grid-template-rows: 1fr;">
                                <svg id="gantt" style="width: 100%; height: 100%;"></svg>
                            </div>
                            <br />
                        </Content>
                    </Layout>
                    <Footer>
                        <div class="mx-auto mt-3 btn-group" role="group">
                            <button type="button" class="btn btn-sm btn-light" @onclick="@(async () => await ChangeView("Half Day"))">Pół dnia</button>
                            <button type="button" class="btn btn-sm btn-light" @onclick="@(async () => await ChangeView("Day"))">Dzień</button>
                            <button type="button" class="btn btn-sm btn-light" @onclick="@(async () => await ChangeView("Week"))">Tydzień</button>
                            <button type="button" class="btn btn-sm btn-light" @onclick="@(async () => await ChangeView("Month"))">Miesiąc</button>
                            &nbsp
                            @if (boolZmian || boolAdmin)
                            {
                                <Button type="button" class="btn btn-sm btn-light" @onclick="SaveView">Zapisz zmiany</Button>
                            }
                        </div>
                    </Footer>
                </Layout>
            </div>
        </section>
    </Spin>

</body>

    <Modal Title="Dodaj nowe zlecenie" @bind-Visible="@_visible" Style="width:60%" OkText="@("Zapisz do planu zaznaczone zlecenia")" CancelText="@("Anuluj")"
       MaxBodyHeight="@("65vh")" OnOk="AddPlanEdit" OkButtonProps="@okButtonProps">
        <div style="width:100%">
            <p style="height: 100%; width:100%;">
                Nie przypisane zlecenia
                <Select TItem="LinieProdukcyjne" TItemValue="string" DataSource="@rodzajeLinieProdukcyjne" @bind-Value="@_selectedValue"
                        LabelName="@nameof(LinieProdukcyjne.NazwaLiniiProdukcyjnej)" ValueName="@nameof(LinieProdukcyjne.RowId)"
                        Placeholder="Wybierz linię produkcyjną" DefaultActiveFirstOption="false" EnableSearch
                        OnSelectedItemChanged="OnSelectedItemChangedHandler">
                </Select>
                <div>
                <RadioGroup @bind-Value="@_valueZlecenie" TValue="bool" OnChange="ClicRadioGroup">
                        <Radio Value="false">Zlecenia zewnętrzne</Radio>
                        <Radio Value="true">Zlecenia wewnętrzne</Radio>
                    </RadioGroup>
                </div>
                @if (przefiltrowanedaneNiezaplanowane == null)
                {
                    <div style="padding-top:25px; color: red;">
                        <h3>@komunikatOZleceniach</h3>
                    </div>
                }
                else
                {
                    @if (przefiltrowanedaneNiezaplanowane.Count > 0)
                    {
                    <!-- Tabela z przefiltrowanymi danymi -->
                    <Divider>Znalezione zlecenia</Divider>
                    <div style="padding-top:25px;padding-left:5px;padding-right:5px;width:100%;">
                        <Table @ref="_table" TItem="DaneDoPlanowaniaViewModel" PageSize="4" DataSource="@przefiltrowanedaneNiezaplanowane" Total="_total"
                               @bind-SelectedRows="_selectedRows" Style="width: 100%; font-size: 9px;" RowKey="x => x.ZleceniaProdukcyjneDto.RowId"
                               Size="TableSize.Small" OnRow="OnRow" OnRowClick="OnChangeTblClik" Loading="_loading">

                            <Selection Style="width:25px" Title="Wybierz"></Selection>
                            <PropertyColumn Width="85px" Title="Klient" Property="c => c.ZleceniaProdukcyjneDto.Klient" Sortable OnFilter="(a, b) => a == b" Filterable />
                            <PropertyColumn Style="width:35px" Format="yyyy-MM-dd" Title="Plan Prod." Property="c => c.PlanowanaDataRozpoczeciaProdukcji" Sortable />
                            <PropertyColumn Style="width:35px" Title="Typ_Dok." Property="c => c.ZleceniaProdukcyjneDto.TypZamowienia" Sortable />
                            <PropertyColumn Style="width:35px" Format="yyyy-MM-dd" Title="Plan. Zakoń." Property="c => c.ZleceniaProdukcyjneDto.DataProdukcji" Sortable />
                            <PropertyColumn Style="width:35px" Format="yyyy-MM-dd" Title="Plan. Mont." Property="c => c.ZleceniaProdukcyjneDto.DataMontazu" Sortable />
                            <PropertyColumn Style="width:35px" Title="Nr Zam." Property="c => c.ZleceniaProdukcyjneDto.NumerZamowienia" Sortable />
                            <PropertyColumn Style="width:35px" Title="Czas wyk." Property="c => c.DomyslnyCzasProdukcji" Sortable />
                        </Table>
                    </div>
                    }
                    else
                    {
                        <div style="padding-top:55px;">
                            <BadgeRibbon Text="Brak danych na wybraną linię" Color="orange">
                                <Card Bordered Style="font-size:50px; color:green">Brak w systemie zleceń do zaplanowania.</Card>
                            </BadgeRibbon>
                        </div>
                    }
                }
            </p>
        </div>
    </Modal>

</html>


@code {

    [Parameter]
    public string? numerSel { get; set; } = "";

    [Inject] private AppState AppState { get; set; } = default!;

    public string? DataStartStop { get; set; }

    private DateTime SDataStart;
    private DateTime SDataStop;

    private bool loading = false;
    private bool ladujDane = true;

    private bool blokuj_petle = false;


    private string click_task = "";
    private string click_RowIdZlecenia = "";

    private object? gantt;

    bool _visible = false;

    private List<object>? taskArray;

    private List<LinieProdukcyjne>? rodzajeLinieProdukcyjne;
    string? _selectedValue;
    LinieProdukcyjne? _selectedItem;

    string? _selectedValueGantt = "";//"cdc0d09a-d248-48b9-b263-f54e254d1290";
    LinieProdukcyjne? _selectedItemGantt;

    private List<DaneDoPlanowaniaViewModel>? daneNiezaplanowane;
    private List<DaneDoPlanowaniaViewModel>? przefiltrowanedaneNiezaplanowane;

    ITable? _table;
    IEnumerable<DaneDoPlanowaniaViewModel> _selectedRows = [];
    List<DaneDoPlanowaniaViewModel> mockDb = new();

    private List<DaneDoPlanowaniaViewModel>? przefiltrowaneDaneDoPlanowania;

    int _total;

    bool _loading = false;

    private DotNetObjectReference<FrappeGantt>? dotNetHelper;
    //private List<PodmiotPrzypisPracownikowiViewModel>? dane_full_plan;

    private string komunikatOZleceniach = "Wybierz linię produkcyjną";

    private int wydajnoscWybranejLinii = 1;

    private bool _valueZlecenie = false;

    private AntDesign.ButtonProps okButtonProps = new AntDesign.ButtonProps();

    protected override async Task OnInitializedAsync()
    {
        if (AppState != null)
        {
            AppState.SomeData = "";
        }

        loading = true;

        await Laduj_Uprawnienia();

        try
        {

            rodzajeLinieProdukcyjne = await Http.GetFromJsonAsync<List<LinieProdukcyjne>>("api/LinieProdukcyjne/");

        }
        catch (Exception ex)
        {
            // Obsługa błędów, np. wyświetlenie komunikatu o błędzie
            Console.WriteLine($"Wystąpił błąd (OnInitializedAsync): {ex.Message}");
            click_task = "Sprawdź powiązania podmiot / pracownik wejdź do Moje obiekty";
        }

        loading = false;

        okButtonProps.Disabled = true;

    }

    private async Task OnChangeTblClik()
    {
        Console.WriteLine("test");
        // Sprawdzenie, czy są zaznaczone wiersze
        if (_selectedRows == null || !_selectedRows.Any())
        {
            okButtonProps.Disabled = true;
        }
        else
        {
            okButtonProps.Disabled = false;
        }

        // Możesz dodać logikę asynchroniczną tutaj, jeśli jest potrzebna
        await Task.CompletedTask;

    }

    // private async Task OnChangeTblClik(QueryModel<DaneDoPlanowaniaViewModel> query)
    // {

    //     Console.WriteLine(query.ToString());  

    //     // Sprawdzenie, czy są zaznaczone wiersze
    //     if (_selectedRows == null || !_selectedRows.Any())
    //     {
    //         okButtonProps.Disabled = true;
    //     }
    //     else
    //     {
    //         okButtonProps.Disabled = false;
    //     }

    //     // Możesz dodać logikę asynchroniczną tutaj, jeśli jest potrzebna
    //     await Task.CompletedTask;

    // }

    Dictionary<string, object> OnRow(RowData<DaneDoPlanowaniaViewModel> row)
    {
        Action<MouseEventArgs> OnClick = args =>
        {
            Console.WriteLine($"row {row.Data.TypZamowienia} was clicked");

            // Sprawdzenie, czy są zaznaczone wiersze
            if (_selectedRows == null || !_selectedRows.Any())
            {
                okButtonProps.Disabled = true;
            }
            else
            {
                okButtonProps.Disabled = false;
            }
        };

        return new Dictionary<string, object>
        {
            { "onclick", OnClick },
        };
    }

    private void ClicRadioGroup()
    {
        if (daneNiezaplanowane != null && daneNiezaplanowane != null)
        {
            przefiltrowanedaneNiezaplanowane = daneNiezaplanowane.Where(x => x.ZlecenieWewnetrzne == _valueZlecenie).ToList();

            OnChangeTblClik();
            // Odśwież widok (jeśli używasz Blazor)
            StateHasChanged();

            Console.WriteLine($"daneDoPlanowania.Count:{this.przefiltrowanedaneNiezaplanowane.Count()} _valueZlecenie:{_valueZlecenie}");

        }
    }

    private async Task AddPlanEdit()
    {
        // Sprawdzenie, czy są wybrane wiersze
        if (_selectedRows == null || !_selectedRows.Any())
        {
            Console.WriteLine("Nie wybrano żadnych zleceń.");
            return; // Nic nie rób, jeśli nie ma zaznaczonych wierszy
        }

        Console.WriteLine($"_selectedRows:{_selectedRows.Count()}");

        var noweZleceniaNaLinii = _selectedRows.Select(row => new ZleceniaNaLinii
            {
                RowIdLinieProdukcyjne = row.RowIdLiniiProdukcyjnej,
                RowIdZleceniaProdukcyjne = row.ZleceniaProdukcyjneDto.RowId,
                Uwagi = "Automatycznie dodane",
                DataZapisu = DateTime.Now,
                ZlecenieWewnetrzne = row.ZlecenieWewnetrzne, // lub _valueZlecenie jeśli dotyczy to całej operacji
                OstatniaZmiana = "Zmiana: " + DateTime.Now.ToLongDateString()
            }).ToList();


        // Wysyłanie danych do API
        var response = await Http.PostAsJsonAsync("api/ZleceniaNaLinii", noweZleceniaNaLinii);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Zlecenia zostały dodane.");
            _visible = false; // Zamknięcie modalnego okna po dodaniu

            // Jeśli chcesz usunąć zaznaczone wiersze z listy danych niezaplanowanych
            mockDb = mockDb.Except(_selectedRows).ToList();

            _selectedRows = null; // Wyczyść zaznaczone wiersze

            await FetchData();

            await InitializeFrappeGantt();

            click_task = "";
            click_RowIdZlecenia = "";
            Console.WriteLine("Zlecenia dodano.");
            await _message.Success("Zlecenia dodano.");

        }
        else
        {
            Console.WriteLine("Wystąpił błąd podczas dodawania zleceń.");
        }

        await InitializeFrappeGantt();

        // Odśwież widok (jeśli używasz Blazora)
        StateHasChanged();
    }


    private async Task<bool> Comfirm(string message)
    {
        return await ComfirmService.Show(message, "Confirm", ConfirmButtons.YesNo, ConfirmIcon.Warning) == ConfirmResult.Yes;
    }

    private async Task OnSelectedItemChangedHandlerGantt(LinieProdukcyjne value)
    {
        ladujDane = false;
        // if(dotNetHelper == null)
        //     dotNetHelper = DotNetObjectReference.Create(this);

        _selectedItemGantt = value;

        if (_selectedItemGantt != null)
        {

            wydajnoscWybranejLinii = _selectedItemGantt.DziennaZdolnoscProdukcyjna;

            Console.WriteLine($"_selectedItemGantt:{_selectedItemGantt.RowId}");

        }
        else
        {
            wydajnoscWybranejLinii = 1;
        }

        await FetchData();

        await BazaPobierz();

        ladujDane = true;

        await OnChangeTblClik();

    }

    private async Task OnSelectedItemChangedHandler(LinieProdukcyjne value)
    {
        komunikatOZleceniach = "Czekaj na załadowanie danych...";
        _selectedItem = value;

        Console.WriteLine($"selected: {value?.RowId}");

        _loading = true;

        // Sprawdź, czy wybrano poprawną linię produkcyjną
        if (value?.RowId != null)
        {
            try
            {
                // Pobierz dane z API dla wybranego elementu
                var response = await Http.GetAsync($"api/ZleceniaNaLinii/GetDaneDoPlanowania/{value.RowId}/NIE");

                if (response.IsSuccessStatusCode)
                {
                    var daneDoPlanowania = await response.Content.ReadFromJsonAsync<List<DaneDoPlanowaniaViewModel>>();

                    if (daneDoPlanowania != null && daneDoPlanowania.Any())
                    {
                        // Zaktualizuj stan tylko dla niepustych danych
                        daneNiezaplanowane = daneDoPlanowania.Where(f => f.TypZamowienia != "BRAK_DANYCH").ToList();
                        przefiltrowanedaneNiezaplanowane = daneNiezaplanowane.Where(x => !x.ZlecenieWewnetrzne).ToList();

                        komunikatOZleceniach = $"Wyszukano dane: {daneNiezaplanowane.Count}";
                    }
                    else
                    {
                        komunikatOZleceniach = "Brak DANYCH - wszystkie zlecenia są zaplanowane";
                        daneNiezaplanowane = new List<DaneDoPlanowaniaViewModel>();
                        przefiltrowanedaneNiezaplanowane = new List<DaneDoPlanowaniaViewModel>();
                    }
                }
                else
                {
                    komunikatOZleceniach = "Błąd w połączeniu z serwerem: " + response.ReasonPhrase;
                }
            }
            catch (Exception ex)
            {
                komunikatOZleceniach = "Wystąpił błąd podczas pobierania danych: " + ex.Message;
            }
        }
        else
        {
            komunikatOZleceniach = "Błąd - wybierz linię produkcyjną";
            daneNiezaplanowane = new List<DaneDoPlanowaniaViewModel>();
            przefiltrowanedaneNiezaplanowane = new List<DaneDoPlanowaniaViewModel>();
        }

        _loading = false;
    }



    private async Task BazaPobierz()
    {
        try
        {
            blokuj_petle = false;

            await OnAfterRenderAsync(true);

            ladujDane = true;
        }
        catch (Exception ex)
        {
            // Obsługa błędów, np. wyświetlenie komunikatu o błędzie
            Console.WriteLine($"Wystąpił błąd (BazaPobierz-OnInitializedAsync): {ex.Message} / {ex.StackTrace}");
            click_task = $"Wystąpił błąd (BazaPobierz-OnInitializedAsync): {ex.Message}";
        }
    }


    [JSInvokable]
    private async Task RefreshData()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("refreshGanttData", dotNetHelper);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Obsługa błędów, np. wyświetlenie komunikatu o błędzie
            Console.WriteLine($"Wystąpił błąd (RefreshData): {ex.Message}");
        }
    }

    private async void AddNewZlec()
    {
        _visible = true;
        await Task.Delay(1);
    }

    private async void OpenDetailModal()
    {
        if (click_RowIdZlecenia == "" || przefiltrowaneDaneDoPlanowania == null)
        {
            await _message.Info("Kliknij w obiekt na wykresie");
            Console.WriteLine("Kliknij w obiekt na wykresie");
            return;
        }

        var obiektDoAktualizacji = przefiltrowaneDaneDoPlanowania
        .FirstOrDefault(dane => dane.ZleceniaProdukcyjneDto != null && dane.ZleceniaProdukcyjneDto.RowId == (click_RowIdZlecenia));

        if (obiektDoAktualizacji != null)
        {
            if (!obiektDoAktualizacji.ZlecenieWewnetrzne)
            {
                // Przekazujemy informacje o poprzedniej stronie jako parametry
                NavigationManager.NavigateTo($"/zlecenia-produkcyjne/{click_RowIdZlecenia}");
            }
            else
            {
                // Przekazujemy informacje o poprzedniej stronie jako parametry
                NavigationManager.NavigateTo($"/zlecenia-produkcyjne-wew/{click_RowIdZlecenia}");
            }
        }
        else
        {
            await _message.Info($"Coś poszło nie ta. Kliknij w obiekt na wykresie [{click_RowIdZlecenia}]");
        }

        return;

    }

    public async Task DelTask(ConfirmButtons confirmButtons)
    {
        // Sprawdzenie, czy użytkownik kliknął w obiekt
        if (string.IsNullOrEmpty(click_RowIdZlecenia) || _selectedItemGantt == null)
        {
            await _message.Info("Kliknij w obiekt na wykresie, aby go usunąć.");
            click_task = "Kliknij w obiekt na wykresie, aby go usunąć.";
            return;
        }

        // Treść komunikatu i tytuł
        var content = "Czy chcesz usunąć wskazany obiekt?             Uwaga zmiany automatycznie zostaną zapisane!";
        var title = "Uwaga!!!";

        // Wyświetlenie komunikatu potwierdzającego
        var confirmResult = await _confirmService.Show(content, title, confirmButtons);

        // Sprawdzenie wyniku potwierdzenia

        if (confirmResult == ConfirmResult.No)
        {
            return;
        }

        await UsunRekord(click_RowIdZlecenia, _selectedItemGantt.RowId);

    }

    public async Task DelTaskALL(ConfirmButtons confirmButtons)
    {
        // Sprawdzenie, czy użytkownik kliknął w obiekt
        if (string.IsNullOrEmpty(click_RowIdZlecenia) || _selectedItemGantt == null)
        {
            await _message.Info("Kliknij w obiekt na wykresie, aby go usunąć.");
            click_task = "Kliknij w obiekt na wykresie, aby go usunąć.";
            return;
        }

        // Treść komunikatu i tytuł
        var content = "Czy chcesz usunąć ze wszystkich linii wskazany obiekt?             Uwaga zmiany automatycznie zostaną zapisane!";
        var title = "Uwaga!!!";

        // Wyświetlenie komunikatu potwierdzającego
        var confirmResult = await _confirmService.Show(content, title, confirmButtons);

        // Sprawdzenie wyniku potwierdzenia

        if (confirmResult == ConfirmResult.No)
        {
            return;
        }

        await UsunRekord(click_RowIdZlecenia, "----");
    }

    [JSInvokable]
    private async Task UsunRekord(string rowId, string rowIdLinii)
    {
        if (przefiltrowaneDaneDoPlanowania == null) return;

        // Znajdź obiekt z odpowiednim RowId
        if (rowIdLinii == "----")
        {
            var obiektDoUsuniecia = przefiltrowaneDaneDoPlanowania
          .FirstOrDefault(dane => dane.ZleceniaProdukcyjneDto != null && dane.ZleceniaProdukcyjneDto.RowId == rowId);

            if (obiektDoUsuniecia != null)
            {
                await _message.Loading("Usuwam zlecenie ze wystkich linii");
                await deleteRow(rowId, rowIdLinii);
            }
            else
            {
                await _message.Info("Nie znaleziono zleceń!!!. Nic nie usunołem.");
            }
        }
        else
        {
            var obiektDoUsuniecia = przefiltrowaneDaneDoPlanowania
            .FirstOrDefault(dane => dane.ZleceniaProdukcyjneDto != null && dane.ZleceniaProdukcyjneDto.RowId == rowId && dane.RowIdLiniiProdukcyjnej == rowIdLinii);

            if (obiektDoUsuniecia != null)
            {
                await deleteRow(rowId, rowIdLinii);
            }
        }

    }

    public async Task deleteRow(string rowIdZlecenia, string rowIdLinii)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/ZleceniaNaLinii/{rowIdZlecenia}/{rowIdLinii}");

            if (response.IsSuccessStatusCode && przefiltrowaneDaneDoPlanowania != null)
            {
                var obiektDoUsuniecia = przefiltrowaneDaneDoPlanowania
                .FirstOrDefault(dane => dane.ZleceniaProdukcyjneDto != null && dane.ZleceniaProdukcyjneDto.RowId == rowIdZlecenia && dane.RowIdLiniiProdukcyjnej == rowIdLinii);

                przefiltrowaneDaneDoPlanowania.Remove(obiektDoUsuniecia);

                await InitializeFrappeGantt();

                click_task = "";
                click_RowIdZlecenia = "";
                Console.WriteLine("Rekord został pomyślnie usunięty.");
                await _message.Success("Pozycja została pomyślnie usunieta.");
            }
            else
            {
                Console.WriteLine($"Błąd podczas usuwania rekordu: {response.ReasonPhrase}");
                await _message.Error($"Błąd podczas usuwania rekordu: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"******* Błąd {ex.Message}");
            await _message.Error($"Błąd podczas usuwania rekordu!");
        }
    }

    [JSInvokable]
    private async Task ChangeView(string mode)
    {
        try
        {

            await JSRuntime.InvokeVoidAsync("ChangeView", mode, dotNetHelper);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Obsługa błędów, np. wyświetlenie komunikatu o błędzie
            Console.WriteLine($"Wystąpił błąd (ChangeView - OnInitializedAsync): {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task SaveWorks(ConfirmButtons confirmButtons)
    {
        // Pobranie danych z wykresu
        var gantt = await JSRuntime.InvokeAsync<object[]>("SaveGanttData");
        if (gantt == null || przefiltrowaneDaneDoPlanowania == null || przefiltrowaneDaneDoPlanowania.Count() == 0)
        {
            await _message.Info("Brak danych na wykresie!");
            return;
        }

        // Sprawdzenie, czy użytkownik kliknął w obiekt
        if (string.IsNullOrEmpty(click_RowIdZlecenia) || _selectedItemGantt == null)
        {
            await _message.Info("Kliknij w obiekt na wykresie, aby go ustawić datę roz. produkcji");
            click_task = "Kliknij w obiekt na wykresie, aby go ustawić datę roz. produkcji";
            return;
        }

        // Treść komunikatu i tytuł
        var content = "Czy chcesz ustawić status - Na PRODUKCJA ROZPOCZĘTA?             Uwaga zmiany automatycznie zostaną zapisane!";
        var title = "Uwaga!!!";

        // Wyświetlenie komunikatu potwierdzającego
        var confirmResult = await _confirmService.Show(content, title, confirmButtons);

        // Sprawdzenie wyniku potwierdzenia

        if (confirmResult == ConfirmResult.No)
        {
            return;
        }

        //*******************************************************************************************************************************************************//

        if (przefiltrowaneDaneDoPlanowania == null) return;


        // Znajdź obiekt z odpowiednim RowId

        var obiektDoUsawDateStartProd = przefiltrowaneDaneDoPlanowania
        .FirstOrDefault(dane => dane.ZleceniaProdukcyjneDto != null && dane.ZleceniaProdukcyjneDto.RowId == click_RowIdZlecenia && dane.RowIdLiniiProdukcyjnej == _selectedItemGantt.RowId);

        if (obiektDoUsawDateStartProd != null)
        {

            var zmienDate = DateTime.Now;

            if (obiektDoUsawDateStartProd.RzeczywistaDataRozpoczeciaProdukcji != DateTime.MinValue)
            {
                zmienDate = DateTime.MinValue;
            }

            try
            {

                if (!obiektDoUsawDateStartProd.ZlecenieWewnetrzne)
                {
                    // Send PUT request to the server
                    var response = await Http.PostAsJsonAsync($"api/ZleceniaProdukcyjne/zmien-date-rozpoczecia-produkcji?rowid={click_RowIdZlecenia}", zmienDate);

                    if (response.IsSuccessStatusCode)
                    {
                        Console.WriteLine($"Pomyślnie zaktualizowano zadanie o identyfikatorze rowID: {click_RowIdZlecenia}");
                    }
                    else
                    {
                        Console.WriteLine($"Nie udało się zaktualizować zadania o identyfikatorze rowID: {click_RowIdZlecenia}");

                    }
                }
                else
                {
                    // Send PUT request to the server
                    var response = await Http.PostAsJsonAsync($"api/ZleceniaProdukcyjneWew/zmien-date-rozpoczecia-produkcji?rowid={click_RowIdZlecenia}", zmienDate);

                    if (response.IsSuccessStatusCode)
                    {
                        Console.WriteLine($"Pomyślnie zaktualizowano zadanie o identyfikatorze rowID: {click_RowIdZlecenia}");
                    }
                    else
                    {
                        Console.WriteLine($"Nie udało się zaktualizować zadania o identyfikatorze rowID: {click_RowIdZlecenia}");
                    }
                }

                await FetchData();

                await BazaPobierz();

                await InitializeFrappeGantt();

            }
            catch (Exception ex)
            {
                Console.WriteLine($"******* Błąd {ex.Message}");
                await _message.Error($"Błąd podczas usuwania rekordu!");
            }

        }

    }


    [JSInvokable]
    public async Task SaveView()
    {

        // Pobranie danych z wykresu
        var gantt = await JSRuntime.InvokeAsync<object[]>("SaveGanttData");
        if (gantt == null || przefiltrowaneDaneDoPlanowania == null || przefiltrowaneDaneDoPlanowania.Count() == 0)
        {
            await _message.Info("Brak danych na wykresie!");
            return;
        }

        loading = true;

        click_task = "";

        bool jestBlad = false;

        foreach (var task in gantt)
        {
            string taskJson = task.ToString();


            // Deserialize JSON to a model object
            var updateTaskRequest = JsonSerializer.Deserialize<UpdateTaskRequest>(taskJson);

            if (updateTaskRequest != null)
            {
                bool wewnetrzne = false;
                if (updateTaskRequest.Id.StartsWith("Task_1_"))
                {
                    wewnetrzne = true;
                }
                string rowID = updateTaskRequest.Id.Replace("Task_0_", "").Replace("Task_1_", ""); // Assuming 'Id' is the 'RowIdZlec'

                DateTime nowaData = DateTime.ParseExact(updateTaskRequest._Start,
                "yyyy-MM-ddTHH:mm:ss.fffZ",
                CultureInfo.InvariantCulture,
                DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);

                nowaData = nowaData.AddHours(3); //Poprawka błedu JS z wartości _start 22:00

                if (!wewnetrzne)
                {
                    // Send PUT request to the server
                    var response = await Http.PostAsJsonAsync($"api/ZleceniaProdukcyjne/zmien-date-produkcji?rowid={rowID}", nowaData);

                    if (response.IsSuccessStatusCode)
                    {
                        Console.WriteLine($"Pomyślnie zaktualizowano zadanie o identyfikatorze rowID: {rowID}");
                    }
                    else
                    {
                        Console.WriteLine($"Nie udało się zaktualizować zadania o identyfikatorze rowID: {rowID}");
                        Console.WriteLine($"DateTime NowaData = Convert.ToDateTime({updateTaskRequest.Name})");
                        jestBlad = true;
                    }
                }
                else
                {
                    // Send PUT request to the server
                    var response = await Http.PostAsJsonAsync($"api/ZleceniaProdukcyjneWew/zmien-date-produkcji?rowid={rowID}", nowaData);

                    if (response.IsSuccessStatusCode)
                    {
                        Console.WriteLine($"Pomyślnie zaktualizowano zadanie o identyfikatorze rowID: {rowID}");
                    }
                    else
                    {
                        Console.WriteLine($"Nie udało się zaktualizować zadania o identyfikatorze rowID: {rowID}");
                        Console.WriteLine($"DateTime NowaData = Convert.ToDateTime({updateTaskRequest.Name})");
                        jestBlad = true;
                    }
                }
            }
        }

        if (jestBlad)
        {
            await _message.Error("Zmiany nie zapisano. Sprawdź konsolę");
            click_task = "Bład przy zapisie...";
        }
        else
        {
            await _message.Success("Zmiany zapisano");
            click_task = "Zapisano zmiany...";
        }


        click_RowIdZlecenia = "";

        loading = false;

    }

    public class UpdateTaskRequest
    {
        [JsonPropertyName("id")]
        public string? Id { get; set; }

        [JsonPropertyName("name")]
        public string? Name { get; set; }

        [JsonPropertyName("start")]
        public string? Start { get; set; }

        [JsonPropertyName("end")]
        public string? End { get; set; }

        [JsonPropertyName("progress")]
        public int Progress { get; set; }

        [JsonPropertyName("_start")]
        public string? _Start { get; set; }

        [JsonPropertyName("_end")]
        public string? _End { get; set; }

        [JsonPropertyName("_progress")]
        public int _Progress { get; set; }

    }


    [JSInvokable]
    public async Task OnClick(int taskIndex)
    {
        await Task.CompletedTask;
        var task = await JSRuntime.InvokeAsync<object>("on_click", taskIndex);

        await Task.Delay(5);

        //   click_task = task.ToString();
        if (task.ToString() == null) return;

        var taskDes = JsonSerializer.Deserialize<JsonElement>(task.ToString());

        Console.WriteLine(task.ToString());

        taskArray = new List<object>();

        foreach (var property in taskDes.EnumerateObject())
        {
            taskArray.Add(property.Value);
        }

        click_task = taskArray[1].ToString();

        click_RowIdZlecenia = taskArray[0].ToString().Replace("Task_0_", "").Replace("Task_1_", "");

        click_task += $"\r\n przed zmianą {FormatDateString(taskArray[2].ToString(), false)} do: {FormatDateString(taskArray[3].ToString(), false)} [po zmianie: {FormatDateStringMove(taskArray[4].ToString(), false)}]";

        StateHasChanged();
    }

    public string FormatDateString(string isoDateString, bool start)
    {
        // Zamiana separatora '_' na 'T' dla poprawnego parsowania
        isoDateString = isoDateString.Replace('_', 'T');

        // Parsowanie daty z formatu ISO 8601
        DateTime dateTime;
        try
        {
            dateTime = DateTime.ParseExact(isoDateString, "yyyy-MM-ddTHH:mm:ss", System.Globalization.CultureInfo.InvariantCulture);
        }
        catch (FormatException)
        {
            // Obsługa przypadku, gdy format daty jest niepoprawny
            throw new FormatException($"String '{isoDateString}' was not recognized as a valid DateTime - FormatDateString.");
        }

        // Dodawanie godzin, jeśli godzina jest większa niż 21 i jest to start
        if (dateTime.Hour > 21 && start)
        {
            dateTime = dateTime.AddHours(4);
        }

        // Formatowanie daty na żądany format
        string formattedDateString = dateTime.ToString("yyyy-MM-dd");
        return formattedDateString;
    }

    public string FormatDateStringMove(string isoDateString, bool start)
    {
        // Zamiana separatora '_' na 'T' dla poprawnego parsowania
        isoDateString = isoDateString.Replace('_', 'T');

        // Parsowanie daty z formatu ISO 8601 z milisekundami i strefą czasową
        DateTimeOffset dateTimeOffset;
        try
        {
            dateTimeOffset = DateTimeOffset.ParseExact(isoDateString, "yyyy-MM-ddTHH:mm:ss.fffK", System.Globalization.CultureInfo.InvariantCulture);
        }
        catch (FormatException)
        {
            // Obsługa przypadku, gdy format daty jest niepoprawny
            throw new FormatException($"String '{isoDateString}' was not recognized as a valid DateTime - FormatDateStringMove.");
        }

        // Konwersja do lokalnego czasu (jeśli potrzebne)
        DateTime dateTime = dateTimeOffset.LocalDateTime;

        // Dodawanie godzin, jeśli godzina jest większa niż 21 i jest to start
        if (dateTime.Hour > 21 && start)
        {
            dateTime = dateTime.AddHours(4);
        }

        // Formatowanie daty na żądany format (bez godzin)
        string formattedDateString = dateTime.ToString("yyyy-MM-dd");
        return formattedDateString;
    }

    private string FormatDate(DateTime date, int godzina)
    {
        // Ustawianie godziny na 07:00:00
        DateTime adjustedDate = new DateTime(date.Year, date.Month, date.Day, godzina, 0, 0);
        return adjustedDate.ToString("yyyy-MM-dd_HH:mm:ss");
    }


    // Don't forget to dispose of the DotNetObjectReference to avoid memory leaks
    public void Dispose()
    {
        dotNetHelper?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeFrappeGantt();

        }
    }


    private async Task InitializeFrappeGantt()
    {
        if (przefiltrowaneDaneDoPlanowania == null) return;

        dotNetHelper = DotNetObjectReference.Create(this);

        Console.WriteLine("InitializeFrappeGantt.....");

        await JSRuntime.InvokeVoidAsync("removeGanttEventListeners");

        // Usuwanie poprzedniego elementu SVG
        await JSRuntime.InvokeVoidAsync("clearGantt", "#gantt-container");

        // Tworzenie nowego elementu SVG
        await JSRuntime.InvokeVoidAsync("createNewGanttSVG", "#gantt-container");

        var tasks = new List<object>();

        Console.WriteLine("InitializeFrappeGantt foreach.....");

        string s_dependencies = "";

        foreach (var item in przefiltrowaneDaneDoPlanowania)
        {
            if (wydajnoscWybranejLinii == 0) 
            { 
                await _message.Error($"Popraw wydajność linii -- czas wykonania jest nieprawidłowy");
                wydajnoscWybranejLinii = 1; 
            }

            var czasProdukcjiWDniach = (double)item.JednostkiNaZlecenie / wydajnoscWybranejLinii;
            var czasProdukcjiWHours = czasProdukcjiWDniach * 24;

            Console.WriteLine($"jednostki: {item.JednostkiNaZlecenie} czasProdukcjiWHours: {czasProdukcjiWHours} dla {item.NumerZlecenia}");

            DateTime start = item.PlanowanaDataRozpoczeciaProdukcji;
            DateTime end = start.AddHours(czasProdukcjiWHours);

            // Funkcja sprawdzająca, czy dzień jest dniem roboczym
            bool IsWorkingDay(DateTime date)
            {
                return date.DayOfWeek != DayOfWeek.Saturday && date.DayOfWeek != DayOfWeek.Sunday;
            }

            // Jeśli start przypada na weekend, przesuwamy na najbliższy poniedziałek
            if (!IsWorkingDay(start))
            {
                start = start.AddDays((DayOfWeek.Monday - start.DayOfWeek + 7) % 7);
            }

            // Jeśli end przypada na weekend, przesuwamy na najbliższy poniedziałek i wydłużamy czas produkcji
            if (!IsWorkingDay(end))
            {
                end = end.AddDays((DayOfWeek.Monday - end.DayOfWeek + 7) % 7);
            }

            // Ponowne przeliczenie czasu produkcji w godzinach, aby uwzględnić przesunięcie na dni robocze
            czasProdukcjiWHours = (end - start).TotalHours;

            char tzlec;
            tzlec = item.ZlecenieWewnetrzne ? '1' : '0';

            var task = new
            {
                id = $"Task_{tzlec}_{item.ZleceniaProdukcyjneDto.RowId}",
                name = $"{item.ZleceniaProdukcyjneDto?.NumerZamowienia} {item.ZleceniaProdukcyjneDto?.Klient} [{item.RzeczywistaDataRozpoczeciaProdukcji.ToShortDateString()}]",
                start = FormatDate(start, 7),
                end = FormatDate(end, 15),
                _start = FormatDate(start, 7),
                _end = FormatDate(end, 15),
                progress = item.ProcentWykonania,
                dependencies = s_dependencies,
                custom_class = item.ZlecenieWewnetrzne ? "bar-secmilestone" : "bar-milestone"
            };

            if (s_dependencies == "") s_dependencies = $", Task_{tzlec}_{item.ZleceniaProdukcyjneDto.RowId}";

            //Console.WriteLine($"task: start: {task.start} stop: {task.end} dependencies:{s_dependencies}");

            tasks.Add(task);
        }


        Console.WriteLine($"Załadowano danych do wykresu Gannt'a: {tasks.Count} z {przefiltrowaneDaneDoPlanowania.Count} w dniu {DateTime.Now}");

        var optionsJson = JsonSerializer.Serialize(new
        {
            header_height = 50,
            column_width = 30,
            step = 24,
            view_modes = new[] { "Quarter Day", "Half Day", "Day", "Week", "Month" },
            bar_height = 20,
            bar_corner_radius = 3,
            arrow_curve = 5,
            padding = 18,
            view_mode = "Day",
            language = "pl",
            date_format = "YYYY-MM-DD"
        });

        var customPopupHtml = @"
        function(task) {
            const end_date = task._end.format('MMM D');
            return `<div class=""details-container""><h5>${task.name}</h5><p>Expected to finish by ${end_date}</p><p>${task.progress}% completed!</p></div>`;
        }";


        try
        {
            var tasksJson = JsonSerializer.Serialize(tasks);
            await JSRuntime.InvokeVoidAsync("initializeFrappeGanttFromJson", "#gantt", tasksJson, optionsJson, customPopupHtml, dotNetHelper);
            await JSRuntime.InvokeVoidAsync("addGanttClickEvent", "#gantt", dotNetHelper);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Wystąpił błąd [InitializeFrappeGantt]: {ex.Message}");
        }

        Console.WriteLine("InitializeFrappeGantt koniec..... :) ");
    }


    [JSInvokable]
    private async Task FetchData()
    {
        // int priorytet = 0;
        // int priorytetMax = 1000;

        if (blokuj_petle) return;

        loading = true;

        try
        {
            var daneDoPlanowania = await Http.GetFromJsonAsync<List<DaneDoPlanowaniaViewModel>>($"api/ZleceniaNaLinii/GetDaneDoPlanowania/{_selectedValueGantt}/TAK");

            // Przefiltruj daneDoPlanowania
            if (daneDoPlanowania != null && daneDoPlanowania.Any())
            {

                przefiltrowaneDaneDoPlanowania = daneDoPlanowania.ToList();
            }
            else
            {
                przefiltrowaneDaneDoPlanowania = new List<DaneDoPlanowaniaViewModel>();
            }

            Console.WriteLine($"FetchData - OK");
        }
        catch (Exception ex)
        {
            // Obsłuż błąd, np. wyświetlając komunikat użytkownikowi
            Console.WriteLine($"Wystąpił błąd podczas pobierania danych: {ex.Message}");
        }

        loading = false;

        if (!blokuj_petle) blokuj_petle = true;
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    //await Laduj_Uprawnienia();

    private bool boolOdczyt = false;
    private bool boolZmian = false;
    private bool boolNowy = false;
    private bool boolUsuniecia = false;
    private bool boolAdmin = false;
    private string RowIdPracownika = "";
    private string? user;
    private List<UprawnieniaPracownikaViewModel>? uprawnienia;

    private async Task Laduj_Uprawnienia()
    {
        user = await LocalStorage.GetStringAsync("user");

        if (string.IsNullOrEmpty(user))
        {
            //NavigationManager.NavigateTo($"", true);
            return;
        }

        string nazwaTabeli = "ZleceniaNaLinii";

        Console.WriteLine($"api/ZwrocSatus/{user}/{nazwaTabeli}");

        try
        {
            uprawnienia = await Http.GetFromJsonAsync<List<UprawnieniaPracownikaViewModel>>($"/api/ZwrocSatus/{user}/{nazwaTabeli}");
        }
        catch (System.Net.Http.HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            Console.WriteLine("Brak danych!!!");
            await _message.Error("Brak danych - status użytkownika");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await _message.Error(ex.Message);
        }

        if (uprawnienia != null)
        {
            if (uprawnienia.Count > 0)
            {
                var znalezioneElementy = uprawnienia.Where(uprawnienie => uprawnienie.TableName == nazwaTabeli);
                Console.WriteLine("Znaleziono uprawnienia dla użytkownika: " + user + " w tabeli: " + nazwaTabeli + " ilość rekordów: " + znalezioneElementy.Count());
                if (znalezioneElementy.Any())
                {
                    var szuk = znalezioneElementy.FirstOrDefault(x => x.TableName == nazwaTabeli);
                    if (szuk != null)
                    {
                        boolOdczyt = szuk.Odczyt;
                        boolZmian = szuk.Zmiana;
                        boolUsuniecia = szuk.Usuniecie;
                        boolAdmin = szuk.Administrator;
                        boolNowy = szuk.Zapis;
                        RowIdPracownika = szuk.RowId;
                    }
                }
            }
        }
    }
}