@page "/_14_z_l/{TypSchodow}"
@inject IJSRuntime JSRuntime
@inject Utilities.ILocalStorage LocalStorage

<h3>Obliczenia Schodów typu: @TypSchodow</h3>
<Button class="btn-back" OnClick="GoBack">Wróć do poprzedniej strony</Button>
<Divider></Divider>
<Collapse Animation>
    <Panel Header="Parametry wykonania schodów" Key="1">
        <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 10px; align-items: center;">
            <div style="display: flex; flex-direction: column; gap: 5px;">
                <label>Długość Otworu:</label>
                <input type="number" @bind="DlugoscOtworu" />
            </div>
            <div style="display: flex; flex-direction: column; gap: 5px;">
                <label>Szerokość Otworu:</label>
                <input type="number" @bind="SzerokoscOtworu" />
            </div>
            <div style="display: flex; flex-direction: column; gap: 5px;">
                <label>Długość na Wejściu:</label>
                <input type="number" @bind="DlugoscNaWejsciu" />
            </div>
            <div style="display: flex; flex-direction: column; gap: 5px;">
                <label>Wysokość do Stropu:</label>
                <input type="number" @bind="WysokoscDoStropu" />
            </div>
            <div style="display: flex; flex-direction: column; gap: 5px;">
                <label>Wysokość Całkowita:</label>
                <input type="number" @bind="WysokoscCalkowita" />
            </div>
            <div style="display: flex; flex-direction: column; gap: 5px;">
                <label>Sugerowana liczba (Podniesień) Stopni:</label>
                <input type="number" @bind="LiczbaPodniesienStopni" />
            </div>
            <div style="display: flex; flex-direction: column; gap: 5px;">
                <label>Ostatniego Stopień Wydłużony o:</label>
                <input type="number" @bind="SzerokoscOstatniegoStopnia" />
            </div>
            <div style="display: flex; flex-direction: column; gap: 5px;">
                <label>Szerokość Biegu Schodów:</label>
                <input type="number" @bind="SzerokoscBieguSchodow" />
            </div>
            <div style="display: flex; flex-direction: column; gap: 5px;">
                <label>Kąt zabiegu:</label>
                <input type="number" @bind="KatZabiegu" readonly />
            </div>
            <div style="display: flex; flex-direction: column; gap: 5px;">
                <label>Ilość schodów zabiegowych:</label>
                <input type="number" @bind="IloscSchodowZabiegowych" min="2" max="7" />
            </div>
            <div style="display: flex; flex-direction: column; gap: 5px;">
                <label style="color:forestgreen">Skala wyświetlania [%]:</label>
                <input type="number" @bind="SkalaWyswietlania" min="1" max="100" />
            </div>
            <div style="display: flex; flex-direction: column; gap: 5px;">
                <label style="color:forestgreen">&nbsp;</label>
                <Button Icon="@IconType.Outline.Save" @onclick="@ZapiszDomyslneWartosci">Zapisz jako domyślne wartości</Button>
            </div>
        </div>
        
    </Panel>
</Collapse>

<!-- Calculation and reset buttons -->
<button @onclick="()=> Oblicz(false)">Oblicz</button>
<button @onclick="()=> Oblicz(true)">Zapisz do DXF</button>
<button @onclick="Resetuj">Reset</button>

<!-- Flexbox container for results and drawing -->
<div style="display: flex; gap: 25px;">
    <!-- Display results -->
    <div>
        <h4>Wyniki:</h4>

        <div style="display: flex; flex-direction: column; gap: 10px;">
            <div>
                <p style="margin: 0;">Długość Linii Biegu: @DlugoscLiniiBiegu</p>
            </div>
            <div>
                <p style="margin: 0;">Kąt Nachylenia: @KatNachylenia</p>
            </div>

            <div style="display: flex; align-items: center; gap: 25px;">
                <p style="margin: 0;">Szerokość Schodów: @SzerokoscSchodow</p>
                <Tooltip Placement="Placement.TopLeft" Title="Szerokość schodów">
                    <span style="margin: 0; color:@(SzerokoscSchodow >= 800 ? "green" : "red");">>= 800 mm</span>
                </Tooltip>
            </div>

            <div style="display: flex; align-items: center; gap: 25px;">
                <p style="margin: 0;">Wysokość Podniesienia Stopnia: @WysokoscPodniesieniaStopnia</p>
                <span style="margin: 0; color:@(WysokoscPodniesieniaStopnia < 140 || WysokoscPodniesieniaStopnia > 200 ? "red" : "green");">
                    140 - 200 mm
                </span>
            </div>

            <div style="display: flex; align-items: center; gap: 25px;">
                <p style="margin: 0; color: darkblue; font-style: oblique; font-weight: bold;">Głębokość Stopnia: @GlebokoscStopnia</p>
                <span style="margin: 0; color:@(GlebokoscStopnia < 220 || GlebokoscStopnia > 350 ? "red" : "green");">
                    220 - 350 mm
                </span>
            </div>

            <div style="display: flex; align-items: center; gap: 25px;">
                <p style="margin: 0;">Przeciętna Długość Kroku: @PrzecietnaDlugoscKroku</p>
                <span style="margin: 0; color:@(PrzecietnaDlugoscKroku < 600 || PrzecietnaDlugoscKroku > 650 ? "red" : "green");">
                    600 - 650 mm
                </span>
            </div>

            <div style="display: flex; align-items: center; gap: 25px;">
                <p style="margin: 0;">Przestrzeń Swobodna nad Głową: @PrzestrzenSwobodnaNadGlowa</p>
                <span style="margin: 0; color:@(PrzestrzenSwobodnaNadGlowa >= 2000 ? "green" : "red");">
                    > 2000 mm
                </span>
            </div>

            <div style="display: flex; align-items: center; gap: 25px;">
                <p style="margin: 0;">Kąt zabiegu: @KatZabiegu</p>
                <span style="margin: 0; color:@(KatZabiegu < 45 || KatZabiegu > 179 ? "red" : "green");">
                    45 - 179°
                </span>
            </div>

        </div>
    </div>

    <!-- Drawing canvas -->
    <div>
        <h4>Rysunek schodów:</h4>
        <div style="overflow: auto; width: 1000px; height: 580px;">
            <BECanvas Width="@Convert.ToInt64(DlugoscOtworu + SzerokoscOstatniegoStopnia)" Height="@Convert.ToInt64(SzerokoscOtworu)" @ref="canvasReferenceKPL"></BECanvas>
        </div>
    </div>
</div>

@code {
        [Parameter]
        public string? TypSchodow { get; set; }

    // Input properties
    private double DlugoscOtworu { get; set; } = 2500;
    private double SzerokoscOtworu { get; set; } = 2000;
    private double DlugoscNaWejsciu { get; set; }
    private double WysokoscDoStropu { get; set; }
    private double WysokoscCalkowita { get; set; }
    private double LiczbaPodniesienStopni { get; set; }
    private double SzerokoscOstatniegoStopnia { get; set; }
    private double SzerokoscBieguSchodow { get; set; }

    private double KatZabiegu { get; set; } = 90;
    private double IloscSchodowZabiegowych { get; set; } = 5;

    private int SkalaWyswietlania { get; set; } = 25;

    // Output properties (results)
    private double DlugoscLiniiBiegu { get; set; }
    private double KatNachylenia { get; set; }
    private double SzerokoscSchodow { get; set; }
    private double WysokoscPodniesieniaStopnia { get; set; }
    private double GlebokoscStopnia { get; set; }
    private double PrzecietnaDlugoscKroku { get; set; }
    private double PrzestrzenSwobodnaNadGlowa { get; set; }


    private BECanvasComponent? canvasReferenceKPL;
    private Canvas2DContext? contextKPL;
    private List<Shape>? shapes;

    private bool boolLewe = true;

    protected override async Task OnInitializedAsync()
    {
        TypSchodow = System.Net.WebUtility.UrlDecode(TypSchodow);

        if (TypSchodow != null && TypSchodow.Trim().EndsWith("prawo"))
        {
            boolLewe = false;
        }

        await Task.CompletedTask;

        Resetuj();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if(contextKPL == null)
                contextKPL = await canvasReferenceKPL.CreateCanvas2DAsync();

            await Task.Delay(10);

        }
    }

    // Calculation method
    private async void Oblicz(bool saveDxf)
    {
        // Sprawdzanie ograniczeń tak jak w JS
        if (DlugoscOtworu < SzerokoscBieguSchodow) DlugoscOtworu = SzerokoscBieguSchodow;
        if (DlugoscOtworu >= 30000) DlugoscOtworu = 29999;
        if (SzerokoscOtworu < SzerokoscBieguSchodow) SzerokoscOtworu = SzerokoscBieguSchodow;
        if (SzerokoscOtworu >= 30000) SzerokoscOtworu = 29999;
        if (DlugoscNaWejsciu < SzerokoscBieguSchodow) DlugoscNaWejsciu = SzerokoscBieguSchodow;
        if (DlugoscNaWejsciu >= 40000) DlugoscNaWejsciu = 39999;
        if (SkalaWyswietlania > 110) SkalaWyswietlania = 110;

        // Długość Linii Biegu
        DlugoscLiniiBiegu = Math.Round(DlugoscOtworu + DlugoscNaWejsciu - 2 * SzerokoscBieguSchodow + (150 * Math.PI + SzerokoscBieguSchodow - 600) - SzerokoscOstatniegoStopnia, 0);

        // Kąt Nachylenia
        KatNachylenia = Math.Round(Math.Atan((WysokoscCalkowita - (WysokoscCalkowita / LiczbaPodniesienStopni)) / DlugoscLiniiBiegu) * 180 / Math.PI, 2);

        // Szerokość Schodów
        SzerokoscSchodow = Math.Round(SzerokoscBieguSchodow, 0);

        // Wysokość Podniesienia Stopnia
        WysokoscPodniesieniaStopnia = Math.Round(WysokoscCalkowita / LiczbaPodniesienStopni, 0);

        // Głębokość Stopnia
        GlebokoscStopnia = Math.Round(DlugoscLiniiBiegu / (LiczbaPodniesienStopni - 1), 0);

        // Przeciętna Długość Kroku
        PrzecietnaDlugoscKroku = Math.Round(2 * WysokoscPodniesieniaStopnia + GlebokoscStopnia, 0);

        // Przestrzeń Swobodna nad Głową
        PrzestrzenSwobodnaNadGlowa = Math.Round(WysokoscDoStropu - WysokoscPodniesieniaStopnia - (DlugoscNaWejsciu - SzerokoscOtworu) * Math.Tan(KatNachylenia * Math.PI / 180), 0);

        // Jeśli saveDxf = true, wywołaj zapis DXF
        if (saveDxf)
        {
            // Aktualizacja kształtów
            await UpdateShapes(true);

            if (shapes == null) return;

            // Szukanie obiektów CSchody w liście shapes i zapisywanie do pliku DXF
            if (boolLewe)
            {
                foreach (var shape in shapes)
                {
                    if (shape is CSchodyL schody)
                    {
                        await schody.SaveToDxfAsync();
                    }
                }

            }
            else
            {
                foreach (var shape in shapes)
                {
                    if (shape is CSchodyP schody)
                    {
                        await schody.SaveToDxfAsync();
                    }
                }
            }

            await UpdateShapes();
        }
        else
        {
            await UpdateShapes();
        }
    }

    private async Task UpdateShapes(bool skala1do1 = false)
    {
        if (shapes != null) shapes.Clear();
        // Zainicjalizuj listę kształtów

        var skalaRys = (double)SkalaWyswietlania / 100;

        if (skala1do1)
        {
            skalaRys = 1;

            if (boolLewe)
            {
                shapes = new List<Shape>
                {
                    new CSchodyL(JSRuntime,  0, 0, skalaRys, DlugoscOtworu, SzerokoscOtworu, DlugoscNaWejsciu, WysokoscDoStropu, WysokoscCalkowita, LiczbaPodniesienStopni,
                    SzerokoscOstatniegoStopnia, SzerokoscBieguSchodow, DlugoscLiniiBiegu, KatNachylenia, SzerokoscSchodow, WysokoscPodniesieniaStopnia,
                    GlebokoscStopnia, PrzecietnaDlugoscKroku, PrzestrzenSwobodnaNadGlowa, TypSchodow, KatZabiegu, IloscSchodowZabiegowych + 1)
                };
            }
            else
            {
                shapes = new List<Shape>
                {
                    new CSchodyP(JSRuntime,  0, 0, skalaRys, DlugoscOtworu, SzerokoscOtworu, DlugoscNaWejsciu, WysokoscDoStropu, WysokoscCalkowita, LiczbaPodniesienStopni,
                    SzerokoscOstatniegoStopnia, SzerokoscBieguSchodow, DlugoscLiniiBiegu, KatNachylenia, SzerokoscSchodow, WysokoscPodniesieniaStopnia,
                    GlebokoscStopnia, PrzecietnaDlugoscKroku, PrzestrzenSwobodnaNadGlowa, TypSchodow, KatZabiegu, IloscSchodowZabiegowych + 1)
                };
            }

        }
        else
        {
            if (boolLewe)
            {
                shapes = new List<Shape>
                {
                    new CSchodyL(JSRuntime,  0, 0, skalaRys, DlugoscOtworu, SzerokoscOtworu, DlugoscNaWejsciu, WysokoscDoStropu, WysokoscCalkowita, LiczbaPodniesienStopni,
                    SzerokoscOstatniegoStopnia, SzerokoscBieguSchodow, DlugoscLiniiBiegu, KatNachylenia, SzerokoscSchodow, WysokoscPodniesieniaStopnia,
                    GlebokoscStopnia, PrzecietnaDlugoscKroku, PrzestrzenSwobodnaNadGlowa, TypSchodow, KatZabiegu, IloscSchodowZabiegowych + 1)
                };
            }
            else
            {
                shapes = new List<Shape>
                {
                    new CSchodyP(JSRuntime,  0, 0, skalaRys, DlugoscOtworu, SzerokoscOtworu, DlugoscNaWejsciu, WysokoscDoStropu, WysokoscCalkowita, LiczbaPodniesienStopni,
                    SzerokoscOstatniegoStopnia, SzerokoscBieguSchodow, DlugoscLiniiBiegu, KatNachylenia, SzerokoscSchodow, WysokoscPodniesieniaStopnia,
                    GlebokoscStopnia, PrzecietnaDlugoscKroku, PrzestrzenSwobodnaNadGlowa, TypSchodow, KatZabiegu, IloscSchodowZabiegowych + 1)
                };
            }

            await DrawShapes();
            await Task.Delay(10);
            await DrawShapes();

        }

    }

    private async Task DrawShapes()
    {
        if (shapes == null) return;

        if (contextKPL == null)
            contextKPL = await canvasReferenceKPL.CreateCanvas2DAsync();

        await contextKPL.ClearRectAsync(0, 0, DlugoscOtworu + 50, SzerokoscOtworu + 50); // Ustaw szerokość kanwy na większą, aby zmieścić oba kształty

        foreach (var shape in shapes)
        {
            await shape.DrawAsync(contextKPL);
        }
    }
    // Reset method
    private async void Resetuj()
    {
        var zapisaneZmiennie = await LocalStorage.GetStringAsync("_14_z_l");

        if (!string.IsNullOrEmpty(zapisaneZmiennie))
        {
            await OdczytajDomyslneWartosci();
            return;
        }
        // Resetowanie wartości
        DlugoscOtworu = 2500;
        SzerokoscOtworu = 1400;
        DlugoscNaWejsciu = 1900;
        WysokoscDoStropu = 2600;
        WysokoscCalkowita = 2800;
        LiczbaPodniesienStopni = 15;
        SzerokoscOstatniegoStopnia = 80;
        SzerokoscBieguSchodow = 850;
        KatZabiegu = 90;
        IloscSchodowZabiegowych = 5;

        // Reset wyników
        DlugoscLiniiBiegu = 0;
        KatNachylenia = 0;
        SzerokoscSchodow = 0;
        WysokoscPodniesieniaStopnia = 0;
        GlebokoscStopnia = 0;
        PrzecietnaDlugoscKroku = 0;
        PrzestrzenSwobodnaNadGlowa = 0;
    }

    private async Task ZapiszDomyslneWartosci()
    {
        // Tworzymy ciąg znaków zawierający wszystkie zmienne, oddzielone średnikami
        string wszystkieZmiennie = $"{DlugoscOtworu};{SzerokoscOtworu};{DlugoscNaWejsciu};{WysokoscDoStropu};{WysokoscCalkowita};" +
                                   $"{LiczbaPodniesienStopni};{SzerokoscOstatniegoStopnia};{SzerokoscBieguSchodow};{KatZabiegu};{IloscSchodowZabiegowych};" +
                                   $"{DlugoscLiniiBiegu};{KatNachylenia};{SzerokoscSchodow};{WysokoscPodniesieniaStopnia};{GlebokoscStopnia};" +
                                   $"{PrzecietnaDlugoscKroku};{PrzestrzenSwobodnaNadGlowa}";

        // Zapisujemy ciąg znaków do LocalStorage
        await LocalStorage.SaveStringAsync("_14_z_l", wszystkieZmiennie);

    }

    // Metoda do odczytu danych z LocalStorage i przypisania ich do zmiennych
    private async Task OdczytajDomyslneWartosci()
    {
        // Odczytujemy dane z LocalStorage
        var zapisaneZmiennie = await LocalStorage.GetStringAsync("_14_z_l");

        if (!string.IsNullOrEmpty(zapisaneZmiennie))
        {
            // Rozdzielamy dane na poszczególne wartości przy pomocy Split
            var zmienneArray = zapisaneZmiennie.Split(';');

            // Przypisujemy odczytane wartości do odpowiednich zmiennych
            DlugoscOtworu = double.Parse(zmienneArray[0]);
            SzerokoscOtworu = double.Parse(zmienneArray[1]);
            DlugoscNaWejsciu = double.Parse(zmienneArray[2]);
            WysokoscDoStropu = double.Parse(zmienneArray[3]);
            WysokoscCalkowita = double.Parse(zmienneArray[4]);
            LiczbaPodniesienStopni = int.Parse(zmienneArray[5]);
            SzerokoscOstatniegoStopnia = double.Parse(zmienneArray[6]);
            SzerokoscBieguSchodow = double.Parse(zmienneArray[7]);
            KatZabiegu = double.Parse(zmienneArray[8]);
            IloscSchodowZabiegowych = int.Parse(zmienneArray[9]);

            // Odczyt resetowanych zmiennych
            DlugoscLiniiBiegu = double.Parse(zmienneArray[10]);
            KatNachylenia = double.Parse(zmienneArray[11]);
            SzerokoscSchodow = double.Parse(zmienneArray[12]);
            WysokoscPodniesieniaStopnia = double.Parse(zmienneArray[13]);
            GlebokoscStopnia = double.Parse(zmienneArray[14]);
            PrzecietnaDlugoscKroku = double.Parse(zmienneArray[15]);
            PrzestrzenSwobodnaNadGlowa = double.Parse(zmienneArray[16]);
        }
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
}
