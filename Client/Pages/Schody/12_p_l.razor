@page "/_12_p_l/{TypSchodow}"

@inject Utilities.ILocalStorage LocalStorage
@using System.Text.Json
@inject IMessageService _message
@inject HttpClient Http

<h3>Obliczenia Schodów typu: @TypSchodow</h3>
<Button class="btn-back" OnClick="GoBack">Wróć do poprzedniej strony</Button>
<Divider></Divider>
<Collapse Animation>
    <Panel Header="Parametry wykonania schodów" Key="1">
        <div style="display: grid; grid-template-columns: repeat(5, 1fr); gap: 5px 10px; align-items: center;">
            <!-- Form inputs -->
            <!-- Długość Otworu -->
            <div style="display: flex; align-items: center; gap: 5px;">
                <label style="font-weight: bold; color: forestgreen;">Długość Otworu:</label>
                <input style="font-weight: bold; color: forestgreen; width: 8ch;" type="number" @bind="DlugoscOtworu" @onclick="()=> Oblicz(false)" />
            </div>
            <!-- Szerokość Otworu -->
            <div style="display: flex; align-items: center; gap: 5px;">
                <label style="font-weight: bold; color: forestgreen;">Szerokość Otworu:</label>
                <input style="font-weight: bold; color: forestgreen; width: 8ch;" type="number" @bind="SzerokoscOtworu" />
            </div>
            <!-- Długość na Wejściu -->
            <div style="display: flex; align-items: center; gap: 5px;">
                <label style="font-weight: bold; color: crimson;">Długość na Wejściu:</label>
                <Tooltip Placement="@Placement.Top" Title="Całkowita długość schodów.">
                    <input style="font-weight: bold; color: crimson; width: 8ch;" type="number" @bind="DlugoscNaWejsciu" @onclick="()=> Oblicz(false)" />
                </Tooltip>
            </div>
            <!-- Wysokość do Stropu -->
            <div style="display: flex; align-items: center; gap: 5px;">
                <label style="font-weight: bold; color: forestgreen;">Wysokość do Stropu:</label>
                <input style="font-weight: bold; color: forestgreen; width: 8ch;" type="number" @bind="WysokoscDoStropu" />
            </div>
            <!-- Wysokość Całkowita -->
            <div style="display: flex; align-items: center; gap: 5px;">
                <label style="font-weight: bold; color: crimson;">Wysokość Całkowita:</label>
                <input style="font-weight: bold; color: crimson; width: 8ch;" type="number" @bind="WysokoscCalkowita" />
            </div>
            <!-- Liczba Podniesień Stopni -->
            <div style="display: flex; align-items: center; gap: 5px;">
                <label style="font-weight: bold; color: crimson;">Liczba Podniesień Stopni:</label>
                <input style="font-weight: bold; color: crimson; width: 8ch;" type="number" @bind="LiczbaPodniesienStopni" @onclick="()=> Oblicz(false)" />
            </div>
            <div style="display: flex; align-items: center; gap: 5px;">
                <label style="font-weight: bold; color: forestgreen;">Szerokość Ostatniego Stopnia:</label>
                <input type="number" @bind="SzerokoscOstatniegoStopnia" />
            </div>
            <!-- Szerokość Biegu Schodów -->
            <div style="display: flex; align-items: center; gap: 5px;">
                <label style="font-weight: bold; color: forestgreen;">Szerokość Biegu Schodów:</label>
                <input style="font-weight: bold; color: forestgreen; width: 8ch;" type="number" @bind="SzerokoscBieguSchodow" />
            </div>
            <!-- Długość Podestu -->
            <div style="display: flex; align-items: center; gap: 5px;">
                <label style="font-weight: bold; color: forestgreen;">Długość Podestu:</label>
                <input type="number" @bind="PodestDlugosc" />
            </div>
            <!-- Szerokość Podestu -->
            <div style="display: flex; align-items: center; gap: 5px;">
                <label style="font-weight: bold; color: forestgreen;">Szerokość Podestu:</label>
                <input type="number" @bind="PodestSzerokosc" />
            </div>
            <!-- Podest jako Stopień nr -->
            <div style="display: flex; align-items: center; gap: 5px;">
                <label style="font-weight: bold; color: forestgreen;">Podest jako Stopień nr:</label>
                <input type="number" @bind="PodestJakoStopienNr" />
            </div>
        </div>
    </Panel>
</Collapse>

<!-- Buttons -->
<button @onclick="()=> Oblicz(false)">Oblicz</button>
<button @onclick="Resetuj">Reset</button>

<!-- Results -->
<h4>Wyniki:</h4>
<label>Uwaga! SCHODY Z PODESTEM <br>Głębokość stopnia (przeunięcie) liczona jest na WYJŚCIU. Na WEJŚCIU dodawane są wyliczone stopnie</label>
<div>
    <div>
        <p style="margin: 0;">Długość Linii Biegu: @DlugoscLiniiBiegu</p>
    </div>

    <div>
        <p style="margin: 0;">Kąt Nachylenia: @Math.Round(KatNachylenia, 3)</p>
    </div>

    <div style="display: flex; align-items: center; gap: 25px;">
        <p style="margin: 0;">Szerokość Schodów: @SzerokoscSchodow</p>
        <Tooltip Placement="Placement.TopLeft" Title="Szerokość schodów">
            <span style="margin: 0; color:@(SzerokoscSchodow >= 800 ? "green" : "red");">>= 800 mm</span>
        </Tooltip>
    </div>

    <div style="display: flex; align-items: center; gap: 25px;">
        <p style="margin: 0;">Wysokość Podniesienia Stopnia: @WysokoscPodniesieniaStopnia</p>
        <span style="margin: 0; color:@(WysokoscPodniesieniaStopnia < 140 || WysokoscPodniesieniaStopnia > 200 ? "red" : "green");">
            140 - 200 mm
        </span>
    </div>

    <div style="display: flex; align-items: center; gap: 25px;">
        <p style="margin: 0; color: darkblue; font-style: oblique; font-weight: bold;">Głębokość Stopnia: @(Math.Round(GlebokoscStopnia, 2)) </p>
        <span style="margin: 0; color:@(GlebokoscStopnia < 220 || GlebokoscStopnia > 350 ? "red" : "green");">
            220 - 350 mm
        </span>
    </div>

    <div style="display: flex; align-items: center; gap: 25px;">
        <p style="margin: 0;">Przeciętna Długość Kroku: @PrzecietnaDlugoscKroku</p>
        <span style="margin: 0; color:@(PrzecietnaDlugoscKroku < 600 || PrzecietnaDlugoscKroku > 650 ? "red" : "green");">
            600 - 650 mm
        </span>
    </div>

    <div style="display: flex; align-items: center; gap: 25px;">
        <p style="margin: 0;">Przestrzeń Swobodna nad Głową: @PrzestrzenSwobodnaNadGlowa</p>
        <span style="margin: 0; color:@(PrzestrzenSwobodnaNadGlowa >= 2000 ? "green" : "red");">
            > 2000 mm
        </span>
    </div>
</div>

@code {
    [Parameter]
    public string? TypSchodow { get; set; }

    [Inject]
    private IJSRuntime? JSRuntime { get; set; }

    // Input properties
    private double DlugoscOtworu { get; set; }
    private double SzerokoscOtworu { get; set; }
    private double DlugoscNaWejsciu { get; set; }
    private double WysokoscDoStropu { get; set; }
    private double WysokoscCalkowita { get; set; }
    private double LiczbaPodniesienStopni { get; set; }
    private double SzerokoscOstatniegoStopnia { get; set; }
    private double SzerokoscBieguSchodow { get; set; }
    private double PodestDlugosc { get; set; }
    private double PodestSzerokosc { get; set; }
    private double PodestJakoStopienNr { get; set; }

    // Output properties
    private double DlugoscLiniiBiegu { get; set; }
    private double KatNachylenia { get; set; }
    private double SzerokoscSchodow { get; set; }
    private double WysokoscPodniesieniaStopnia { get; set; }
    private double GlebokoscStopnia { get; set; }
    private double PrzecietnaDlugoscKroku { get; set; }
    private double PrzestrzenSwobodnaNadGlowa { get; set; }

    protected override async Task OnInitializedAsync()
    {
        TypSchodow = System.Net.WebUtility.UrlDecode(TypSchodow);
        await Task.CompletedTask;
    }

    // Calculation method
    private void Oblicz(bool saveDxf)
    {
        // Walidacja tak jak w JS
        if (DlugoscOtworu < SzerokoscBieguSchodow) DlugoscOtworu = SzerokoscBieguSchodow;
        if (DlugoscOtworu >= 30000) DlugoscOtworu = 29999;
        if (SzerokoscOtworu < SzerokoscBieguSchodow) SzerokoscOtworu = SzerokoscBieguSchodow;
        if (SzerokoscOtworu >= 30000) SzerokoscOtworu = 29999;
        if (DlugoscNaWejsciu < SzerokoscBieguSchodow) DlugoscNaWejsciu = SzerokoscBieguSchodow;
        if (DlugoscNaWejsciu >= 40000) DlugoscNaWejsciu = 39999;
        if (WysokoscDoStropu > WysokoscCalkowita) WysokoscDoStropu = WysokoscCalkowita;
        if (WysokoscDoStropu >= 6000) WysokoscDoStropu = 5999;
        if (WysokoscCalkowita < WysokoscDoStropu) WysokoscCalkowita = WysokoscDoStropu;
        if (WysokoscCalkowita >= 7000) WysokoscCalkowita = 6999;
        if (LiczbaPodniesienStopni <= 2) LiczbaPodniesienStopni = 3;
        if (LiczbaPodniesienStopni >= 30) LiczbaPodniesienStopni = 29;
        if (SzerokoscOstatniegoStopnia < 0) SzerokoscOstatniegoStopnia = 0;
        if (SzerokoscOstatniegoStopnia > (SzerokoscOtworu - SzerokoscBieguSchodow)) SzerokoscOstatniegoStopnia = SzerokoscOtworu - SzerokoscBieguSchodow;
        if (SzerokoscBieguSchodow <= 400) SzerokoscBieguSchodow = 400;
        if (PodestDlugosc < 600) PodestDlugosc = 600;
        if (PodestDlugosc > (DlugoscOtworu - SzerokoscOstatniegoStopnia - 210)) PodestDlugosc = DlugoscOtworu - SzerokoscOstatniegoStopnia - 210;
        if (PodestSzerokosc < 600) PodestSzerokosc = 600;
        if (PodestDlugosc > SzerokoscOtworu) PodestSzerokosc = SzerokoscOtworu;
        if (PodestJakoStopienNr < 0) PodestJakoStopienNr = 1;
        if (PodestJakoStopienNr > (LiczbaPodniesienStopni - 1)) PodestJakoStopienNr = LiczbaPodniesienStopni - 1;

        // Obliczenia
        GlebokoscStopnia = Math.Round((SzerokoscOtworu - SzerokoscOstatniegoStopnia - PodestSzerokosc + 40) / (LiczbaPodniesienStopni - PodestJakoStopienNr - 1), 2);
        WysokoscPodniesieniaStopnia = Math.Round(WysokoscCalkowita / LiczbaPodniesienStopni, 2);
        KatNachylenia = Math.Round(Math.Atan(WysokoscPodniesieniaStopnia / GlebokoscStopnia) * 180 / Math.PI, 2);
        DlugoscNaWejsciu = Math.Round(PodestSzerokosc + GlebokoscStopnia * (PodestJakoStopienNr - 1), 2);
        DlugoscLiniiBiegu = Math.Round(GlebokoscStopnia * (LiczbaPodniesienStopni - 2) + PodestSzerokosc + DlugoscOtworu - SzerokoscBieguSchodow - 258, 2);
        PrzestrzenSwobodnaNadGlowa = Math.Round(WysokoscDoStropu - WysokoscPodniesieniaStopnia - ((PodestSzerokosc + GlebokoscStopnia * (PodestJakoStopienNr - 1)) - SzerokoscOtworu) * Math.Tan(KatNachylenia * Math.PI / 180), 2);
        SzerokoscSchodow = Math.Round(SzerokoscBieguSchodow, 2);
        PrzecietnaDlugoscKroku = Math.Round(2 * WysokoscPodniesieniaStopnia + GlebokoscStopnia, 2);
    }

    // Reset method
    private void Resetuj()
    {
        // Resetowanie wartości
        DlugoscOtworu = 2500;
        SzerokoscOtworu = 2700;
        DlugoscNaWejsciu = 2405.8;
        WysokoscDoStropu = 2500;
        WysokoscCalkowita = 2850;
        LiczbaPodniesienStopni = 15;
        SzerokoscOstatniegoStopnia = 100;
        SzerokoscBieguSchodow = 950;
        PodestDlugosc = 2500;
        PodestSzerokosc = 1000;
        PodestJakoStopienNr = 7;

        // Reset wyników
        DlugoscLiniiBiegu = 0;
        KatNachylenia = 0;
        SzerokoscSchodow = 0;
        WysokoscPodniesieniaStopnia = 0;
        GlebokoscStopnia = 0;
        PrzecietnaDlugoscKroku = 0;
        PrzestrzenSwobodnaNadGlowa = 0;
    }

    private async Task GoBack()
    {
        if (JSRuntime != null)
            await JSRuntime.InvokeVoidAsync("history.back");
        await Task.CompletedTask;
    }
}
