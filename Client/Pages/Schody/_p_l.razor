@page "/_p_l/{TypSchodow}"

@inject Utilities.ILocalStorage LocalStorage
@using System.Text.Json
@inject IMessageService _message
@inject HttpClient Http

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Obliczenia Schodów</title>
    <base href="/" />
    <link href="css/app.css" rel="stylesheet" />

</head>
<body>

    <app>Czekaj na załadowanie danych...</app> <!-- Upewnij się, że to jest jedyny komponent w tym elemencie -->

    <script>
        function clearConsole() {
        console.clear();
        }

        function setCanvasSize(scale, DlugoscNaWejsciu, WysokoscCalkowita, SzerokoscSchodow, IloscStopni, WyskoscPodnoszenia, MarginesPrawy) {
        const maxWidth = Math.floor(window.innerWidth * 0.8); // Użyj Math.floor dla wartości całkowitych
        const maxHeight = Math.floor(window.innerHeight * 0.8); // Użyj Math.floor dla wartości całkowitych

        // Sprawdź wartości i ustaw domyślnie na 1000, jeśli są równe 0
        const calculatedWidth = DlugoscNaWejsciu || 1400; // Zmieniono 0 na 1400
        const calculatedHeight = (WysokoscCalkowita + SzerokoscSchodow) || 1000; // Zmieniono 0 na 1000

        // Użyj Math.floor, aby zapewnić, że wartości są całkowite
        const width = Math.floor(Math.min(maxWidth, scale * (calculatedWidth > 0 ? calculatedWidth : 1400)) + MarginesPrawy * scale);
        const height = Math.floor(Math.min(maxHeight, scale * (calculatedHeight > 0 ? calculatedHeight : 1000)) + ((IloscStopni + 1) * WyskoscPodnoszenia) * scale);

        console.log("Width:", width, "Height:", height); // Dodaj logi

        return { width: width, height: height }; // Zwróć wartości jako liczby całkowite
        }

        function downloadFile(fileName, mimeType, contentBase64) {
        const element = document.createElement("a");
        element.setAttribute("href", `data:${mimeType};base64,${contentBase64}`);
        element.setAttribute("download", fileName);
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
        }

        function downloadFileGCode(fileName, contentBase64) {
        const element = document.createElement("a");
        element.setAttribute("href", "data:application/octet-stream;base64," + contentBase64);
        element.setAttribute("download", fileName);
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
        }

        function captureCanvas(canvasId) {
            var canvas = document.getElementById(canvasId);
            return canvas.toDataURL("image/png").replace("data:image/png;base64,", "");
        }

    </script>



    @*     <script src="_framework/blazor.webassembly.js"></script> *@

    <h3>Obliczenia Schodów typu: @TypSchodow</h3>


    <Button class="btn-back" OnClick="GoBack">Wróć do poprzedniej strony</Button>
    <Divider> Podaj nazwę programu CNC: <input style="font-weight: bold; color: forestgreen; width: 8ch;" type="text" @bind="NazwaProgramuCNC" /></Divider>
    <Collapse Animation>
        <Panel Header="Parametry wykonania schodów" Key="1">

            <div style="display: grid; grid-template-columns: repeat(5, 1fr); gap: 5px 10px; align-items: center;">

                <!-- Długość Otworu -->
                <div style="display: flex; align-items: center; gap: 5px;">
                    <label style="font-weight: bold; color: forestgreen;">Długość Otworu:</label>
                    <input style="font-weight: bold; color: forestgreen; width: 8ch;" type="number" @bind="DlugoscOtworu" @onclick="()=> Oblicz(false)" />
                </div>

                <!-- Szerokość Otworu -->
                <div style="display: flex; align-items: center; gap: 5px;">
                    <label style="font-weight: bold; color: forestgreen;">Szerokość Otworu:</label>
                    <input style="font-weight: bold; color: forestgreen; width: 8ch;" type="number" @bind="SzerokoscOtworu" />
                </div>

                <!-- Długość na Wejściu -->
                <div style="display: flex; align-items: center; gap: 5px;">
                    <label style="font-weight: bold; color: crimson;">Długość na Wejściu:</label>
                    <Tooltip Placement="@Placement.Top" Title="Całkowita długość schodów.">
                        <input style="font-weight: bold; color: crimson; width: 8ch;" type="number" @bind="DlugoscNaWejsciu" @onclick="()=> Oblicz(false)" />
                    </Tooltip>
                </div>

                <!-- Wysokość do Stropu -->
                <div style="display: flex; align-items: center; gap: 5px;">
                    <label style="font-weight: bold; color: forestgreen;">Wysokość do Stropu:</label>
                    <input style="font-weight: bold; color: forestgreen; width: 8ch;" type="number" @bind="WysokoscDoStropu" />
                </div>

                <!-- Wysokość Całkowita -->
                <div style="display: flex; align-items: center; gap: 5px;">
                    <label style="font-weight: bold; color: crimson;">Wysokość Całkowita:</label>
                    <input style="font-weight: bold; color: crimson; width: 8ch;" type="number" @bind="WysokoscCalkowita" />
                </div>

                <!-- Liczba Podniesień Stopni -->
                <div style="display: flex; align-items: center; gap: 5px;">
                    <label style="font-weight: bold; color: crimson;">Liczba Podniesień Stopni:</label>
                    <input style="font-weight: bold; color: crimson; width: 8ch;" type="number" @bind="LiczbaPodniesienStopni" @onclick="()=> Oblicz(false)" />
                </div>

                <!-- Wydłuż ostatni stopień -->
                <div style="display: flex; align-items: center; gap: 5px;">
                    <label style="font-weight: bold; color: crimson;">Wydłuż ostatni stopień o:</label>
                    <input style="font-weight: bold; color: crimson; width: 8ch;" type="number" @bind="WydluzOstatniStopien" />
                </div>

                <!-- Zachodzenie stopni za siebie -->
                <div style="display: flex; align-items: center; gap: 5px;">
                    <label style="font-weight: bold; color: crimson;">Zachodzenie stopni za siebie:</label>
                    <input style="font-weight: bold; color: crimson; width: 8ch;" type="number" @bind="ZachodzenieStopniZaSiebie" @onclick="()=> Oblicz(false)" />
                </div>

                <!-- Odsadzenie stopni od brzegu u góry -->
                <div style="display: flex; align-items: center; gap: 5px;">
                    <label style="font-weight: bold; color: crimson;">Odsadzenie stopni od brzegu u góry:</label>
                    <input style="font-weight: bold; color: crimson; width: 8ch;" type="number" @bind="OsadzenieOdGory" @onclick="()=> Oblicz(false)" />
                </div>

                <!-- Odsadzenie stopni od brzegu u dołu -->
                <div style="display: flex; align-items: center; gap: 5px;">
                    <label style="font-weight: bold; color: crimson;">Odsadzenie stopni od brzegu u dołu:</label>
                    <input style="font-weight: bold; color: crimson; width: 8ch;" type="number" @bind="OsadzenieOdDolu" />
                </div>

                <!-- Szerokość Biegu Schodów -->
                <div style="display: flex; align-items: center; gap: 5px;">
                    <label style="font-weight: bold; color: forestgreen;">Szerokość Biegu Schodów:</label>
                    <input style="font-weight: bold; color: forestgreen; width: 8ch;" type="number" @bind="SzerokoscBieguSchodow" />
                </div>

                <!-- Skala wyświetlania -->
                <div style="display: flex; flex-direction: column; gap: 5px;">
                    <label style="font-weight: bold; color: forestgreen;">Skala wyświetlania @SkalaWyswietlania [%]:</label>
                    <Slider TValue="double" Min="1" Max="100" Step="1" @bind-Value="@SkalaWyswietlania" />
                </div>

            </div>


        </Panel>
    </Collapse>

    <!-- Calculation and reset buttons -->
    <button @onclick="()=> Oblicz(false)">Rysuj schody</button>
    <button @onclick="()=> Oblicz(true)">Zapisz do DXF</button>
    <button @onclick="Resetuj">Reset</button>
    <button @onclick="SaveToLocalStorage">Ustaw jako domyślne</button>
    <button @onclick="()=> GerujCNCCode()">Generuj program CNC</button>


    <div style="display: flex; gap: 25px;">
        <!-- Results -->
        <div style="min-width: 240px;">
            <h4>Wyniki:</h4>
            <div>
                <p style="margin: 0;">Długość Linii Biegu: @DlugoscLiniiBiegu</p>
            </div>
            <div>
                <p style="margin: 0;">Kąt Nachylenia: @Math.Round(KatNachylenia, 3)</p>
            </div>
            <div style="display: flex; align-items: center; gap: 25px;">
                <p style="margin: 0;">Szerokość Schodów: @SzerokoscSchodow</p>
                <Tooltip Placement="Placement.TopLeft" Title="Szerokość schodów">
                    <span style="margin: 0; color:@(SzerokoscSchodow >= 800 ? "green" : "red");">>= 800 mm</span>
                </Tooltip>
            </div>

            <div style="display: flex; align-items: center; gap: 25px;">
                <p style="margin: 0;">Wysokość Podniesienia Stopnia: @WysokoscPodniesieniaStopnia</p>
                <span style="margin: 0; color:@(WysokoscPodniesieniaStopnia < 140 || WysokoscPodniesieniaStopnia > 200 ? "red" : "green");">
                    140 - 200 mm
                </span>
            </div>

            <div style="display: flex; align-items: center; gap: 25px;">
                <p style="margin: 0; color: darkblue; font-style: oblique; font-weight: bold;">Głębokość Stopnia: @(Math.Round(GlebokoscStopnia + ZachodzenieStopniZaSiebie, 2)) [@((Math.Round(GlebokoscStopnia, 2)))]</p>
                <span style="margin: 0; color:@(GlebokoscStopnia + ZachodzenieStopniZaSiebie < 220 || GlebokoscStopnia + ZachodzenieStopniZaSiebie > 350 ? "red" : "green");">
                    220 - 350 mm
                </span>
            </div>

            <div style="display: flex; align-items: center; gap: 25px;">
                <p style="margin: 0;">Przeciętna Długość Kroku: @PrzecietnaDlugoscKroku</p>
                <span style="margin: 0; color:@(PrzecietnaDlugoscKroku < 600 || PrzecietnaDlugoscKroku > 650 ? "red" : "green");">
                    600 - 650 mm
                </span>
            </div>
            <div style="display: flex; align-items: center; gap: 25px;">
                <p style="margin: 0;">Przestrzeń Swobodna nad Głową: @PrzestrzenSwobodnaNadGlowa</p>
                <span style="margin: 0; color:@(PrzestrzenSwobodnaNadGlowa >= 2000 ? "green" : "red");">
                    > 2000 mm
                </span>
            </div>
        </div>
        <!-- Drawing canvas -->
        <div>
            <h4>Rysunek schodów:</h4>

            <div style="overflow: auto; width: @(canvasWidth)px; height: @(canvasHeight)px;">
                <BECanvas Width="@(Convert.ToInt64(canvasWidth))" Height="@(Convert.ToInt64(canvasHeight))" @ref="canvasReferenceKPL"></BECanvas>
            </div>

        </div>

    </div>
</body>
</html>

@code {
    [Parameter]
    public string? TypSchodow { get; set; }


    [Inject]
    private IJSRuntime? JSRuntime { get; set; }

    // Input properties
    private double DlugoscOtworu { get; set; } = 1000;
    private double SzerokoscOtworu { get; set; } = 1000;
    private double DlugoscNaWejsciu { get; set; } = 2000;
    private double WysokoscDoStropu { get; set; } = 1000;
    private double WysokoscCalkowita { get; set; } = 3000;
    private double LiczbaPodniesienStopni { get; set; } = 10;
    private double WydluzOstatniStopien { get; set; } = 0;
    private double ZachodzenieStopniZaSiebie { get; set; } = 0;
    private double OsadzenieOdGory { get; set; } = 20;
    private double OsadzenieOdDolu { get; set; } = 20;
    private double SzerokoscBieguSchodow { get; set; } = 1000;

    // Output properties (results)
    private double DlugoscLiniiBiegu { get; set; } = 1000;
    private double KatNachylenia { get; set; } = 45;
    private double SzerokoscSchodow { get; set; } = 800;
    private double WysokoscPodniesieniaStopnia { get; set; } = 100;
    private double GlebokoscStopnia { get; set; } = 100;
    private double PrzecietnaDlugoscKroku { get; set; } = 100;
    private double PrzestrzenSwobodnaNadGlowa { get; set; } = 1000;

    private double SkalaWyswietlania { get; set; } = 25;

    private string NazwaProgramuCNC { get; set; } = "";

    private BECanvasComponent? canvasReferenceKPL;
    private Canvas2DContext? contextKPL;
    private List<Shape>? shapes;

    private bool boolLewe = true;

    protected override async Task OnInitializedAsync()
    {

        TypSchodow = System.Net.WebUtility.UrlDecode(TypSchodow);

        if (TypSchodow != null && TypSchodow.Trim().EndsWith("prawo"))
        {
            boolLewe = false;
        }

        await LoadFromLocalStorage();

        await Task.CompletedTask;
    }

    public class CanvasDimensions
    {
        public double Width { get; set; }
        public double Height { get; set; }
    }


    private double canvasWidth = 0;
    private double canvasHeight = 0;
    // W metodzie OnAfterRenderAsync
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (SkalaWyswietlania == 0) SkalaWyswietlania = 100;
            if (DlugoscNaWejsciu == 0) DlugoscNaWejsciu = 3000;
            if (WysokoscCalkowita == 0) WysokoscCalkowita = 3000;
            if (SzerokoscSchodow == 0) SzerokoscSchodow = 1000;

            if (JSRuntime != null)
            {
                await Task.Delay(100); // Opóźnienie przed wywołaniem
                var dimensions = await JSRuntime.InvokeAsync<CanvasDimensions>(
                    "setCanvasSize",
                    SkalaWyswietlania / 100,
                    DlugoscNaWejsciu,
                    WysokoscCalkowita,
                    SzerokoscSchodow,
                    15,
                    200,
                    500
                );

                canvasWidth = Convert.ToDouble(dimensions.Width);
                canvasHeight = Convert.ToDouble(dimensions.Height);

            }

            StateHasChanged();

            if (contextKPL == null)
                contextKPL = await canvasReferenceKPL.CreateCanvas2DAsync();
        }
    }


    // Calculation method
    private async Task Oblicz(bool saveDxf)
    {
        // Walidacja
        if (DlugoscOtworu < SzerokoscBieguSchodow) DlugoscOtworu = SzerokoscBieguSchodow;
        if (DlugoscOtworu >= 30000) DlugoscOtworu = 29999;
        if (SzerokoscOtworu < SzerokoscBieguSchodow) SzerokoscOtworu = SzerokoscBieguSchodow;
        if (SzerokoscOtworu >= 30000) SzerokoscOtworu = 29999;
        if (DlugoscNaWejsciu < SzerokoscBieguSchodow) DlugoscNaWejsciu = SzerokoscBieguSchodow;
        if (DlugoscNaWejsciu >= 40000) DlugoscNaWejsciu = 39999;
        if (WysokoscDoStropu > WysokoscCalkowita) WysokoscDoStropu = WysokoscCalkowita;
        if (WysokoscDoStropu >= 6000) WysokoscDoStropu = 5999;
        if (WysokoscCalkowita < WysokoscDoStropu) WysokoscCalkowita = WysokoscDoStropu;
        if (WysokoscCalkowita >= 7000) WysokoscCalkowita = 6999;
        if (LiczbaPodniesienStopni <= 2) LiczbaPodniesienStopni = 3;
        if (LiczbaPodniesienStopni >= 30) LiczbaPodniesienStopni = 29;

        if (WydluzOstatniStopien < -120 || WydluzOstatniStopien > 120) WydluzOstatniStopien = 0;

        if (SzerokoscBieguSchodow <= 400) SzerokoscBieguSchodow = 400;
        if (ZachodzenieStopniZaSiebie < -200 || ZachodzenieStopniZaSiebie > 200) ZachodzenieStopniZaSiebie = 0;
        if (OsadzenieOdGory < -120 || OsadzenieOdGory > 120) OsadzenieOdGory = 20;
        if (OsadzenieOdDolu < -120 || OsadzenieOdDolu > 150) OsadzenieOdDolu = 20;


        // Obliczenia
        WysokoscPodniesieniaStopnia = Math.Round(WysokoscCalkowita / LiczbaPodniesienStopni, 2);
        DlugoscLiniiBiegu = Math.Round(DlugoscNaWejsciu, 2);

        KatNachylenia = Math.Round(Math.Atan((WysokoscCalkowita - (WysokoscCalkowita / LiczbaPodniesienStopni)) / (DlugoscLiniiBiegu - 65)) * 180 / Math.PI, 8);//gdzie -65 jest to wartość odsunięcia na zaczep górny


        PrzestrzenSwobodnaNadGlowa = Math.Round(WysokoscDoStropu - WysokoscPodniesieniaStopnia - (DlugoscNaWejsciu - DlugoscOtworu) * Math.Tan(KatNachylenia * Math.PI / 180), 2);
        SzerokoscSchodow = Math.Round(SzerokoscBieguSchodow, 2);
        GlebokoscStopnia = Math.Round(DlugoscLiniiBiegu / (LiczbaPodniesienStopni - 1), 2);
        PrzecietnaDlugoscKroku = Math.Round(2 * WysokoscPodniesieniaStopnia + GlebokoscStopnia, 2);


        if (JSRuntime != null)
        {
            await Task.Delay(100); // Opóźnienie przed wywołaniem
            var dimensions = await JSRuntime.InvokeAsync<CanvasDimensions>(
                "setCanvasSize",
                SkalaWyswietlania / 100,
                DlugoscNaWejsciu,
                WysokoscCalkowita,
                SzerokoscSchodow,
                LiczbaPodniesienStopni,
                WysokoscPodniesieniaStopnia,
                3 * GlebokoscStopnia + 100
            );

            canvasWidth = Convert.ToDouble(dimensions.Width);
            canvasHeight = Convert.ToDouble(dimensions.Height);

            if (canvasWidth < 1000) canvasWidth = 1000;

        }

        StateHasChanged();

        // Jeśli saveDxf = true, wywołaj zapis DXF
        if (saveDxf)
        {
            // Aktualizacja kształtów
            await UpdateShapes(true); //- true to mam być domyślne skala 1:1

            if (shapes == null) return;

            // Szukanie obiektów CSchody w liście shapes i zapisywanie do pliku DXF
            if (boolLewe)
            {
                foreach (var shape in shapes)
                {
                    if (shape is CSchodyPL schody)
                    {
                        await schody.SaveToDxfAsync();
                    }
                }

            }
            else
            {
                foreach (var shape in shapes)
                {
                    if (shape is CSchodyPL schody)
                    {
                        await schody.SaveToDxfAsync();
                    }
                }
            }

            await UpdateShapes();
        }
        else
        {
            await UpdateShapes();
        }
    }


    private async Task GerujCNCCode()
    {
        if (shapes == null) return;

        await UpdateShapes(true); //- true to mam być domyślne skala 1:1

        string kiedunekSCH = "l";

        if (TypSchodow != null && TypSchodow.Trim().EndsWith("prawo"))
        {
            kiedunekSCH = "p";
        }

        foreach (var shape in shapes)
        {
            if (shape is CSchodyPL schody)
            {
                await schody.SaveToDxfAndGCodeAsync(kiedunekSCH, Http);
            }
        }

        await UpdateShapes();
    }

    private async Task UpdateShapes(bool skala1do1 = false)
    {
        if (shapes != null) shapes.Clear();
        // Zainicjalizuj listę kształtów

        if (string.IsNullOrEmpty(TypSchodow)) TypSchodow = "???";

        var skalaRys = (double)SkalaWyswietlania / 100;

        if (skala1do1)
        {
            skalaRys = 1;

            if (boolLewe)
            {
                shapes = new List<Shape>
                {
                    new CSchodyPL(JSRuntime, 50, 0, skalaRys, DlugoscOtworu, SzerokoscOtworu, DlugoscNaWejsciu, WysokoscDoStropu, WysokoscCalkowita, LiczbaPodniesienStopni,
                    WydluzOstatniStopien, ZachodzenieStopniZaSiebie, OsadzenieOdGory, OsadzenieOdDolu, SzerokoscBieguSchodow, DlugoscLiniiBiegu, KatNachylenia, SzerokoscSchodow, WysokoscPodniesieniaStopnia,
                    GlebokoscStopnia, PrzecietnaDlugoscKroku, PrzestrzenSwobodnaNadGlowa, TypSchodow, 'l', NazwaProgramuCNC)
                };
            }
            else
            {
                shapes = new List<Shape>
                {
                    new CSchodyPL(JSRuntime,  50, 0, skalaRys, DlugoscOtworu, SzerokoscOtworu, DlugoscNaWejsciu, WysokoscDoStropu, WysokoscCalkowita, LiczbaPodniesienStopni,
                    WydluzOstatniStopien, ZachodzenieStopniZaSiebie, OsadzenieOdGory, OsadzenieOdDolu, SzerokoscBieguSchodow, DlugoscLiniiBiegu, KatNachylenia, SzerokoscSchodow, WysokoscPodniesieniaStopnia,
                    GlebokoscStopnia, PrzecietnaDlugoscKroku, PrzestrzenSwobodnaNadGlowa, TypSchodow, 'p', NazwaProgramuCNC)
                };
            }

            await DrawShapes();

        }
        else
        {

            if (boolLewe)
            {
                shapes = new List<Shape>
                {
                    new CSchodyPL(JSRuntime,  50, 0, skalaRys, DlugoscOtworu, SzerokoscOtworu, DlugoscNaWejsciu, WysokoscDoStropu, WysokoscCalkowita, LiczbaPodniesienStopni,
                    WydluzOstatniStopien, ZachodzenieStopniZaSiebie, OsadzenieOdGory, OsadzenieOdDolu, SzerokoscBieguSchodow, DlugoscLiniiBiegu, KatNachylenia, SzerokoscSchodow, WysokoscPodniesieniaStopnia,
                    GlebokoscStopnia, PrzecietnaDlugoscKroku, PrzestrzenSwobodnaNadGlowa, TypSchodow, 'l', NazwaProgramuCNC)
                };
            }
            else
            {
                shapes = new List<Shape>
                {
                    new CSchodyPL(JSRuntime,  50, 0, skalaRys, DlugoscOtworu, SzerokoscOtworu, DlugoscNaWejsciu, WysokoscDoStropu, WysokoscCalkowita, LiczbaPodniesienStopni,
                    WydluzOstatniStopien, ZachodzenieStopniZaSiebie, OsadzenieOdGory, OsadzenieOdDolu, SzerokoscBieguSchodow, DlugoscLiniiBiegu, KatNachylenia, SzerokoscSchodow, WysokoscPodniesieniaStopnia,
                    GlebokoscStopnia, PrzecietnaDlugoscKroku, PrzestrzenSwobodnaNadGlowa, TypSchodow, 'p', NazwaProgramuCNC)
                };
            }

            await DrawShapes();
            await Task.Delay(10);

            await DrawShapes();

        }

    }

    private async Task DrawShapes()
    {
        if (shapes == null) return;

        if (contextKPL == null)
            contextKPL = await canvasReferenceKPL.CreateCanvas2DAsync();

        await contextKPL.ClearRectAsync(0, 0, DlugoscOtworu + 50, SzerokoscOtworu + 50); // Ustaw szerokość kanwy na większą, aby zmieścić oba kształty

        foreach (var shape in shapes)
        {
            await shape.DrawAsync(contextKPL);
        }
    }

    // Reset method
    private async void Resetuj()
    {
        await LocalStorage.RemoveAsync("SchodyData");

        await UstWartDomyslne();

        StateHasChanged();

        if (JSRuntime != null) await JSRuntime.InvokeVoidAsync("clearConsole");
    }

    private async Task SaveToLocalStorage()
    {
        // Konwersja danych na tablicę stringów
        var data = new string[]
        {
        DlugoscOtworu.ToString(),
        SzerokoscOtworu.ToString(),
        DlugoscNaWejsciu.ToString(),
        WysokoscDoStropu.ToString(),
        WysokoscCalkowita.ToString(),
        LiczbaPodniesienStopni.ToString(),
        WydluzOstatniStopien.ToString(),
        ZachodzenieStopniZaSiebie.ToString(),
        OsadzenieOdGory.ToString(),
        OsadzenieOdDolu.ToString(),
        SzerokoscBieguSchodow.ToString(),
        DlugoscLiniiBiegu.ToString(),
        KatNachylenia.ToString(),
        SzerokoscSchodow.ToString(),
        WysokoscPodniesieniaStopnia.ToString(),
        GlebokoscStopnia.ToString(),
        PrzecietnaDlugoscKroku.ToString(),
        PrzestrzenSwobodnaNadGlowa.ToString(),
        SkalaWyswietlania.ToString()
        };

        // Zapis do LocalStorage
        await LocalStorage.SaveStringArrayAsync("SchodyData", data);

        await _message.Info("Zapisano domyśle ustawienia", 1);
    }

    private async Task LoadFromLocalStorage()
    {
        // Odczyt tablicy stringów z LocalStorage
        var data = await LocalStorage.GetStringArrayAsync("SchodyData");

        if (data != null && data.Length >= 19) // Sprawdź, czy dane są kompletne
        {
            // Konwersja tablicy stringów na wartości
            DlugoscOtworu = double.Parse(data[0]);
            SzerokoscOtworu = double.Parse(data[1]);
            DlugoscNaWejsciu = double.Parse(data[2]);
            WysokoscDoStropu = double.Parse(data[3]);
            WysokoscCalkowita = double.Parse(data[4]);
            LiczbaPodniesienStopni = double.Parse(data[5]);
            WydluzOstatniStopien = double.Parse(data[6]);
            ZachodzenieStopniZaSiebie = double.Parse(data[7]);
            OsadzenieOdGory = double.Parse(data[8]);
            OsadzenieOdDolu = double.Parse(data[9]);
            SzerokoscBieguSchodow = double.Parse(data[10]);
            DlugoscLiniiBiegu = double.Parse(data[11]);
            KatNachylenia = double.Parse(data[12]);
            SzerokoscSchodow = double.Parse(data[13]);
            WysokoscPodniesieniaStopnia = double.Parse(data[14]);
            GlebokoscStopnia = double.Parse(data[15]);
            PrzecietnaDlugoscKroku = double.Parse(data[16]);
            PrzestrzenSwobodnaNadGlowa = double.Parse(data[17]);
            SkalaWyswietlania = double.Parse(data[18]);
        }
        else
        {
            await UstWartDomyslne();
        }
    }

    private async Task UstWartDomyslne()
    {
        // Resetowanie wartości
        DlugoscOtworu = 3000;
        SzerokoscOtworu = 1000;
        DlugoscNaWejsciu = 3400;
        WysokoscDoStropu = 2700;
        WysokoscCalkowita = 3000;
        LiczbaPodniesienStopni = 15;
        WydluzOstatniStopien = 0;
        SzerokoscBieguSchodow = 850;
        ZachodzenieStopniZaSiebie = 0;
        OsadzenieOdGory = 20;
        OsadzenieOdDolu = 20;

        // Reset wyników
        DlugoscLiniiBiegu = 0;
        KatNachylenia = 0;
        SzerokoscSchodow = 0;
        WysokoscPodniesieniaStopnia = 0;
        GlebokoscStopnia = 0;
        PrzecietnaDlugoscKroku = 0;
        PrzestrzenSwobodnaNadGlowa = 0;

        SkalaWyswietlania = 25;

        await Task.CompletedTask;

    }


    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    public class SchodyData
    {
        public double DlugoscOtworu { get; set; }
        public double SzerokoscOtworu { get; set; }
        public double DlugoscNaWejsciu { get; set; }
        public double WysokoscDoStropu { get; set; }
        public double WysokoscCalkowita { get; set; }
        public double LiczbaPodniesienStopni { get; set; }
        public double WydluzOstatniStopien { get; set; }
        public double ZachodzenieStopniZaSiebie { get; set; }
        public double OsadzenieOdGory { get; set; }
        public double OsadzenieOdDolu { get; set; }
        public double SzerokoscBieguSchodow { get; set; }

        // Output properties
        public double DlugoscLiniiBiegu { get; set; }
        public double KatNachylenia { get; set; }
        public double SzerokoscSchodow { get; set; }
        public double WysokoscPodniesieniaStopnia { get; set; }
        public double GlebokoscStopnia { get; set; }
        public double PrzecietnaDlugoscKroku { get; set; }
        public double PrzestrzenSwobodnaNadGlowa { get; set; }
        public double SkalaWyswietlania { get; set; }
    }

}

