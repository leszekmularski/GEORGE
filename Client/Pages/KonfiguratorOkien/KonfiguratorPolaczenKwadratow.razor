@page "/KonfiguratorPolaczenKwadratow"
@using GEORGE.Shared.Models
@using GEORGE.Shared.Class
@inject HttpClient Http
@using AntDesign
@inject IMessageService _message
@inject INotificationService _notice
@inject Utilities.ILocalStorage LocalStorage
@using System.Net
@using System.Xml
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject DxfService DxfService
@inject DxfToSvgConverter Converter
@inject NavigationManager NavigationManager

<style>
    .scaled-svg-container {
        width: 100%;
        height: 600px;
        overflow: auto;
        border: 1px solid #ddd;
        background-color: #f8f9fa;
        position: relative;
    }

    .scaled-svg {
        display: block;
        margin: auto;
        background-color: white;
        box-shadow: 0 0 8px rgba(0,0,0,0.1);
        width: 600px;
        height: 600px;
        box-sizing: border-box;
    }

    .controls-container {
        z-index: 100;
        position: relative;
        background: white;
        padding: 10px;
        border-radius: 4px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        margin-bottom: 15px;
    }

    .model-list {
        max-height: 600px;
        overflow-y: auto;
        border: 1px solid #eee;
        border-radius: 4px;
    }

    .side-checkboxes {
        display: flex;
        gap: 15px;
        padding: 10px;
        background: #f5f5f5;
        border-radius: 4px;
        margin-bottom: 10px;
    }

    .side-checkbox {
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .model-table tr {
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .model-table tr:hover {
            background-color: #f0f7ff;
        }

    .thumbnail-cell {
        width: 70px;
    }

    .status-message {
        padding: 8px;
        margin-bottom: 10px;
        border-radius: 4px;
        background: #e9f7fe;
        color: #1890ff;
    }

    .btn-move {
        width: 32px;
        height: 32px;
        padding: 0;
    }
</style>

<script>
    // 🧠 Inicjalizacja namespace i stanu zoomLevel
    window.svgHelper = window.svgHelper || {};
    window.svgHelper.zoomLevel = window.svgHelper.zoomLevel || 1;

    // 🔄 Centrowanie i dopasowanie SVG do kontenera
    window.svgHelper.centerAndFit = function() {
        const svg = document.querySelector(".scaled-svg");
        const container = document.querySelector(".scaled-svg-container");
        const svgContent = svg?.querySelector("#zoom-group");

        if (!svg || !container || !svgContent) return;

        // Reset transformacji do obliczenia bounding box
        const prevTransform = svgContent.getAttribute("transform") || "";
        svgContent.setAttribute("transform", "");

        const bbox = svgContent.getBBox();
        svgContent.setAttribute("transform", prevTransform);

        const svgWidth = svg.clientWidth;
        const svgHeight = svg.clientHeight;

        const scale = Math.min(
            svgWidth / (bbox.width + 50),
            svgHeight / (bbox.height + 50)
        ) * 0.95;

        const offsetX = (svgWidth - bbox.width * scale) / 2 - bbox.x * scale;
        const offsetY = (svgHeight - bbox.height * scale) / 2 - bbox.y * scale;

        svgContent.setAttribute("transform",
            `translate(${offsetX}, ${offsetY}) scale(${scale})`);
        window.svgHelper.zoomLevel = scale;
    };

    // 🔁 Obrót tylko drugiego modelu
    window.svgHelper.rotateSecondModel = function() {
        const model2 = document.querySelector("#model2");
        if (!model2) return;

        const currentTransform = model2.getAttribute("transform") || "";

        // Wyodrębnij aktualne przesunięcie
        const translateMatch = currentTransform.match(/translate\(([^)]+)\)/);
        const translate = translateMatch ? translateMatch[0] : "translate(0, 0)";

        // Wyodrębnij aktualny kąt obrotu
        const rotateMatch = currentTransform.match(/rotate\(([-\d.]+)/);
        const currentAngle = rotateMatch ? parseFloat(rotateMatch[1]) : 0;
        const newAngle = (currentAngle + 90) % 360;

        // Oblicz środek modelu
        const bbox = model2.getBBox();
        const cx = bbox.x + bbox.width / 2;
        const cy = bbox.y + bbox.height / 2;

        // Zastosuj nową transformację
        model2.setAttribute("transform", `${translate} rotate(${newAngle}, ${cx}, ${cy})`);
    };

        // 📌 Przesuń
    window.svgHelper.move = function(dx, dy) {
        const model2 = document.querySelector("#model2");
        if (!model2) return;

        const currentTransform = model2.getAttribute("transform") || "";
        const translateMatch = currentTransform.match(/translate\(([^)]+)\)/);

        let x = 0, y = 0;
        if (translateMatch) {
            [x, y] = translateMatch[1].split(',').map(Number);
        }

        // Aktualizuj pozycję
        x += dx;
        y += dy;

        // Zachowaj istniejące transformacje (np. obrót)
        const rotateMatch = currentTransform.match(/rotate\(([^)]+)\)/);
        const rotate = rotateMatch ? ` rotate(${rotateMatch[1]})` : "";

        model2.setAttribute("transform", `translate(${x}, ${y})${rotate}`);
    };

    // 🔍 Powiększenie z centrowaniem
    window.svgHelper.zoomIn = function() {
        const group = document.querySelector("#zoom-group");
        if (!group) return;

        const currentTransform = group.getAttribute("transform") || "";
        const translateMatch = currentTransform.match(/translate\(([^)]+)\)/);
        const scaleMatch = currentTransform.match(/scale\(([^)]+)\)/);

        let [translateX, translateY] = translateMatch ?
            translateMatch[1].split(',').map(Number) : [0, 0];
        const currentScale = scaleMatch ? parseFloat(scaleMatch[1]) : 1;

        const newScale = currentScale * 1.1;
        const scaleRatio = newScale / currentScale;

        // Skoryguj przesunięcie, aby zachować centrowanie
        const svg = document.querySelector(".scaled-svg");
        if (svg) {
            const centerX = svg.clientWidth / 2;
            const centerY = svg.clientHeight / 2;
            translateX = centerX - (centerX - translateX) * scaleRatio;
            translateY = centerY - (centerY - translateY) * scaleRatio;
        }

        group.setAttribute("transform",
            `translate(${translateX}, ${translateY}) scale(${newScale})`);
        window.svgHelper.zoomLevel = newScale;
    };

    // 🔍 Pomniejszenie z centrowaniem
    window.svgHelper.zoomOut = function() {
        const group = document.querySelector("#zoom-group");
        if (!group) return;

        const currentTransform = group.getAttribute("transform") || "";
        const translateMatch = currentTransform.match(/translate\(([^)]+)\)/);
        const scaleMatch = currentTransform.match(/scale\(([^)]+)\)/);

        let [translateX, translateY] = translateMatch ?
            translateMatch[1].split(',').map(Number) : [0, 0];
        const currentScale = scaleMatch ? parseFloat(scaleMatch[1]) : 1;

        const newScale = currentScale / 1.1;
        const scaleRatio = newScale / currentScale;

        // Skoryguj przesunięcie, aby zachować centrowanie
        const svg = document.querySelector(".scaled-svg");
        if (svg) {
            const centerX = svg.clientWidth / 2;
            const centerY = svg.clientHeight / 2;
            translateX = centerX - (centerX - translateX) * scaleRatio;
            translateY = centerY - (centerY - translateY) * scaleRatio;
        }

        group.setAttribute("transform",
            `translate(${translateX}, ${translateY}) scale(${newScale})`);
        window.svgHelper.zoomLevel = newScale;
    };

    // 🛠️ Zastosowanie aktualnego zoomLevel do całego SVG
    window.svgHelper.applyZoom = function () {
        const group = document.querySelector("#zoom-group");
        if (!group) return;

        const current = group.getAttribute("transform") || "";
        const translateMatch = current.match(/translate\(([^)]+)\)/);
        const translate = translateMatch ? translateMatch[0] : "translate(0, 0)";

        group.setAttribute("transform", `${translate} scale(${window.svgHelper.zoomLevel})`);
    };
</script>


<div class="container-fluid mt-3">
    <div class="row mb-3">
        <div class="col">
            <div class="d-flex align-items-center gap-3">
                <Tooltip Placement="@Placement.TopRight" Title="Wróć do poprzedniej strony">
                    <Button class="btn btn-outline-secondary" Icon="@IconType.Fill.Backward" 
                            Style="width: 35px;" OnClick="GoBack" />
                </Tooltip>

                <div class="flex-grow-1">
                    <label class="form-label">Wybierz system:</label>
                    <select class="form-select" @onchange="@(async (args) => await OnSystemSelected(args))">
                        <option value="" disabled selected>-- Wybierz system --</option>
                        @foreach (var system in Systemy)
                        {
                            <option value="@system.RowId">@system.Nazwa_Systemu</option>
                        }
                    </select>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <div class="model-list">
                @if (ListaModeli != null && ListaModeli.Any())
                {
                    <div class="side-checkboxes">
                        <div class="side-checkbox">
                            <input type="checkbox" @bind="selDol" id="str_dol" />
                            <label for="str_dol">Dół</label>
                        </div>
                        <div class="side-checkbox">
                            <input type="checkbox" @bind="selGora" id="str_gora" />
                            <label for="str_gora">Góra</label>
                        </div>
                        <div class="side-checkbox">
                            <input type="checkbox" @bind="selLewa" id="str_lewa" />
                            <label for="str_lewa">Lewa</label>
                        </div>
                        <div class="side-checkbox">
                            <input type="checkbox" @bind="selPrawa" id="str_prawa" />
                            <label for="str_prawa">Prawa</label>
                        </div>
                    </div>

                    <table class="table model-table">
                        <thead>
                            <tr>
                                <th>Nazwa</th>
                                <th>Typ</th>
                                <th class="thumbnail-cell">Miniaturka</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var model in ListaModeli)
                            {
                                <tr @onclick="() => WybierzModel(model, selDol, selGora, selLewa, selPrawa)">
                                    <td>@model.NazwaKonfiguracji</td>
                                    <td>@model.Typ</td>
                                    <td>
                                        @if (model.Rysunek?.Length > 0)
                                        {
                                            <img src="data:image/png;base64,@Convert.ToBase64String(model.Rysunek)" 
                                                 width="60" height="60" />
                                        }
                                        else
                                        {
                                            <span class="text-muted">Brak</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="alert alert-info">Brak zapisanych modeli.</div>
                }
            </div>
        </div>

        <div class="col-md-8">
            <div class="controls-container">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <Tooltip Title="Zapisz ustawienia">
                            <Button Icon="@IconType.Fill.Save" Class="btn btn-primary me-2">
                                Zapisz
                            </Button>
                        </Tooltip>
                    </div>
                    
                    <div class="btn-group">
                        <Tooltip Title="Obróć drugi model">
                            <Button Icon="@IconType.Outline.Loading" OnClick="RotateObj" Class="btn-sm btn-move" />
                        </Tooltip>
                        <Tooltip Title="Przesuń w lewo (1px)">
                            <Button Icon="@IconType.Outline.ArrowLeft" OnClick="MoveLeftObj" Class="btn-sm btn-move" />
                        </Tooltip>
                        <Tooltip Title="Przesuń w prawo (1px)">
                            <Button Icon="@IconType.Outline.ArrowRight" OnClick="MoveRightObj" Class="btn-sm btn-move" />
                        </Tooltip>
                        <Tooltip Title="Przesuń w górę (1px)">
                            <Button Icon="@IconType.Outline.ArrowUp" OnClick="MoveUpObj" Class="btn-sm btn-move" />
                        </Tooltip>
                        <Tooltip Title="Przesuń w dół (1px)">
                            <Button Icon="@IconType.Outline.ArrowDown" OnClick="MoveDownObj" Class="btn-sm btn-move" />
                        </Tooltip>
                        <Tooltip Title="Dopasuj widok">
                            <Button Icon="@IconType.Outline.Windows" OnClick="ZoomAllObj" Class="btn-sm btn-move" />
                        </Tooltip>
                        <Tooltip Title="Powiększ">
                            <Button Icon="@IconType.Outline.ZoomIn" OnClick="ZoomInObj" Class="btn-sm btn-move" />
                        </Tooltip>
                        <Tooltip Title="Pomniejsz">
                            <Button Icon="@IconType.Outline.ZoomOut" OnClick="ZoomOutObj" Class="btn-sm btn-move" />
                        </Tooltip>
                        <label class="ms-2">Precyzja przesuwania:</label>
                        <AntDesign.InputNumber @bind-Value="precyzjaPrzesuwania" Min="0" Max="20" Style="width: 60px;" />
                    </div>
                </div>
            </div>

            <div class="mb-2 d-flex justify-content-between">
                <h6>Podgląd połączenia</h6>
                <div>
                    <Button Icon="@IconType.Outline.Fire" OnClick="RefreshSvg" Class="btn-sm me-2">
                        Odśwież
                    </Button>
                    <Button Icon="@IconType.Outline.Clear" OnClick="DelSvg" Class="btn-sm btn-danger">
                        Wyczyść
                    </Button>
                </div>
            </div>

            @if (pierwszyModel != null || drugiModel != null)
            {
                <div class="status-message">
                    @if (pierwszyModel != null && drugiModel == null)
                    {
                        <span>Pierwszy model wybrany: <strong>@pierwszyModel.Nazwa</strong></span>
                    }
                    else if (pierwszyModel != null && drugiModel != null)
                    {
                        <span>Połączono: <strong>@pierwszyModel.Nazwa</strong> z <strong>@drugiModel.Nazwa</strong></span>
                    }
                </div>
            }

            <div class="scaled-svg-container">
                @if (!string.IsNullOrEmpty(combinedSvg))
                {
                    <div class="scaled-svg" @key="SvgKey">
                        @((MarkupString)combinedSvg)
                    </div>
                }
                else
                {
                    <div class="d-flex flex-column justify-content-center align-items-center h-100">
                        <div class="alert alert-info mb-3">
                            Wybierz modele ramy, skrzydła lub poprzeczki
                        </div>
                        @if (!string.IsNullOrEmpty(BladKonfiguracji))
                        {
                            <div class="alert alert-warning">
                                @BladKonfiguracji
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] private AppState AppState { get; set; } = default!;

    // Dane i stan
    private string SvgKey { get; set; } = Guid.NewGuid().ToString();
    private List<SystemyOkienne> Systemy = new();
    private string? SelectedSystemId;
    private List<KonfModele>? ListaModeli;
    private List<KonfSystem>? KonfiguracjeSystemu;
    private float precyzjaPrzesuwania = 5;
    private string BladKonfiguracji = string.Empty;

    // Wybór stron
    private bool selDol = false;
    private bool selGora = false;
    private bool selLewa = false;
    private bool selPrawa = false;

    // Modele SVG
    private KonfSystem? pierwszyModel;
    private KonfSystem? drugiModel;
    private string combinedSvg = string.Empty;
    private double offsetX = 0;
    private double offsetY = 0;
    private double luzLewo = 50;  // Zwiększony luz
    private double luzPrawo = 50;
    private double luzGora = 50;
    private double luzDol = 50;

    // Inicjalizacja
    protected override async Task OnInitializedAsync()
    {
        await Laduj_Uprawnienia();
        Systemy = await Http.GetFromJsonAsync<List<SystemyOkienne>>("api/systemy-okienne") ?? new();
    }

    // Obsługa wyboru systemu
    private async Task OnSystemSelected(ChangeEventArgs e)
    {
        SelectedSystemId = e.Value?.ToString();
        if (string.IsNullOrEmpty(SelectedSystemId)) return;

        ListaModeli = await Http.GetFromJsonAsync<List<KonfModele>>($"api/konfmodele/FIND_ONLY_TRUE/{SelectedSystemId}") ?? new();
        KonfiguracjeSystemu = await Http.GetFromJsonAsync<List<KonfSystem>>($"api/konfsystem/FIND_ROWID_SYS/{SelectedSystemId}") ?? new();
    }

    // Wybór modelu
    private async Task WybierzModel(KonfModele model, bool stronaDol, bool stronaGora, bool stronaLewa, bool stronaPrawa)
    {
        BladKonfiguracji = "";

        try
        {
            var response = await Http.GetAsync($"api/konfmodeleelementy/powiazaniajuzzaznaczone/{model.RowId}");
            if (!response.IsSuccessStatusCode)
            {
                BladKonfiguracji = $"Błąd: {response.StatusCode}";
                return;
            }

            var result = await response.Content.ReadFromJsonAsync<MVCKonfModele>();
            if (result?.KonfSystem == null || result.KonfSystem.Count == 0)
            {
                BladKonfiguracji = "Brak danych powiązanych";
                return;
            }

            var pasujacy = result.KonfSystem.FirstOrDefault(x =>
                (x.WystepujeDol == stronaDol) ||
                (x.WystepujeGora == stronaGora) ||
                (x.WystepujeLewa == stronaLewa) ||
                (x.WystepujePrawa == stronaPrawa));

            if (pasujacy == null)
            {
                BladKonfiguracji = "Nie znaleziono pasującego elementu. Zmień występowanie elementu.";
                return;
            }

            if (pierwszyModel == null)
            {
                pierwszyModel = pasujacy;
                offsetX = 0; // Resetuj offset
                offsetY = 0; // Resetuj offset
            }
            else if (drugiModel == null)
            {
                drugiModel = pasujacy;
                // Zachowaj logikę luzu, ale teraz działa względem środka
                if (stronaLewa) offsetX -= luzLewo;
                if (stronaPrawa) offsetX += luzPrawo;
                if (stronaGora) offsetY -= luzGora;
                if (stronaDol) offsetY += luzDol;
            }

            AktualizujSvg();

            // Automatyczne dopasowanie po załadowaniu modelu
            await Task.Delay(100);
            await JSRuntime.InvokeVoidAsync("svgHelper.centerAndFit");
        }
        catch (Exception ex)
        {
            BladKonfiguracji = $"Błąd: {ex.Message}";
        }
    }

    // Generowanie SVG z większym obszarem roboczym
    private void AktualizujSvg()
    {
        if (pierwszyModel == null && drugiModel == null)
        {
            combinedSvg = "";
            return;
        }

        var svgParts = new List<string>();
        double centerX = 300; // Środek obszaru roboczego (600x600/2)
        double centerY = 300;

        // Obliczanie pozycji dla pierwszego modelu (zawsze na środku)
        if (pierwszyModel != null)
        {
            svgParts.Add($@"<g id=""model1"" transform=""translate({centerX}, {centerY})"">{ExtractInnerSvg(NormalizeSvg(pierwszyModel.SVG))}</g>");
        }

        // Obliczanie pozycji dla drugiego modelu (względem pierwszego z luzem)
        if (drugiModel != null)
        {
            double secondX = centerX + offsetX;
            double secondY = centerY + offsetY;
            svgParts.Add($@"<g id=""model2"" transform=""translate({secondX}, {secondY})"">{ExtractInnerSvg(NormalizeSvg(drugiModel.SVG))}</g>");
        }

        combinedSvg = $@"
        <svg xmlns=""http://www.w3.org/2000/svg"" width=""600"" height=""600"" viewBox=""0 0 600 600"" preserveAspectRatio=""xMidYMid meet"">
            <g id=""zoom-group"">
                {string.Join("", svgParts)}
            </g>
        </svg>";

        SvgKey = Guid.NewGuid().ToString();
    }

    // Pomocnicze metody do przetwarzania SVG
    private string NormalizeSvg(string svg) => svg?.Trim('\uFEFF', '\u200B', '\u0000').Replace("\r", "").Replace("\n", "").Trim() ?? "";

    private string ExtractInnerSvg(string svg)
    {
        if (string.IsNullOrWhiteSpace(svg)) return "";
        int start = svg.IndexOf('>') + 1;
        int end = svg.LastIndexOf("</svg>", StringComparison.OrdinalIgnoreCase);
        return (start > 0 && end > start) ? svg.Substring(start, end - start).Trim() : svg;
    }

    // Kontrola SVG
    private async Task RefreshSvg()
    {
        AktualizujSvg();
        await Task.Delay(100);
        await JSRuntime.InvokeVoidAsync("svgHelper.centerAndFit");
    }

    private async Task DelSvg()
    {
        pierwszyModel = null;
        drugiModel = null;
        offsetX = 0;
        offsetY = 0;
        BladKonfiguracji = "";
        AktualizujSvg();
    }

    // Manipulacja drugim modelem
    private async Task PrzesunDrugiModel(string kierunek)
    {
        if (drugiModel == null) return;

        switch (kierunek)
        {
            case "gora": offsetY -= 1; break;
            case "dol": offsetY += 1; break;
            case "lewo": offsetX -= 1; break;
            case "prawo": offsetX += 1; break;
        }

        AktualizujSvg();
        await Task.Delay(10);
    }

    private async Task RotateObj() => await JSRuntime.InvokeVoidAsync("svgHelper.rotateSecondModel");
    private async Task MoveLeftObj() => await JSRuntime.InvokeVoidAsync("svgHelper.move", -precyzjaPrzesuwania, 0);
    private async Task MoveRightObj() => await JSRuntime.InvokeVoidAsync("svgHelper.move", precyzjaPrzesuwania, 0);
    private async Task MoveUpObj() => await JSRuntime.InvokeVoidAsync("svgHelper.move", 0, -precyzjaPrzesuwania);
    private async Task MoveDownObj() => await JSRuntime.InvokeVoidAsync("svgHelper.move", 0, precyzjaPrzesuwania);
    private async Task ZoomAllObj() => await JSRuntime.InvokeVoidAsync("svgHelper.centerAndFit");
    private async Task GoBack() => await JSRuntime.InvokeVoidAsync("history.back");

    private async Task ZoomInObj() => await JSRuntime.InvokeVoidAsync("svgHelper.zoomIn");
    private async Task ZoomOutObj() => await JSRuntime.InvokeVoidAsync("svgHelper.zoomOut");



    // Uprawnienia
    private bool boolOdczyt = false;
    private bool boolZmiana = false;
    private bool boolUsuniecia = false;
    private bool boolAdmin = false;
    private bool boolNowy = false;
    private string RowIdPracownika = "";
    private string? user;
    private bool isNotDisabled => !boolZmiana;
    private List<UprawnieniaPracownikaViewModel>? uprawnienia;

    private async Task Laduj_Uprawnienia()
    {
        user = await LocalStorage.GetStringAsync("user");
        if (string.IsNullOrEmpty(user)) return;

        try
        {
            uprawnienia = await Http.GetFromJsonAsync<List<UprawnieniaPracownikaViewModel>>($"/api/ZwrocSatus/{user}/KonfPolaczenie");
            if (uprawnienia?.Count > 0)
            {
                var szuk = uprawnienia.FirstOrDefault(x => x.TableName == "KonfPolaczenie");
                if (szuk != null)
                {
                    boolOdczyt = szuk.Odczyt;
                    boolZmiana = szuk.Zmiana;
                    boolUsuniecia = szuk.Usuniecie;
                    boolAdmin = szuk.Administrator;
                    boolNowy = szuk.Zapis;
                    RowIdPracownika = szuk.RowId;
                }
            }
        }
        catch (Exception ex)
        {
            await _message.Error($"Błąd ładowania uprawnień: {ex.Message}");
        }
    }
}