@page "/KonfiguratorOkien"
@using GEORGE.Shared.Models
@using GEORGE.Shared.Class
@inject HttpClient Http
@using AntDesign
@inject IMessageService _message
@inject INotificationService _notice
@inject Utilities.ILocalStorage LocalStorage
@using System.Net
@using System.Xml
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject DxfService DxfService
@inject DxfToSvgConverter Converter
@inject NavigationManager NavigationManager

<style>
    .scaled-svg {
    position: relative;
    width: 505px;
    height: 505px;
    overflow: auto;
    border: 1px solid #ccc;
    }

    svg {
    width: 100%;
    height: 100%;
    transform-origin: center; /* 🔥 Kluczowe dla poprawnego zoomu */
    transition: transform 0.2s ease-in-out; /* 🔄 Płynna animacja */
    }

    #guide-line-vertical, #guide-line-horizontal, #guide-line-verticalMax, #guide-line-horizontalMax {
    pointer-events: auto;
    opacity: 1;
    z-index: 10; /* Przesunięcie na wierzch */
    }

    line {
    cursor: pointer; /* Zmieniaj kursor przy interakcji */
    }

</style>

<script>

    let isDraggingOKN = false;
    let draggedLine = null;
    let offsetX = 0; // 🔥 Przechowuje różnicę między kliknięciem a aktualnym X
    let deleteMode = false; // 🔥 Tryb usuwania

    // 🔥 Nowe zmienne do przechwycenia wartości prowadnic
    let verticalGuides = {};
    let horizontalGuides = {};

    let zoomLevel = 1;  // 🔥 Domyślny poziom zoomu
    const zoomFactor = 1.1; // 🔥 O ile zmieniamy skalę (10%)

    function zoomInSvg() {
    console.log("🔍 Powiększam rysunek SVG!");
    zoomLevel *= zoomFactor;
    updateSvgZoom();
    }

    function zoomOutSvg() {
    console.log("🔎 Pomniejszam rysunek SVG!");
    zoomLevel /= zoomFactor;
    updateSvgZoom();
    }

    function updateSvgZoom() {
    let svgContainer = document.querySelector(".scaled-svg");
    let svg = svgContainer.querySelector("svg");

    if (!svg) {
    console.error("❌ Nie znaleziono rysunku SVG!");
    return;
    }

    // 🔥 Skalowanie poprzez `transform: scale()`
    svg.style.transform = `scale(${zoomLevel})`;
    svg.style.transformOrigin = "center";

    console.log(`✅ Nowy poziom zoomu: ${zoomLevel}`);

    // 🔄 Aktualizacja wartości prowadnic
    updateGuideValues();
    }

    function enableDrag() {
    console.log("🔧 enableDrag uruchomiony!");

    let elements = document.querySelectorAll("svg line, svg circle, svg path");

    //  console.log(`📊 Znaleziono ${elements.length} elementów SVG do aktywacji.`);

    let activatedCount = 0;

    elements.forEach((element, index) => {
    //console.log(`🔹 [${index + 1}/${elements.length}] ID: ${element.id || "(brak)"} - Typ: ${element.tagName}`);

    if (element.tagName === "line" || element.tagName === "circle" || element.tagName === "path") {
    element.removeEventListener('mousedown', startDragOrDelete);
    element.addEventListener('mousedown', startDragOrDelete);
    element.dataset.dragEnabled = "true";
    activatedCount++;
    // console.log(`✅ Aktywowano przesuwanie dla ${element.tagName} (ID: ${element.id || "(brak)"})`);
    } else {
    console.warn(`⚠️ Pominięto element ${element.tagName} (ID: ${element.id || "(brak)"})`);
    }
    });

    //console.log(`🟢 Aktywowano przesuwanie dla ${activatedCount} z ${elements.length} elementów SVG.`);

    let deleteModeCheckbox = document.getElementById("deleteMode");
    if (!deleteModeCheckbox) {
    console.warn("⚠️ Ostrzeżenie: Nie znaleziono elementu #deleteMode! Czekam...");
    setTimeout(enableDrag, 500);
    return;
    }

    deleteModeCheckbox.addEventListener("change", function () {
    deleteMode = this.checked;
    console.log(`🗑️ Tryb usuwania: ${deleteMode ? "WŁĄCZONY" : "WYŁĄCZONY"}`);
    });

    console.log("🟢 enableDrag() zakończone!");
    }

    function startDrag(event) {
    event.preventDefault();
    isDraggingOKN = true;
    draggedLine = event.target;

    const svg = draggedLine.closest('svg');
    const rect = svg.getBoundingClientRect();
    const viewBox = svg.viewBox.baseVal;

    let scaleX = viewBox.width / rect.width; // Skalowanie X
    let scaleY = viewBox.height / rect.height; // Skalowanie Y

    let mouseX = (event.clientX - rect.left) * scaleX + viewBox.x;
    let mouseY = (event.clientY - rect.top) * scaleY + viewBox.y;

    if (draggedLine.id.includes('vertical')) {
    let currentX = parseFloat(draggedLine.getAttribute('x1'));
    offsetX = mouseX - currentX; // 🔥 Poprawiona wartość offsetX
    }

    console.log(`🚀 Rozpoczęto przeciąganie: ${draggedLine.id}, offsetX=${offsetX}`);

    document.addEventListener('mousemove', drag);
    document.addEventListener('mouseup', stopDrag);
    }

    function drag(event) {
    if (isDraggingOKN && draggedLine) {
    const svg = draggedLine.closest('svg');
    const rect = svg.getBoundingClientRect();
    const viewBox = svg.viewBox.baseVal;

    let scaleX = viewBox.width / rect.width;
    let scaleY = viewBox.height / rect.height;

    let newX = (event.clientX - rect.left) * scaleX + viewBox.x - offsetX;
    let newY = (event.clientY - rect.top) * scaleY + viewBox.y;

    // 🔹 Zaokrąglenie do 2 miejsc po przecinku
    newX = parseFloat(newX.toFixed(2));
    newY = parseFloat(newY.toFixed(2));

    console.log(`🎯 Przesuwam ${draggedLine.id} do X=${newX}, Y=${newY}`);

    if (draggedLine.id.includes('vertical')) {
    draggedLine.setAttribute('x1', newX);
    draggedLine.setAttribute('x2', newX);
    } else if (draggedLine.id.includes('horizontal')) {
    draggedLine.setAttribute('y1', newY);
    draggedLine.setAttribute('y2', newY);
    }

    console.log(`✅ ${draggedLine.id} nowa pozycja: x1=${draggedLine.getAttribute('x1')}, y1=${draggedLine.getAttribute('y1')}`);
    }
    }

    // 🔥 Aktualizacja wartości w panelu bocznym

    // 🔥 Mapa zamiany ID na czytelne nazwy
    const guideLabels = {
    "guide-line-vertical": "Linia lewa rysunku",
    "guide-line-verticalMax": "Linia prawa rysunku",
    "guide-line-verticalOdlSzyby": "Pionowa linia szkła",
    "guide-line-verticalOsSymetrii": "Oś poprzeczki",
    "guide-line-horizontal": "Linia górna rysunku",
    "guide-line-horizontalMax": "Linia dolna rysunku",
    "guide-line-horizontal-korpus": "Linia korpusu",
    "guide-line-horizontal-liniaSzklenia": "Pozioma linia szkła",
    "guide-line-horizontal-okucie": "Pozioma linia OKUCIA",
    "guide-line-horizontal-dormas": "Pozioma linia DORMAS",
    "guide-line-horizontal-OsSymetrii": "Oś słupka"
    };

    // 🔥 Aktualizacja wartości w panelu bocznym
    function updateGuideValues() {
    let verticalList = document.getElementById("verticalValues");
    let horizontalList = document.getElementById("horizontalValues");

    verticalList.innerHTML = "";
    horizontalList.innerHTML = "";

    let svg = document.querySelector("svg");
    if (!svg) {
    console.error("❌ Nie znaleziono SVG!");
    return;
    }

    let viewBox = svg.viewBox.baseVal;
    let totalHeight = viewBox.height; // 🔥 Całkowita wysokość SVG

    // 🔥 Pionowe prowadnice
    Object.keys(verticalGuides).forEach(id => {
    let line = document.getElementById(id);
    let color = line ? line.getAttribute("stroke") : "black"; // Pobieramy kolor linii
    let displayName = guideLabels[id] || id; // Jeśli brak tłumaczenia, użyj ID

    let li = document.createElement("li");
    li.innerHTML = `<span style="background-color:${color}; width: 15px; height: 15px; display: inline-block; margin-right: 5px;"></span>
    ${displayName}: ${parseFloat(verticalGuides[id].toFixed(2))}px`;
    verticalList.appendChild(li);
    });

    // 🔥 Poziome prowadnice (odwrócone względem dołu)
    Object.keys(horizontalGuides).forEach(id => {
    let line = document.getElementById(id);
    let color = line ? line.getAttribute("stroke") : "black"; // Pobieramy kolor linii
    let originalY = horizontalGuides[id];
    let flippedY = totalHeight - originalY; // 🔥 Liczymy Y od dołu
    let displayName = guideLabels[id] || id; // Jeśli brak tłumaczenia, użyj ID

    let li = document.createElement("li");
    li.innerHTML = `<span style="background-color:${color}; width: 15px; height: 15px; display: inline-block; margin-right: 5px;"></span>
    ${displayName}: ${parseFloat(flippedY.toFixed(2))}px`;
    horizontalList.appendChild(li);
    });
    }

    function stopDrag() {
    if (draggedLine) {
    console.log(`🛑 Zatrzymano przeciąganie: ${draggedLine.id}`);

    let testLine = document.getElementById(draggedLine.id);
    if (!testLine) {
    console.error(`❌ Linia ${draggedLine.id} zniknęła z DOM!`);
    } else {
    console.log(`✅ Linia ${draggedLine.id} nadal istnieje w DOM.`);
    }

    if (draggedLine.id.includes("vertical")) {
    verticalGuides[draggedLine.id] = parseFloat(draggedLine.getAttribute("x1"));
    } else if (draggedLine.id.includes("horizontal")) {
    horizontalGuides[draggedLine.id] = parseFloat(draggedLine.getAttribute("y1"));
    }

    updateGuideValues(); // 🔥 Aktualizacja wartości po przesunięciu linii
    }

    isDraggingOKN = false;
    draggedLine = null;
    document.removeEventListener('mousemove', drag);
    document.removeEventListener('mouseup', stopDrag);
    }

    // 🔥 Nowa funkcja: wybiera czy usunąć czy przesuwać
    function startDragOrDelete(event) {
    event.preventDefault();

    if (deleteMode) {
    deleteLine(event.target);
    } else {
    startDrag(event);
    }
    }

    // 🔥 Usuwanie linii
    function deleteLine(element) {
    console.log(`🗑️ Próbuję usunąć element: ${element.tagName}, ID: ${element.id || "brak"}`);

    // Jeśli to prowadnica, NIE usuwamy jej!
    if (element.id && element.id.includes("guide-line")) {
    console.warn("❌ Nie można usunąć prowadnic!");
    return;
    }

    // Sprawdzenie, czy kliknięto w element SVG
    if (element.tagName === "line" || element.tagName === "path" || element.tagName === "circle") {
    element.remove();
    console.log(`✅ Usunięto element: ${element.tagName}, ID: ${element.id || "brak"}`);
    } else {
    console.warn("⚠️ Kliknięto w element, który nie jest linią, łukiem ani okręgiem.");
    }
    }

    function rotateSvgElements() {
    console.log("🔄 Obracam cały obiekt SVG (bez prowadnic) o 90 stopni!");

    let group = document.getElementById("rotate-group");
    if (!group) {
    console.error("❌ Nie znaleziono grupy <g id='rotate-group'>! Sprawdź, czy jest w SVG.");
    return;
    }

    let svg = group.closest("svg");
    let viewBox = svg.viewBox.baseVal;

    // Pobieramy oryginalne wymiary SVG
    let originalWidth = viewBox.width;
    let originalHeight = viewBox.height;

    // Pobieramy rzeczywiste granice obiektów w grupie
    let bbox = group.getBBox();

    // Obliczamy środek obrotu
    let cx = bbox.x + bbox.width / 2;
    let cy = bbox.y + bbox.height / 2;

    // Pobierz obecny kąt obrotu (jeśli istnieje)
    let currentTransform = group.getAttribute("transform") || "";
    let match = currentTransform.match(/rotate\(([-\d.]+)/);
    let currentAngle = match ? parseFloat(match[1]) : 0;

    // Nowy kąt obrotu (dodajemy do poprzedniego)
    let newAngle = (currentAngle + 90) % 360;

    // Ustawienie nowej transformacji na grupie `g`
    group.setAttribute("transform", `rotate(${newAngle}, ${cx}, ${cy})`);

    console.log(`✅ Obrót zakończony: ${newAngle} stopni wokół (${cx}, ${cy})`);

    // 🔄 Dostosowanie `viewBox`, aby obiekt był zawsze w centrum
    let newX = viewBox.x;
    let newY = viewBox.y;
    let newWidth = originalWidth;
    let newHeight = originalHeight;

    if (newAngle === 90) {
    newX = viewBox.x - (bbox.width - bbox.height) / 2;
    newY = viewBox.y - (bbox.height - bbox.width) / 2;
    newWidth = originalHeight;
    newHeight = originalWidth;
    } else if (newAngle === 180) {
    newX = viewBox.x;
    newY = viewBox.y;
    } else if (newAngle === 270) {
    newX = viewBox.x + (bbox.width - bbox.height) / 2;
    newY = viewBox.y + (bbox.height - bbox.width) / 2;
    newWidth = originalHeight;
    newHeight = originalWidth;
    }

    svg.setAttribute("viewBox", `${newX} ${newY} ${newWidth} ${newHeight}`);

    console.log(`🔍 Nowy viewBox: ${newX}, ${newY}, ${newWidth}, ${newHeight}`);
    }

    function updateTransform(dx, dy) {
    let group = document.getElementById("rotate-group");
    if (!group) {
    console.error("❌ Nie znaleziono grupy <g id='rotate-group'>! Sprawdź, czy jest w SVG.");
    return;
    }

    let currentTransform = group.getAttribute("transform") || "translate(0, 0)";
    let match = currentTransform.match(/translate\((-?\d+\.?\d*),\s*(-?\d+\.?\d*)\)/);

    let currentX = match ? parseFloat(match[1]) : 0;
    let currentY = match ? parseFloat(match[2]) : 0;

    // Nowa transformacja
    let newTransform = `translate(${currentX + dx}, ${currentY + dy})`;
    group.setAttribute("transform", newTransform);

    console.log(`✅ Przesunięcie zakończone: X=${currentX + dx}, Y=${currentY + dy}`);
    }

    // Przesunięcie w prawo
    function shiftRightSvgElements() {
    console.log("➡️ Przesuwam cały obiekt SVG o 1px w prawo!");
    updateTransform(1, 0);
    }

    // Przesunięcie w lewo
    function shiftLeftSvgElements() {
    console.log("⬅️ Przesuwam cały obiekt SVG o 1px w lewo!");
    updateTransform(-1, 0);
    }

    // Przesunięcie w górę
    function shiftUpSvgElements() {
    console.log("⬆️ Przesuwam cały obiekt SVG o 1px w górę!");
    updateTransform(0, -1);
    }

    // Przesunięcie w dół
    function shiftDownSvgElements() {
    console.log("⬇️ Przesuwam cały obiekt SVG o 1px w dół!");
    updateTransform(0, 1);
    }

    function generatePngFromSvg(svgContent) {
    return new Promise((resolve, reject) => {
    let parser = new DOMParser();
    let svgDoc = parser.parseFromString(svgContent, "image/svg+xml");

    // Usuwanie elementów, których id zaczyna się od 'guide-line-'
    let guideLines = svgDoc.querySelectorAll('[id^="guide-line-"]');
    guideLines.forEach(line => {
    line.remove();  // Usuwamy element
    });

    // Teraz przekształcamy zmodyfikowane SVG na Base64
    let svgWithoutGuideLines = new XMLSerializer().serializeToString(svgDoc);

    let canvas = document.createElement("canvas");
    let ctx = canvas.getContext("2d");

    let img = new Image();
    let svgBlob = new Blob([svgWithoutGuideLines], { type: "image/svg+xml" });
    let svgUrl = URL.createObjectURL(svgBlob);
    img.src = svgUrl;

    img.onload = function() {
    canvas.width = img.width / 1;  // Skala do miniaturki
    canvas.height = img.height / 1;

    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

    // Generowanie Base64 PNG
    let base64Image = canvas.toDataURL("image/png");
    let base64Only = base64Image.split(',')[1]; // Usuwamy nagłówek 'data:image/png;base64,'
    resolve(base64Only);
    };

    img.onerror = function() {
    reject("Błąd ładowania SVG do obrazu");
    };
    });
    }


    function getGuidesData() {
    console.log("📡 Pobieram dane prowadnic...");

    //let verticalGuides = {};
    //let horizontalGuides = {};

    // Pobieramy wszystkie prowadnice
    document.querySelectorAll("line[id^='guide-line']").forEach(line => {
    let id = line.id;
    let x1 = parseFloat(line.getAttribute("x1"));
    let y1 = parseFloat(line.getAttribute("y1"));

    if (id.includes("vertical")) {
    verticalGuides[id] = x1;
    } else if (id.includes("horizontal")) {
    horizontalGuides[id] = y1;
    }
    });

    console.log("✅ Prowadnice pobrane:", { vertical: verticalGuides, horizontal: horizontalGuides });

    return { vertical: verticalGuides, horizontal: horizontalGuides };
    }


    function getUpdatedSvg() {
    let svg = document.querySelector(".scaled-svg svg");
    if (!svg) {
    console.error("❌ Nie znaleziono rysunku SVG!");
    return "";
    }

    let clonedSvg = svg.cloneNode(true);

    // 🔥 Naprawiamy problem z obrotem `rotate(...)`
    clonedSvg.querySelectorAll("[transform]").forEach(element => {
    let transformValue = element.getAttribute("transform");

    if (transformValue && transformValue.includes("rotate")) {
    // Zamiana przecinków na spacje (poprawny format dla SVG)
    transformValue = transformValue.replace(/,/g, " ");
    element.setAttribute("transform", transformValue);
    }
    });

    // 📏 Znajdź rzeczywisty obszar rysunku (bez prowadnic)
    let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;

    clonedSvg.querySelectorAll("line, path, circle, rect, ellipse, polygon, polyline").forEach(el => {
    let xVals = [], yVals = [];

    ["x", "cx", "x1", "x2"].forEach(attr => {
    let val = parseFloat(el.getAttribute(attr) || "NaN");
    if (!isNaN(val)) xVals.push(val);
    });

    ["y", "cy", "y1", "y2"].forEach(attr => {
    let val = parseFloat(el.getAttribute(attr) || "NaN");
    if (!isNaN(val)) yVals.push(val);
    });

    if (xVals.length > 0) {
    minX = Math.min(minX, ...xVals);
    maxX = Math.max(maxX, ...xVals);
    }
    if (yVals.length > 0) {
    minY = Math.min(minY, ...yVals);
    maxY = Math.max(maxY, ...yVals);
    }
    });

    let width = maxX - minX;
    let height = maxY - minY;

    if (width <= 0 || height <= 0) {
    console.error(`❌ Błąd: Wymiary SVG są niepoprawne! width=${width}, height=${height}`);
    return new XMLSerializer().serializeToString(svg);
    }

    // 🔥 Skracamy prowadnice do granic rysunku!
    clonedSvg.querySelectorAll("line[id^='guide-line']").forEach(line => {
    let id = line.id;
    if (id.includes("vertical")) {
    let x = parseFloat(line.getAttribute("x1"));
    if (x < minX) x = minX;
    if (x > maxX) x = maxX;
    line.setAttribute("x1", x);
    line.setAttribute("x2", x);
    line.setAttribute("y1", minY);
    line.setAttribute("y2", maxY);
    } else if (id.includes("horizontal")) {
    let y = parseFloat(line.getAttribute("y1"));
    if (y < minY) y = minY;
    if (y > maxY) y = maxY;
    line.setAttribute("y1", y);
    line.setAttribute("y2", y);
    line.setAttribute("x1", minX);
    line.setAttribute("x2", maxX);
    }
    });

    // 🔥 Dopasowujemy `viewBox`
    clonedSvg.setAttribute("viewBox", `${minX} ${minY} ${width} ${height}`);
    clonedSvg.setAttribute("width", width);
    clonedSvg.setAttribute("height", height);

    console.log(`✅ Nowe viewBox: ${minX} ${minY} ${width} ${height}`);

    return new XMLSerializer().serializeToString(clonedSvg);
    }


    function setSvgContent(svgString) {
    let retries = 15; // Więcej prób na wypadek opóźnień Blazora
    let delay = 300; // Krótszy czas między próbami

    function tryInsertSvg() {
    let tabContent = document.querySelector(".ant-tabs-tab-active"); // Sprawdza aktywną zakładkę
    let svgContainer = document.querySelector(".scaled-svg");

    if (!tabContent || !svgContainer) {
    if (retries > 0) {
    console.warn(`❌ Nie znaleziono kontenera SVG lub zakładka nieaktywna! Próba ponownie za ${delay}ms...`);
    retries--;
    setTimeout(tryInsertSvg, delay);
    } else {
    console.error("🚨 Błąd krytyczny: Kontener SVG nadal nie został znaleziony!");
    }
    return;
    }

    svgContainer.innerHTML = svgString;
    console.log("✅ Zaktualizowano SVG w Blazorze!");

    // 🚀 Ponowne aktywowanie obsługi przesuwania linii
    enableDrag();
    }

    setTimeout(tryInsertSvg, delay);
    }

    // Automatyczne przypisanie eventów po załadowaniu SVG
    document.addEventListener('DOMContentLoaded', () => {
    console.log("🌟 Dokument załadowany, uruchamiam enableDrag()");
    enableDrag();
    });

</script>

<div class="d-flex align-items-center flex-wrap gap-2">
    <Button Icon="@IconType.Fill.Tool" Style="flex-grow: 1; height: 35px;" OnClick="GoKonfiguratorNowegoSystemu">
        Dodaj nowy system
    </Button>
    <Button Icon="@IconType.Fill.Tool" Style="flex-grow: 1; height: 35px;" OnClick="GoBudujModeleOkien">
        Modele okien - buduj
    </Button>
    <Tooltip Placement="@Placement.TopRight" Title="Otwórz konfigurator nowego systemu lub wybierz go z listy">
        <Button Icon="@IconType.Fill.Windows" Style="flex-grow: 1; height: 35px;" OnClick="GoKonfiguratorPolaczen">
            Otwórz konfigurator połączeń naroży
        </Button>
    </Tooltip>
    <Tooltip Placement="@Placement.TopRight" Title="Wróć do poprzedniej strony">
        <Button class="btn-back" Icon="@IconType.Fill.Backward" Style="width:25px" OnClick="GoBack" />
    </Tooltip>
</div>

<hr />

@if (Systemy != null && Systemy.Any())
{
    <select class="form-select me-2" style="flex-grow: 1;" @onchange="@(async (args) => await OnSystemSelected(args))">
        <option value="" disabled selected>-- Wybierz system --</option>
        @foreach (var system in Systemy)
        {
            <option value="@system.RowId">@system.Nazwa_Systemu</option>
        }
    </select>
}

<Divider Style="font-weight:bold; font-size:large; display:flex; justify-content:space-between; align-items:center;">

    <Tooltip Placement="@Placement.BottomCenter" Title="Zapisz ustawienia">
        <Button class="btn-back" Icon="@IconType.Fill.Save" Style="height:35px; padding-right:25px" OnClick="SaveLinieDXF" >Zapisz wszystkie ustawienia </Button>
    </Tooltip>
    @if (activeKey == "2")
    {
        <Tooltip Placement="@Placement.TopRight" Title="Obróć o 90 stopni">
            <Button class="btn-back" Icon="@IconType.Outline.Loading" Style="width:27px" OnClick="RotateObj" />
        </Tooltip>

        <Button class="btn-back" Icon="@IconType.Outline.ArrowLeft" Style="width:27px" OnClick="MoveLeftObj" />
        <Button class="btn-back" Icon="@IconType.Outline.ArrowRight" Style="width:27px" OnClick="MoveRightObj" />
        <Button class="btn-back" Icon="@IconType.Outline.ArrowDown" Style="width:27px" OnClick="MoveDownObj" />
        <Button class="btn-back" Icon="@IconType.Outline.ArrowUp" Style="width:27px" OnClick="MoveUpObj" />
        <Button class="btn-back" Icon="@IconType.Outline.ZoomIn" Style="width:27px" OnClick="ZoomInObj" />
        <Button class="btn-back" Icon="@IconType.Outline.ZoomOut" Style="width:27px" OnClick="ZoomOutObj" />
    }

</Divider>

<Tabs DefaultActiveKey="0" @bind-ActiveKey="activeKey">
    <TabPane Tab="Zapisane elementy w konfiguracji" Key="0">
        <h3 class="text-center mt-3">
            📌 Skonfigurowane elementy
            <Tooltip Placement="@Placement.TopRight" Title="Dodaj nowy element konstrukcyjny">
                <Button class="btn-back" Icon="@IconType.Outline.NodeIndex" OnClick="DodajNowy">Dodaj nowy profil</Button>
            </Tooltip>
        </h3>

        <div class="container mt-4">
            @*             <button class="btn btn-primary mb-3" @onclick="DodajNowy">
                <i class="fas fa-plus"></i> Dodaj Nowy System
            </button>
 *@
            @if (KonfiguracjeSystemu != null && KonfiguracjeSystemu.Any())
            {
                <table class="table table-striped table-hover">
                    <thead class="thead-dark">
                        <tr>
                            <th>Nazwa</th>
                            <th>Indeks</th>
                            <th>Uwagi</th>
                            <th>Miniaturka</th>
                            <th>Akcje</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var konf in KonfiguracjeSystemu)
                        {
                            <tr>
                                <td>@konf.Nazwa</td>
                                <td>@konf.Indeks</td>
                                <td>@konf.Uwagi</td>
                                <td>
                                    @if (konf.Rysunek != null && konf.Rysunek.Length > 0)
                                    {
                                        <img src="@RysunekToBase64(konf.Rysunek)" alt="Miniatura" style="width: 50px; height: auto;" />
                                    }
                                    else
                                    {
                                        <span class="text-muted">Brak</span>
                                    }
                                </td>
                                <td>
                                    <button class="btn btn-warning btn-sm me-2" @onclick="() => Edytuj(konf.Id)">
                                        <i class="fas fa-edit"></i> Edytuj
                                    </button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => Usun(konf.Id)">
                                        <i class="fas fa-trash-alt"></i> Usuń
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

            }
            else
            {
                <p class="text-muted text-center">Brak dostępnych.</p>
            }
        </div>
    </TabPane>
    <TabPane Tab="Opis systemu" Key="1">
        <div class="container mt-4">
            <h4 class="mb-3">📝 Konfiguracja Systemu</h4>

            <div class="card p-3">
                <div class="row">
                    <!-- Wybór Typu Profila -->
                    <div class="col-md-6">
                        <label class="form-label">Typ profilu</label>
                        <Select Mode="SelectMode.Default"
                        DataSource="@_typ"
                        @bind-Value="@konfSystem.Typ"
                        LabelName="@nameof(Typ.Nazwa)"
                        ValueName="@nameof(Typ.Nazwa)"
                        Class="form-select">
                        </Select>
                    </div>

                    <!-- Indeks -->
                    <div class="col-md-6">
                        <label class="form-label">Indeks</label>
                        <Input class="form-control" @bind-Value="@konfSystem.Indeks" />
                    </div>
                </div>

                <div class="row mt-3">
                    <!-- Nazwa -->
                    <div class="col-md-12">
                        <label class="form-label">Nazwa</label>
                        <TextArea class="form-control" @bind-Value="@konfSystem.Nazwa" />
                    </div>
                </div>

                <hr class="my-4" />

                <h5 class="mb-3">📏 Parametry Techniczne</h5>

                <div class="row">
                    <div class="col-md-6">
                        <label class="form-label">Kąt Wystąpienia (min)</label>
                        <Input type="number" class="form-control" @bind-Value="@konfSystem.KatWystapieniaZakresOdMin" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Kąt Wystąpienia (max)</label>
                        <Input type="number" class="form-control" @bind-Value="@konfSystem.KatWystapieniaZakresOdMax" />
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="col-md-6">
                        <label class="form-label">Zakres Długości (min)</label>
                        <Input type="number" class="form-control" @bind-Value="@konfSystem.ZakresStosDlugoscOdMin" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Zakres Długości (max)</label>
                        <Input type="number" class="form-control" @bind-Value="@konfSystem.ZakresStosDlugoscOdMax" />
                    </div>
                </div>

                <hr class="my-4" />

                <h5 class="mb-3">💲 Koszty i Waga</h5>

                <div class="row">
                    <div class="col-md-6">
                        <label class="form-label">Cena za 1 MB</label>
                        <Input type="number" class="form-control" step="0.01" @bind-Value="@konfSystem.Cena1MB" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Waga</label>
                        <Input type="number" class="form-control" step="0.01" @bind-Value="@konfSystem.Waga" />
                    </div>
                </div>

                <hr class="my-4" />

                <h5 class="mb-3">📐 Kantówki</h5>

                <div class="row">
                    <div class="col-md-4">
                        <label class="form-label">Wymiar X Kantówki</label>
                        <Input type="number" class="form-control" @bind-Value="@konfSystem.WymiarXKantowki1" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Wymiar Y Kantówki</label>
                        <Input type="number" class="form-control" @bind-Value="@konfSystem.WymiarYKantowki1" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Cena za 1 MB Kantówki</label>
                        <Input type="number" class="form-control" step="0.01" @bind-Value="@konfSystem.Cena1MBKantowki1" />
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="col-md-4">
                        <label class="form-label">Waga Kantówki</label>
                        <Input type="number" class="form-control" step="0.01" @bind-Value="@konfSystem.WagaKantowki1" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Długość Kantówki</label>
                        <Input type="number" class="form-control" step="0.01" @bind-Value="@konfSystem.DlugoscKantowki1" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Ilość Sztuk Kantówki</label>
                        <Input type="number" class="form-control" step="0.01" @bind-Value="@konfSystem.IloscSztukKantowki1" />
                    </div>
                </div>

                <hr class="my-4" />

                <h5 class="mb-3">📏 Linie opisujące gabaryty profila</h5>
                <div class="row">
                    <div class="col-md-4">
                        <label class="form-label">Wartość linia: pozima dolna</label>
                        <Input type="number" class="form-control" @bind-Value="@konfSystem.PoziomDol" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Wartość linia: pozima górna</label>
                        <Input type="number" class="form-control" @bind-Value="@konfSystem.PoziomGora" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Wartość linia: pionowa lewa</label>
                        <Input type="number" class="form-control" step="0.01" @bind-Value="@konfSystem.PionLewa" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Wartość linia: pionowa prawa</label>
                        <Input type="number" class="form-control" step="0.01" @bind-Value="@konfSystem.PionPrawa" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Wartość linia: pionowa oś symetrii</label>
                        <Input type="number" class="form-control" step="0.01" @bind-Value="@konfSystem.PionOsSymetrii" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Wartość linia: pozioma oś symetrii</label>
                        <Input type="number" class="form-control" step="0.01" @bind-Value="@konfSystem.PoziomOsSymetrii" />
                    </div>
                </div>

                <!-- Przyciski akcji -->
                @*                 <div class="text-end">
                    <button class="btn btn-success" @onclick="Zapisz">
                        <i class="fas fa-save"></i> Zapisz
                    </button>
                    <button class="btn btn-secondary" @onclick="Anuluj">
                        <i class="fas fa-times"></i> Anuluj
                    </button>
                </div> *@
            </div>
        </div>

    </TabPane>
    <TabPane Tab="Linie oraz rysunek DXF" Key="2">
        <h6>
            Podgląd DXF
            <Button OnClick="RefreshSvg" Icon="@IconType.Outline.Fire" Style="margin-left: 10px;">
                🔄 Odśwież rysunek
            </Button>

        </h6>

        <!-- Wrapper dla SVG i wartości linii -->
        <div style="display: flex; align-items: flex-start; gap: 15px;">

            <!-- Wyświetlanie SVG -->
            <div class="scaled-svg" @key="SvgKey" style="flex: 1; padding: 15px">
                @if (czekajNaDane && !string.IsNullOrEmpty(SvgContent) && activeKey == "2")
                {
                    <div>
                        @((MarkupString)SvgContent)
                    </div>
                }
                else
                {
                    <p>⏳ Wczytywanie rysunku...</p>
                }
            </div>


            <!-- Panel po prawej stronie -->
            <div style="width: 300px; border-left: 2px solid #ccc; padding-left: 10px;">
                <div>
                    <label>Ustaw prezycje zapisu linii:</label>
                    <AntDesign.InputNumber @bind-Value="precyzjaZapisuLinii" Min="0" Max="2" DefaultValue="0" PlaceHolder="Precyzja zapisu"></AntDesign.InputNumber>
                </div>
                <h4>📊 Wartości linii</h4>

                <h5>🟥 Pionowe:</h5>
                <ul id="verticalValues">
                    <li>Brak danych</li>
                </ul>

                <h5>🟦 Poziome:</h5>
                <ul id="horizontalValues">
                    <li>Brak danych</li>
                </ul>

                <hr />

                <!-- 🔥 Checkbox do usuwania linii -->
                @if (czekajNaDane && !string.IsNullOrEmpty(SvgContent) && activeKey == "2")
                {
                    <label>
                        <input type="checkbox" id="deleteMode" /> Tryb usuwania linii 🗑️
                    </label>
                }

                <hr>
                <label>Występuje:</label> 
                <br/>
                <label>
                    <input type="checkbox" @bind="@konfSystem.WystepujeDol" /> Na dole
                </label>
                <label>
                    <input type="checkbox" @bind="@konfSystem.WystepujeLewa" /> Po lewej (lub słupek)
                </label>
                <br/>
                <label>
                    <input type="checkbox" @bind="@konfSystem.WystepujeGora" /> U góra (lub poprzeczka)
                </label>
                <label>
                    <input type="checkbox" @bind="@konfSystem.WystepujePrawa" /> Po prawej
                </label>
                <hr />
                <label>
                    <input type="checkbox" @bind="@konfSystem.CzyMozeBycFix" /> Czy można wstawić szybę
                </label>
            </div>

        </div>

        <InputFile OnChange="HandleSelected" multiple accept=".dxf">Wybierz pliki DXF</InputFile>
    </TabPane>
</Tabs>

@code {

    [Inject] private AppState AppState { get; set; } = default!;

    private string? SvgContent { get; set; }
    private string SvgKey { get; set; } = Guid.NewGuid().ToString(); // 🔥 Zabezpieczenie przed nadpisywaniem

    private List<int> intProwadnicePionowe = new List<int>();
    private List<int> intProwadnicePoziome = new List<int>();

    private List<SystemyOkienne> Systemy = new();

    private string? SelectedSystemId;

    KonfSystem konfSystem = new KonfSystem();

    private List<KonfSystem>? KonfiguracjeSystemu;

    private string? activeKey;

    private int precyzjaZapisuLinii = 0;

    protected override async Task OnInitializedAsync()
    {
        if (AppState != null)
        {
            AppState.SomeData = "";
        }

        await Laduj_Uprawnienia();

        Systemy = await Http.GetFromJsonAsync<List<SystemyOkienne>>("api/systemy-okienne");

        KonfiguracjeSystemu = await Http.GetFromJsonAsync<List<KonfSystem>>("api/konfsystem");
    }

    private string RysunekToBase64(byte[]? imageData)
    {
        if (imageData == null || imageData.Length == 0)
        {
            return "data:image/png;base64,"; // Zapobiega błędom
        }

        return $"data:image/png;base64,{Convert.ToBase64String(imageData)}";
    }

    private async Task OnSystemSelected(ChangeEventArgs e)
    {
        SelectedSystemId = e.Value.ToString();
        Console.WriteLine($"Wybrano system o ID: {SelectedSystemId}");
        // Możesz dodać dalszą logikę, np. przekierowanie do szczegółów systemu

        await Task.CompletedTask;
    }

    private bool czekajNaDane = false;

    private async Task Edytuj(int id)
    {
        if (!boolZmiana)
        {
            await _message.Warning("Nie masz uprawnień do zmiany danych!");
            return;
        }

        activeKey = "2";

        czekajNaDane = false;

        // 📡 Pobierz dane z API
        konfSystem = await Http.GetFromJsonAsync<KonfSystem>($"api/konfsystem/{id}");

        if (konfSystem != null)
        {
            if (!string.IsNullOrEmpty(konfSystem.SVG))
            {
                SvgContent = konfSystem.SVG;
                Console.WriteLine("✅ Wczytano zapisany rysunek SVG");
            }
            else
            {
                Console.WriteLine("⚠️ Brak zapisanego SVG w bazie!");
            }

        }
        await Task.Delay(100);
        czekajNaDane = true;

    }

    private async Task DodajNowy()
    {
        SvgContent = "";
        SvgKey = Guid.NewGuid().ToString();
        konfSystem = new KonfSystem();

        activeKey = "2";

        await Task.CompletedTask;
    }

    private async Task Usun(int id)
    {
        if (!boolUsuniecia)
        {
            await _message.Warning("Nie masz uprawnień do usunięcia danych!");
            return;
        }

        await Http.DeleteAsync($"api/konfsystem/{id}");
        KonfiguracjeSystemu = null;
        KonfiguracjeSystemu = await Http.GetFromJsonAsync<List<KonfSystem>>("api/konfsystem");
    }

    private async Task RefreshSvg()
    {

        // czekajNaDane = false;
        //SvgKey = Guid.NewGuid().ToString(); // 🔥 Zabezpieczenie przed nadpisywaniem
        // Console.WriteLine("🔄 Rozpoczynam odświeżanie SVG...");
        // StateHasChanged(); // 🔄 Pełne odświeżenie UI (ponowne dodanie SVG)

        // 🔥 Czekamy na Blazor, żeby się upewnić, że SVG jest w DOM
        await Task.Delay(300);

        // 🔥 Ponowne aktywowanie obsługi prowadnic
        //await JSRuntime.InvokeVoidAsync("setSvgContent", LSvgContent);
        await JSRuntime.InvokeVoidAsync("enableDrag");
        //await JSRuntime.InvokeVoidAsync("stopDrag");


        //czekajNaDane = true;


        SvgKey = Guid.NewGuid().ToString(); // 🔥 Zabezpieczenie przed nadpisywaniem

        StateHasChanged();

        Console.WriteLine("✅ SVG odświeżone!");
    }


    // private async Task Zapisz()
    // {
    //     if (!boolZmiana)
    //     {
    //         await _message.Warning("Nie masz uprawnień do zmiany danych!");
    //         return;
    //     }

    //     Console.WriteLine($"Zapisano: {konfSystem.Nazwa}");
    //     await Http.PostAsJsonAsync("api/systemy-okienne", konfSystem);
    // }

    // private void Anuluj()
    // {
    //     konfSystem = new SystemyOkienne(); // Reset formularza
    // }

    private async Task RotateObj()
    {
        await JSRuntime.InvokeVoidAsync("rotateSvgElements");
        StateHasChanged();
    }

    private async Task MoveRightObj()
    {
        await JSRuntime.InvokeVoidAsync("shiftRightSvgElements");
        StateHasChanged();
    }

    private async Task MoveLeftObj()
    {
        await JSRuntime.InvokeVoidAsync("shiftLeftSvgElements");
        StateHasChanged();
    }

    private async Task MoveDownObj()
    {
        await JSRuntime.InvokeVoidAsync("shiftDownSvgElements");
        StateHasChanged();
    }

    private async Task MoveUpObj()
    {
        await JSRuntime.InvokeVoidAsync("shiftUpSvgElements");
        StateHasChanged();
    }

    private async Task ZoomInObj()
    {
        await JSRuntime.InvokeVoidAsync("zoomInSvg");
        StateHasChanged();
    }

    private async Task ZoomOutObj()
    {
        await JSRuntime.InvokeVoidAsync("zoomOutSvg");
        StateHasChanged();
    }

    private async Task SaveLinieDXF()
    {
        if (!boolZmiana)
        {
            await _message.Warning("Nie masz uprawnień do zmiany danych!");
            return;
        }

        if (string.IsNullOrEmpty(SelectedSystemId))
        {
            _ = _notice.Info(new()
                {
                    Message = "Informacja!!",
                    Description = $"Wybierz System!!!!",
                    Placement = NotificationPlacement.BottomLeft,
                    Duration = 2
                });
            return;
        }

        if (string.IsNullOrEmpty(konfSystem.Nazwa))
        {
            _ = _notice.Info(new()
                {
                    Message = "Informacja!!",
                    Description = $"Podaj nazwę elementu!!!!",
                    Placement = NotificationPlacement.BottomLeft,
                    Duration = 2
                });
            return;
        }

        try
        {

            Console.WriteLine("📡 Pobieranie danych prowadnic...");
            var guidesData = await JSRuntime.InvokeAsync<Dictionary<string, object>>("getGuidesData");

            // Debug JSON
            Console.WriteLine($"🔍 Dane JSON: {JsonSerializer.Serialize(guidesData)}");

            if (guidesData == null || !guidesData.ContainsKey("vertical") || !guidesData.ContainsKey("horizontal"))
            {
                Console.WriteLine("⚠️ Błąd: Brak danych prowadnic!");
                return;
            }

            List<double> verticalGuides = new();
            List<double> horizontalGuides = new();

            // 🔥 Pobieramy SVG przez JS
            konfSystem.SVG = await JSRuntime.InvokeAsync<string>("getUpdatedSvg");

            // Sprawdzamy, czy dane "vertical" są obiektem
            if (guidesData["vertical"] is JsonElement verticalElement && verticalElement.ValueKind == JsonValueKind.Object)
            {
                verticalGuides.Add(verticalElement.GetProperty("guide-line-vertical").GetDouble());
                verticalGuides.Add(verticalElement.GetProperty("guide-line-verticalMax").GetDouble());
                verticalGuides.Add(verticalElement.GetProperty("guide-line-verticalOdlSzyby").GetDouble());
                //verticalGuides.Add(verticalElement.GetProperty("guide-line-verticalOsSymetrii").GetDouble());

                // ✅ Sprawdzamy, czy klucz istnieje, zanim go dodamy!
                if (verticalElement.TryGetProperty("guide-line-verticalOsSymetrii", out var osSymetriiElement))
                {
                    verticalGuides.Add(osSymetriiElement.GetDouble());
                }
                else
                {
                    Console.WriteLine("⚠️ Brak wartości dla 'guide-line-verticalOsSymetrii'! Ustawiam 0.");

                    // 🔥 Pobierz width i height z istniejącego SVG (np. z konfSystem.SVG)
                    var svgDoc = new XmlDocument();
                    svgDoc.LoadXml(konfSystem.SVG);
                    var svgElement = svgDoc.DocumentElement;

                    // Parsuj szerokość i wysokość SVG
                    double width = ParseSvgDimension(svgElement.GetAttribute("width"));
                    double height = ParseSvgDimension(svgElement.GetAttribute("height"));

                    // Oblicz środek dla PIONOWEJ osi symetrii (width / 2)
                    double centerX = width / 2;

                    // ✅ Poprawna definicja LINII PIONOWEJ
                    var newLine = svgDoc.CreateElement("line");
                    newLine.SetAttribute("id", "guide-line-verticalOsSymetrii");
                    newLine.SetAttribute("x1", centerX.ToString("G", System.Globalization.CultureInfo.InvariantCulture));
                    newLine.SetAttribute("y1", "0");
                    newLine.SetAttribute("x2", centerX.ToString("G", System.Globalization.CultureInfo.InvariantCulture));
                    newLine.SetAttribute("y2", height.ToString("G", System.Globalization.CultureInfo.InvariantCulture));
                    newLine.SetAttribute("stroke", "#ffa726");
                    newLine.SetAttribute("stroke-width", "1");
                    newLine.SetAttribute("stroke-dasharray", "5,5");

                    svgDoc.DocumentElement.AppendChild(newLine);

                    // Zaktualizuj SVG w konfSystem
                    konfSystem.SVG = svgDoc.OuterXml;

                    // Dodaj 0 do listy (lub centerY, jeśli to ma sens)
                    verticalGuides.Add(0.0);
                }
            }
            else
            {
                Console.WriteLine("Błąd: 'vertical' nie jest obiektem!!!!!");
                return;
            }

            Console.WriteLine("vertical - OK");
            // Sprawdzamy, czy dane "horizontal" są obiektem
            if (guidesData["horizontal"] is JsonElement horizontalElement && horizontalElement.ValueKind == JsonValueKind.Object)
            {
                horizontalGuides.Add(horizontalElement.GetProperty("guide-line-horizontal").GetDouble());
                horizontalGuides.Add(horizontalElement.GetProperty("guide-line-horizontalMax").GetDouble());
                horizontalGuides.Add(horizontalElement.GetProperty("guide-line-horizontal-korpus").GetDouble());
                horizontalGuides.Add(horizontalElement.GetProperty("guide-line-horizontal-liniaSzklenia").GetDouble());
                horizontalGuides.Add(horizontalElement.GetProperty("guide-line-horizontal-okucie").GetDouble());
                horizontalGuides.Add(horizontalElement.GetProperty("guide-line-horizontal-dormas").GetDouble());

                // ✅ Sprawdzamy, czy klucz istnieje, zanim go dodamy!
                if (horizontalElement.TryGetProperty("guide-line-horizontal-OsSymetrii", out JsonElement osSymetriiElement))
                {
                    horizontalGuides.Add(osSymetriiElement.GetDouble());
                }
                else
                {
                    Console.WriteLine("⚠️ Brak wartości dla 'guide-line-horizontal-OsSymetrii'! Ustawiam 0.");

                    // 🔥 Pobierz width i height z istniejącego SVG (np. z konfSystem.SVG)
                    var svgDoc = new XmlDocument();
                    svgDoc.LoadXml(konfSystem.SVG);
                    var svgElement = svgDoc.DocumentElement;

                    // Parsuj szerokość i wysokość SVG
                    double width = ParseSvgDimension(svgElement.GetAttribute("width"));
                    double height = ParseSvgDimension(svgElement.GetAttribute("height"));

                    // Oblicz środek dla osi symetrii
                    double centerY = height / 2;

                    // Dodaj linię do SVG
                    var newLine = svgDoc.CreateElement("line");
                    newLine.SetAttribute("id", "guide-line-horizontal-OsSymetrii");
                    newLine.SetAttribute("x1", "0");
                    newLine.SetAttribute("y1", centerY.ToString("G", System.Globalization.CultureInfo.InvariantCulture));
                    newLine.SetAttribute("x2", width.ToString("G", System.Globalization.CultureInfo.InvariantCulture));
                    newLine.SetAttribute("y2", centerY.ToString("G", System.Globalization.CultureInfo.InvariantCulture));
                    newLine.SetAttribute("stroke", "#ffa726");
                    newLine.SetAttribute("stroke-width", "1");
                    newLine.SetAttribute("stroke-dasharray", "5,5");

                    svgDoc.DocumentElement.AppendChild(newLine);

                    // Zaktualizuj SVG w konfSystem
                    konfSystem.SVG = svgDoc.OuterXml;

                    // Dodaj 0 do listy (lub centerY, jeśli to ma sens)
                    horizontalGuides.Add(0.0);
                }
            }
            else
            {
                Console.WriteLine("❌ Błąd: 'horizontal' nie jest obiektem!!!!!");
                return;
            }

            Console.WriteLine($"✅ Linie pionowe: {verticalGuides.Count}, poziome: {horizontalGuides.Count}");

            // Pobierz obraz PNG jako base64 z JavaScript
            //  string base64Png = await JSRuntime.InvokeAsync<string>("getSvgPngBase64");

            // 🔥 Pobieranie wartości z listy bez ryzyka błędu
            double GetValueOrDefault(List<double> list, int index)
            {
                return (index >= 0 && index < list.Count) ? Math.Round(list[index], precyzjaZapisuLinii) : 0.0;
            }

            // ✅ Pionowe linie
            konfSystem.PionLewa = GetValueOrDefault(verticalGuides, 0);
            konfSystem.PionPrawa = GetValueOrDefault(verticalGuides, 1);
            konfSystem.PionOdSzybaOdZew = GetValueOrDefault(verticalGuides, 2);
            konfSystem.PionDodatkowa4 = GetValueOrDefault(verticalGuides, 3);
            konfSystem.PionDodatkowa5 = GetValueOrDefault(verticalGuides, 4);
            konfSystem.PionOsSymetrii = GetValueOrDefault(verticalGuides, 5);

            // ✅ Poziome linie (odwrócone względem odwWym)
            var odwWym = GetValueOrDefault(horizontalGuides, 1);
            konfSystem.PoziomDol = odwWym - GetValueOrDefault(horizontalGuides, 0);
            konfSystem.PoziomGora = odwWym - GetValueOrDefault(horizontalGuides, 1);
            konfSystem.PoziomKorpus = odwWym - GetValueOrDefault(horizontalGuides, 2);
            konfSystem.PoziomLiniaSzkla = odwWym - GetValueOrDefault(horizontalGuides, 3);
            konfSystem.PoziomLiniaOkucia = odwWym - GetValueOrDefault(horizontalGuides, 4);
            konfSystem.PoziomOsDormas = odwWym - GetValueOrDefault(horizontalGuides, 5);
            konfSystem.PoziomDodatkowa6 = odwWym - GetValueOrDefault(horizontalGuides, 6);
            konfSystem.PoziomDodatkowa7 = odwWym - GetValueOrDefault(horizontalGuides, 7);
            konfSystem.PoziomOsSymetrii = odwWym - GetValueOrDefault(horizontalGuides, 8);

            // // 🔥 Pobieramy SVG przez JS
            // konfSystem.SVG = await JSRuntime.InvokeAsync<string>("getUpdatedSvg");

            // 🔥 Zamiana przecinków na kropki
            konfSystem.SVG = konfSystem.SVG.Replace(",", ".");

            SvgContent = konfSystem.SVG;

            // Console.WriteLine($"📡 Aktualny SVG przed zapisem: {konfSystem.SVG}");

            // Przekazujemy SVG do JavaScript w celu generowania PNG
            string base64Image = await JSRuntime.InvokeAsync<string>("generatePngFromSvg", konfSystem.SVG);

            // Console.WriteLine($"base64Png {base64Png}");

            if (string.IsNullOrEmpty(base64Image))
            {
                Console.WriteLine("❌ Błąd: Nie udało się pobrać obrazka PNG!");
                return;
            }

            // Konwersja base64 → byte[]
            byte[] pngBytes = Convert.FromBase64String(base64Image);

            //konfSystem.SVG = SvgContent;
            konfSystem.Rysunek = pngBytes;

            konfSystem.RowIdSystem = Guid.Parse(SelectedSystemId);

            HttpResponseMessage response;

            if (konfSystem.Id == 0)
            {
                response = await Http.PostAsJsonAsync("api/konfsystem", konfSystem);
            }
            else
            {
                response = await Http.PutAsJsonAsync($"api/konfsystem/{konfSystem.Id}", konfSystem);
            }

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("✅ Dane zapisane w bazie!");
                await _message.Success("✅ Dane zapisane w bazie!");

                KonfiguracjeSystemu = null;
                KonfiguracjeSystemu = await Http.GetFromJsonAsync<List<KonfSystem>>("api/konfsystem");

            }
            else
            {
                Console.WriteLine("❌ Błąd podczas zapisywania w bazie!");
                await _message.Error("❌ Błąd podczas zapisywania w bazie!");

                // 🔥 Odśwież SVG po zapisie
                SvgKey = Guid.NewGuid().ToString();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Wystąpił błąd #1: {ex.Message}");

            _ = _notice.Error(new()
                {
                    Message = "Bład!!",
                    Description = $"❌ Wystąpił błąd #1: {ex.Message}",
                    Placement = NotificationPlacement.Top,
                    Duration = 2
                });
        }
    }

    // Metoda pomocnicza do parsowania wymiarów SVG
    private double ParseSvgDimension(string value)
    {
        // Usuń wszystkie znaki niebędące cyframi lub kropką (np. "100px" → "100")
        string numericPart = System.Text.RegularExpressions.Regex.Replace(value, @"[^\d.]", "");
        return double.Parse(numericPart, System.Globalization.CultureInfo.InvariantCulture);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (!string.IsNullOrEmpty(SvgContent) && czekajNaDane)
            {
                await Task.Delay(100);
                Console.WriteLine("🔄 Blazor skończył renderować SVG, uruchamiam enableDrag()");
                await JSRuntime.InvokeVoidAsync("enableDrag");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {

        SvgContent = "";
        czekajNaDane = false;
        SvgKey = Guid.NewGuid().ToString(); // 🔥 Zabezpieczenie przed nadpisywaniem

        foreach (var file in e.GetMultipleFiles())
        {
            Console.WriteLine($"Otwieranie pliku: {file.Name}");

            try
            {
                // Wczytanie pliku do pamięci
                using var stream = file.OpenReadStream();
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                memoryStream.Position = 0; // Resetowanie pozycji strumienia

                // Wczytanie DXF ze strumienia
                var dxf = DxfDocument.Load(memoryStream);

                // Sprawdzenie, czy DXF zawiera jakieś elementy
                if (dxf == null)
                {
                    Console.WriteLine("Plik DXF jest pusty lub nie zawiera obsługiwanych elementów.");

                    _ = _notice.Error(new()
                        {
                            Message = "Błąd!!!",
                            Description = "Plik DXF jest pusty lub nie zawiera obsługiwanych elementów.",
                            Placement = NotificationPlacement.BottomLeft
                        });
                    return;
                }
                else
                {
                    _ = _notice.Info(new()
                        {
                            Message = "Informacja!!",
                            Description = $"Plik DXF jest OK ilość linii: {dxf.Entities.Lines.Count()} łuków: {dxf.Entities.Arcs.Count()}, okręgów: {dxf.Entities.Circles.Count()}",
                            Placement = NotificationPlacement.BottomLeft,
                            Duration = 1
                        });
                }
                // Konwersja na SVG
                SvgContent = Converter.ConvertToSvg(dxf);

                // Dodanie linii prowadnicowych do SVG (po konwersji)
                var svgDoc = new XmlDocument();
                svgDoc.LoadXml(SvgContent);

                //await Task.Delay(100); // Krótkie opóźnienie, żeby upewnić się, że Blazor wyrenderował SVG
                // await JSRuntime.InvokeVoidAsync("enableDrag");

                // Wymuszenie odświeżenia UI
                StateHasChanged();

                Console.WriteLine($"🎯 Aktualne SVG: {SvgContent}");
                Console.WriteLine($"🎯 Aktualne SVG - OK");

                czekajNaDane = true;

                return; // Przetwarzamy tylko pierwszy plik
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Błąd podczas odczytu DXF: {ex.Message}");
                _ = _notice.Error(new()
                    {
                        Message = "Błąd!!!",
                        Description = $"Błąd podczas odczytu DXF: {ex.Message}",
                        Placement = NotificationPlacement.BottomLeft
                    });
            }
        }
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    private async Task GoKonfiguratorNowegoSystemu()
    {

        NavigationManager.NavigateTo($"/Systemy-okienne");

        await Task.CompletedTask;
    }

    private async Task GoBudujModeleOkien()
    {

        NavigationManager.NavigateTo($"/Modele-okienne");

        await Task.CompletedTask;
    }

    private async Task GoKonfiguratorPolaczen()
    {

        NavigationManager.NavigateTo($"/KonfiguratorPolaczen");

        await Task.CompletedTask;
    }

    private bool boolOdczyt = false;
    private bool boolZmiana = false;
    private bool boolUsuniecia = false;
    private bool boolAdmin = false;
    private bool boolNowy = false;
    private string RowIdPracownika = "";
    private string? user;
    private bool isNotDisabled => !boolZmiana;
    private List<UprawnieniaPracownikaViewModel>? uprawnienia;

    private async Task Laduj_Uprawnienia()
    {
        user = await LocalStorage.GetStringAsync("user");

        if (string.IsNullOrEmpty(user))
        {
            //NavigationManager.NavigateTo($"", true);
            return;
        }

        string nazwaTabeli = "KonfSystem";

        Console.WriteLine($"api/ZwrocSatus/{user}/{nazwaTabeli}");

        try
        {
            uprawnienia = await Http.GetFromJsonAsync<List<UprawnieniaPracownikaViewModel>>($"/api/ZwrocSatus/{user}/{nazwaTabeli}");
        }
        catch (System.Net.Http.HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            Console.WriteLine("Brak danych!!!");
            await _message.Error("Brak danych - status użytkownika");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await _message.Error(ex.Message);
        }

        if (uprawnienia != null)
        {
            if (uprawnienia.Count > 0)
            {
                var znalezioneElementy = uprawnienia.Where(uprawnienie => uprawnienie.TableName == nazwaTabeli);
                Console.WriteLine("Znaleziono uprawnienia dla użytkownika: " + user + " w tabeli: " + nazwaTabeli + " ilość rekordów: " + znalezioneElementy.Count());
                if (znalezioneElementy.Any())
                {
                    var szuk = znalezioneElementy.FirstOrDefault(x => x.TableName == nazwaTabeli);
                    if (szuk != null)
                    {
                        boolOdczyt = szuk.Odczyt;
                        boolZmiana = szuk.Zmiana;
                        boolUsuniecia = szuk.Usuniecie;
                        boolAdmin = szuk.Administrator;
                        boolNowy = szuk.Zapis;
                        RowIdPracownika = szuk.RowId;
                    }
                }
            }
        }
    }

    record Typ(string Nazwa);
    private List<Typ> _typ = new List<Typ>
        {
            new Typ(""),
            new Typ("Rama"),
            new Typ("Skrzydło"),
            new Typ("Słupek ruchomy"),
            new Typ("Słupek stały"),
            new Typ("Listwa przyszybowa"),
        };
}