@page "/Modele-okienne"
@using GEORGE.Shared.Models
@using GEORGE.Shared.Class
@inject IJSRuntime JS
@inject Utilities.ILocalStorage LocalStorage
@inject HttpClient Http
@using System.Net
@inject IMessageService _message
@inject INotificationService _notice
@inject NavigationManager Navigation

@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D

<script>
    (() => {
    // Inicjalizacja globalnych obiektów
    window.offscreenCanvas = window.offscreenCanvas || document.createElement("canvas");
    window.offscreenCtx = window.offscreenCanvas.getContext("2d");

    window.currentDraggedModel = null;
    window.wirtualnaWarstwa = window.wirtualnaWarstwa || [];
    window.oknoKonfiguracja = window.oknoKonfiguracja || [];
    window.zoomLevel = window.zoomLevel || 1;
    window.offsetX = window.offsetX || 0;
    window.offsetY = window.offsetY || 0;

    // 1. POPRAWIONE: Funkcja setCanvasRef
    window.setCanvasRef = (canvasRef) => {
    if (!canvasRef) {
    console.error("❌ Blazor przekazał null do setCanvasRef!");
    return;
    }
    window.blazorCanvas = canvasRef;
    console.log("✅ Canvas ustawiony!", canvasRef);

    // 2. INICJALIZACJA PO USTANOWIENIU REFERENCJI
    dopasujCanvas();
    window.addEventListener("resize", dopasujCanvas);
    };

    // 3. PRZENIESIONE: Funkcja dopasujCanvas
    const dopasujCanvas = () => {
    if (!window.blazorCanvas) {
    console.warn("⚠️ Brak canvasu do dostosowania!");
    return;
    }

    const container = document.querySelector(".canvas-container");
    if (!container) {
    console.warn("⚠️ Brak kontenera canvasu!");
    return;
    }

    window.blazorCanvas.width = container.clientWidth;
    window.blazorCanvas.height = container.clientHeight;
    window.RysujOkno();
    };

    window.startDrag = async (modelName, clientX, clientY, imageSrc, dotNetHelper) => {
    try {
    const canvas = window.blazorCanvas;
    if (!canvas) {
    console.error("❌ Brak referencji do canvasu!");
    await dotNetHelper?.invokeMethodAsync('OnDragError', 'Canvas nie został zainicjalizowany');
    return;
    }

    // Zapisz aktualne współrzędne myszy
    window.currentMouseX = clientX;
    window.currentMouseY = clientY;

    console.log(`🖱️ Rozpoczęto przeciąganie na pozycji: (${clientX}, ${clientY})`);

    // Reszta kodu do przeciągania...
    } catch (error) {
    console.error(`🔥 Błąd podczas przeciągania: ${error}`);
    if (dotNetHelper) {
    await dotNetHelper.invokeMethodAsync('OnDragError', error.toString());
    }
    }
    };

    window.stopDrag = async (dotNetHelper) => {
    try {
    const canvas = window.blazorCanvas;
    if (!canvas) {
    console.error("❌ Brak referencji do canvasu!");
    return;
    }

    const rect = canvas.getBoundingClientRect();
    const x = window.currentMouseX - rect.left;
    const y = window.currentMouseY - rect.top;

    console.log("🔍 Współrzędne przed przekazaniem:", { x, y });

    if (typeof x !== 'number' || typeof y !== 'number') {
    throw new Error("Nieprawidłowe współrzędne!");
    }

    await dotNetHelper.invokeMethodAsync('OnDragEnd', x, y);
    } catch (error) {
    console.error(`🔥 Błąd: ${error}`);
    await dotNetHelper.invokeMethodAsync('OnDragError', error.toString());
    }
    };

    // 4. POPRAWIONE: Funkcja RysujOkno
    window.RysujOkno = () => {
    if (!window.blazorCanvas) {
    console.error("❌ Brak referencji do canvasu!");
    return;
    }

    const ctx = window.blazorCanvas.getContext("2d");
    ctx.clearRect(0, 0, window.blazorCanvas.width, window.blazorCanvas.height);

    ctx.save();
    ctx.translate(
    window.blazorCanvas.width / 2 + window.offsetX,
    window.blazorCanvas.height / 2 + window.offsetY
    );
    ctx.scale(window.zoomLevel, window.zoomLevel);
    ctx.translate(
    -window.blazorCanvas.width / 2,
    -window.blazorCanvas.height / 2
    );

    window.wirtualnaWarstwa.forEach(({ x, y, szerokosc, wysokosc, imageSrc }) => {
    const img = new Image();
    img.src = imageSrc;
    img.onload = () => ctx.drawImage(img, x, y, szerokosc, wysokosc);
    });

    ctx.restore();
    };

    // 5. USUNIĘTE: Zduplikowana inicjalizacja i nieużywane funkcje
    })();

    // 6. PRZENIESIONE: Funkcje wymagające bezpośredniego dostępu do window
    window.loadAndDrawTexture = async (canvasElement, imageUrl, dotNetHelper) => {
    const ctx = canvasElement.getContext('2d');
    const img = new Image();
    img.crossOrigin = "anonymous";
    img.src = imageUrl;

    await new Promise((resolve, reject) => {
    img.onload = () => resolve();
    img.onerror = reject;
    });

    const pattern = ctx.createPattern(img, 'repeat');
    ctx.fillStyle = pattern;
    ctx.canvas.dataset.pattern = "wood-pattern";
    await dotNetHelper.invokeMethodAsync('OnTextureLoaded');
    };

    // Dodaj do swojego skryptu
    window.getCanvasPosition = (canvasElement) => {
        if (!canvasElement) {
            console.error("❌ Brak elementu canvas!");
            return { left: 0, top: 0 };
        }
        const rect = canvasElement.getBoundingClientRect();
        return { left: rect.left, top: rect.top };
    };

    // Funkcja wywoływana na początku przeciągania
    window.startDragJS = (event, modelType) => {
        console.log(`🚀 Rozpoczęto przeciąganie: ${modelType}`);

        // Ustaw ikonę kursora na "grab" (chwytanie)
        event.dataTransfer.setData("text/plain", modelType);
        event.dataTransfer.setDragImage(event.target, 0, 0);

        // Zmień ikonę kursora na "move" (przesuwanie)
        document.body.style.cursor = "move";
    };

    window.allowDrop = (elementSelector) => {
        const container = document.querySelector(elementSelector);
        if (container) {
            container.style.cursor = "move"; // Zmień kursor na "move"
        }
    };

    window.handleDragLeave = (elementSelector) => {
        const container = document.querySelector(elementSelector);
        if (container) {
            container.style.cursor = "default"; // Przywróć domyślny kursor
        }
    };
</script>

<style>

    /* Globalne ustawienia */
    html, body {
    height: 100%;
    margin: 0;
    padding: 0;
    overflow: hidden;
    font-family: Arial, sans-serif;
    background-color: #f8f9fa;
    }

    /* Kontener główny */
    .window-model-container {
    display: flex;
    height: 70vh;
    background-color: #fff;
    padding: 10px;
    box-sizing: border-box;
    }

    /* Panel boczny z modelami */
    .wing-model-container {
    flex: 0 0 250px; /* Zmniejszenie szerokości */
    height: 100%;
    overflow-y: auto;
    border-right: 2px solid #ddd;
    padding: 10px;
    background: #f8f9fa;
    }

    /* Tabela modeli */
    .wing-model-container table {
    font-size: 13px;
    width: 100%;
    border-collapse: collapse;
    }

    .wing-model-container th, .wing-model-container td {
    padding: 6px;
    text-align: center;
    }

    .wing-model-container th {
    background-color: #007bff;
    color: white;
    }

    .wing-model-container tr:hover {
    background-color: rgba(0, 123, 255, 0.1);
    }

    /* Miniatury modeli */
    .wing-model-container img {
    width: 45px;
    height: 45px;
    object-fit: contain;
    cursor: grab;
    transition: transform 0.2s ease-in-out;
    }

    .wing-model-container img:hover {
    transform: scale(1.1);
    }

    /* Główne okno wyświetlania */
    .display-window {
    flex-grow: 1;
    height: 100%;
    border: 2px solid #ddd;
    background-color: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 10px;
    box-sizing: border-box;
    position: relative;
    overflow: hidden; /* Dodaj, aby uniknąć problemów z przewijaniem */
    cursor: crosshair; /* Wizualny sygnał, że obszar jest interaktywny */
    }

    /* Kontener canvas - dopasowany do okna */
    .canvas-container {
    width: 100%;
    height: 100%;
    position: relative; /* Umożliwia prawidłowe pozycjonowanie */
    }

    /* Canvas - dynamiczne skalowanie */
    canvas {
    display: block;
    max-width: 100%;
    max-height: 100%;
    background-color: transparent;
    }

    /* Paski przewijania */
    .wing-model-container::-webkit-scrollbar {
    width: 8px;
    }

    .wing-model-container::-webkit-scrollbar-thumb {
    background: #007bff;
    border-radius: 5px;
    }

    .wing-model-container::-webkit-scrollbar-thumb:hover {
    background: #0056b3;
    }

    /* 🔹 Toolbar z przyciskami */
    .toolbar {
    display: flex;
    flex-wrap: wrap;
    gap: 5px;
    justify-content: center;
    padding: 10px;
    background: #fff;
    }

    /* Styl dla przycisków */
    .toolbar .btn {
    flex: 1;
    min-width: 90px;
    font-size: 13px;
    padding: 6px 8px;
    transition: all 0.2s ease-in-out;
    }

    .toolbar .btn:hover {
    transform: scale(1.05);
    }

</style>

<!-- Nagłówek -->
<div class="d-flex justify-content-between align-items-center mt-2 mb-2">
    <h3 class="mb-0">Modele Okienne</h3>
    <button class="btn btn-primary" @onclick="GoBack">
        <i class="fas fa-arrow-left"></i> Wróć
    </button>
</div>
<!-- 🔹 Wybór systemu -->
<Tooltip Placement="@Placement.TopRight" Title="Otwórz konfigurator nowego systemu lub wybierz go z listy">
    <div class="d-flex">
        @if (Systemy != null && Systemy.Any())
        {
            <select class="form-select me-2" @onchange="@(async (args) => await OnSystemSelected(args))">
                <option value="" disabled selected>-- Wybierz system --</option>
                @foreach (var system in Systemy)
                {
                    <option value="@system.RowId">@system.Nazwa_Systemu</option>
                }
            </select>
        }
    </div>
</Tooltip>

<Collapse Animation>
    <Panel Header="Ustawienia" Key="1">

        <!-- Wprowadzenie wartości -->
        <div class="form-group mt-3">
            <label>Szerokość:</label>
            <input type="number" class="form-control" @bind="Szerokosc" />

            <label>Wysokość:</label>
            <input type="number" class="form-control" @bind="Wysokosc" />

            <label>Kolor:</label>
            <input type="color" class="form-control" @bind="Kolor" />

        </div>
        <Button OnClick="DrawStructure">TEST</Button>
    </Panel>
</Collapse>

<!-- Kontener na modele i canvas -->
<div class="window-model-container">
    <!-- Panel boczny z modelami -->
    <div class="wing-model-container">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Typ</th>
                    <th>Wymiary</th>
                    <th>Miniaturka</th>
                </tr>
            </thead>
            <tbody>
                @if (ListaModeli != null)
                {
                    @foreach (var model in ListaModeli)
                    {
                        <tr>
                            <td>@model.Typ</td>
                            <td>@model.KonstrMinSzer x @model.KonstrMinWys → @model.KonstrMaxSzer x @model.KonstrMaxWys</td>
                            <td>
                                @if (model.Rysunek != null && model.Rysunek.Length > 0)
                                {
                                    <img id="@($"wing-{model.Typ}")"
                                    src="data:image/png;base64,@Convert.ToBase64String(model.Rysunek)"
                                    @onmousedown='async (e) => await StartDrag(model.Typ, e)'
                                    @ondragend='async (e) => await EndDrag(model.Typ, e)'
                                    draggable="true"
                                    style="cursor: grab; width: auto; height: auto; max-width: 50px; max-height: 50px;" />
                                }
                                else
                                {
                                    <span class="text-muted">Brak</span>
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <!-- Główne okno wyświetlania -->
    <div class="display-window" @onmouseup="OnMouseUp">
        @if (hasCanvasError)
        {
            <p style="color: red;">❌ Błąd: Nie udało się załadować canvasu!</p>
        }
        else
        {
            <div class="canvas-container"
                 @ondragover="HandleDragOver"
                 @ondragleave="HandleDragLeave"
                 @ondrop="HandleDrop">
                <BECanvas @ref="CanvasRef" Width="800" Height="600"></BECanvas>
            </div>
        }
    </div>
</div>
@code {
    // Klasa WingModel definiująca dane dla skrzydła
    private List<KonfSystem>? KonfiguracjeSystemu;

    private List<SystemyOkienne>? Systemy;

    private string WybranyKsztalt = "prostokat";
    private int X = 0, Y = 0, Szerokosc = 1000, Wysokosc = 1000;
    private string Kolor = "#ff0000"; // Domyślny czerwony

    private string SelectedSystemId = "";
    private List<KonfModele>? ListaModeli;

    private BECanvasComponent? CanvasRef; // Referencja do komponentu BECanvas
    private Canvas2DContext? _context;
    private DotNetObjectReference<Modele_okienne>? _dotNetHelper;

    protected override async Task OnInitializedAsync()
    {
        await Laduj_Uprawnienia();

        Systemy = await Http.GetFromJsonAsync<List<SystemyOkienne>>("api/systemy-okienne");

        _dotNetHelper = DotNetObjectReference.Create(this);

    }

    private bool hasCanvasError = false; // Nowa flaga do śledzenia błędów

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && CanvasRef != null)
        {
            try
            {
                // Sprawdź czy funkcja istnieje przed wywołaniem
                var isFunctionDefined = await JS.InvokeAsync<bool>("eval", "typeof setCanvasRef === 'function'");

                if (!isFunctionDefined)
                    throw new Exception("Funkcja setCanvasRef nie jest zdefiniowana!");

                await JS.InvokeVoidAsync("setCanvasRef", CanvasRef.CanvasReference);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"🔥 Krytyczny błąd: {ex.Message}");
                hasCanvasError = true;
                StateHasChanged();
            }
        }
    }

    private async Task OnMouseUp(MouseEventArgs e)
    {
        Console.WriteLine("🟢 Wywołano OnDragEnd");
        Console.WriteLine($"🖱️ Przeciąganie zakończone na pozycji: ({e.ClientX}, {e.ClientY})");

        if (_dotNetHelper == null) return;

        // Przekaż współrzędne myszy do JavaScript
        await JS.InvokeVoidAsync(
            "stopDrag",
            _dotNetHelper
        );
    }
    // private async Task OnMouseUp(MouseEventArgs e)
    // {
    //     Console.WriteLine($"🖱️ Kliknięto na pozycji ({e.ClientX}, {e.ClientY})");
    //     string modelType = await JS.InvokeAsync<string>("getDraggedModelType"); // Pobieramy typ modelu z JS
    //     await RenderFrame(e.ClientX, e.ClientY, modelType);
    // }

    // Dodaj nowe pola w sekcji @code
    private string? SelectedModelType { get; set; }
    private int DropX { get; set; }
    private int DropY { get; set; }
    private ElementReference canvasElement;
    private DotNetObjectReference<Modele_okienne>? dotNetHelper;

    [JSInvokable]
    public async Task OnModelDropped(string modelType, int x, int y)
    {
        SelectedModelType = modelType;
        DropX = x;
        DropY = y;
        await DrawStructure();
    }

    private async Task OnSystemSelected(ChangeEventArgs e)
    {
        SelectedSystemId = e.Value.ToString();

        Console.WriteLine($"Wybrano system o ID: {SelectedSystemId}");

        if (string.IsNullOrEmpty(SelectedSystemId))
        {

            if (KonfiguracjeSystemu != null) KonfiguracjeSystemu.Clear();
            return;
        }

        KonfiguracjeSystemu = await Http.GetFromJsonAsync<List<KonfSystem>>($"api/konfsystem/FIN_DROWID/{SelectedSystemId}");

        ListaModeli = await Http.GetFromJsonAsync<List<KonfModele>>($"api/konfmodele/FIND_ONLY_TRUE/{SelectedSystemId}");

    }

    private bool isTextureLoaded = false;

    private async Task DrawStructure()
    {
        Console.WriteLine("1. DrawStructure");

        if (CanvasRef == null) return;

        Console.WriteLine("2. DrawStructure");

        _context ??= await CanvasRef.CreateCanvas2DAsync();

        if (!isTextureLoaded)
        {
            var baseUrl = Navigation.BaseUri;
            var imageUrl = $"{baseUrl}api/images/wood.jpg";

            await JS.InvokeVoidAsync("loadAndDrawTexture",
                CanvasRef.CanvasReference,
                imageUrl,
                DotNetObjectReference.Create(this)
            );
            return;
        }

    }

    [JSInvokable]
    public async Task OnDrop(string modelType, double x, double y)
    {
        Console.WriteLine($"🎯 Upuszczono model: {modelType} na pozycji ({x}, {y})");
        await DrawStructure();
        StateHasChanged();
    }

    private void HandleDragOver(DragEventArgs e)
    {
        // Zmień kursor na "move" podczas przeciągania nad kontenerem
        e.DataTransfer.EffectAllowed = "move";
        Console.WriteLine("🖱️ Przeciąganie nad canvasem...");
    }

    private void HandleDragLeave(DragEventArgs e)
    {
        // Przywróć domyślny kursor
        Console.WriteLine("🖱️ Opuszczono obszar canvasu...");
    }

    private async Task HandleDrop(DragEventArgs e)
    {
        // Pobierz współrzędne względem kontenera
        var container = await JS.InvokeAsync<DOMRect>("getBoundingClientRect", ".canvas-container");
        var x = e.ClientX - container.Left;
        var y = e.ClientY - container.Top;

        Console.WriteLine($"🎯 Upuszczono na pozycji: ({x}, {y})");
        await DrawStructure();
    }

    private async Task EndDrag(string modelType, MouseEventArgs e)
    {
           Console.WriteLine($"StartDrag modelType:{modelType} e.ClientX:{e.ClientX} e.ClientY:{e.ClientY}");


        if (CanvasRef == null)
        {
            Console.WriteLine("⚠️ Brak referencji do canvasu!");
            return;
        }

        // Pobierz pozycję canvasu względem okna
        var canvasPos = await JS.InvokeAsync<DOMRect>("getCanvasPosition", CanvasRef.CanvasReference);

        // Oblicz współrzędne względem canvasu
        var x = e.ClientX - canvasPos.Left;
        var y = e.ClientY - canvasPos.Top;

        Console.WriteLine($"🎯 Pozycja względem canvasu: ({x}, {y})");

        await DrawStructure();
    }


    private async Task StartDrag(string modelType, MouseEventArgs e)
    {
          Console.WriteLine($"StartDrag modelType:{modelType} e.ClientX:{e.ClientX} e.ClientY:{e.ClientY}");

        try
        {
            var model = ListaModeli.FirstOrDefault(m => m.Typ == modelType);
            if (model?.Rysunek == null || CanvasRef == null) return;

            // Przekaż tylko ClientX i ClientY, nie cały obiekt zdarzenia
            await JS.InvokeVoidAsync(
                "startDrag",
                modelType,
                e.ClientX,    // double
                e.ClientY,    // double
                $"data:image/png;base64,{Convert.ToBase64String(model.Rysunek)}",
                _dotNetHelper // Użyj wcześniej utworzonej referencji
            );
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas przeciągania: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task OnDragEnd(double x, double y)
    {
        Console.WriteLine("🟢 Wywołano OnDragEnd");
        Console.WriteLine($"🖱️ Przeciąganie zakończone na pozycji: ({x}, {y})");

        await DrawStructure();
        StateHasChanged();
    }

    [JSInvokable]
    public async Task OnDragUpdate(DragPayload payload)
    {
        Console.WriteLine($"Przeciąganie: {payload.ModelName} " +
                        $"X: {payload.X}px, Y: {payload.Y}px " +
                        $"(Skala: {payload.Scale}x)");

        // Tutaj możesz aktualizować stan komponentu
        StateHasChanged();
    }

    [JSInvokable]
    public async Task OnDragError(string message)
    {
        await _message.Error(message);
        StateHasChanged();
    }

    public class DragPayload
    {
        public string? ModelName { get; set; }
        public int X { get; set; }
        public int Y { get; set; }
        public string? Scale { get; set; }
    }

    public class DOMRect
    {
        public double Left { get; set; }
        public double Top { get; set; }
        public double Right { get; set; }
        public double Bottom { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
        public double X { get; set; }
        public double Y { get; set; }
    }

    public void Dispose()
    {
        _dotNetHelper?.Dispose();
    }

    [JSInvokable]
    public async Task OnTextureLoaded()
    {
        isTextureLoaded = true;
        await RenderFrame(110,110,"Rama");
        StateHasChanged();
    }

    private async Task RenderFrame(double x, double y, string modelType)
    {
        Console.WriteLine($"🎯 Renderowanie modelu: {modelType} na ({x}, {y})");

        if (_context == null) return;

        await _context.ClearRectAsync(0, 0, 800, 600);

        // Rysowanie ramy
        await _context.SetFillStyleAsync("wood-pattern");
        await _context.FillRectAsync(50, 50, 20, 500);
        await _context.FillRectAsync(730, 50, 20, 500);
        await _context.FillRectAsync(50, 50, 700, 20);
        await _context.FillRectAsync(50, 530, 700, 20);

        // Rysowanie szyby
        await _context.SetFillStyleAsync("#ADD8E6");
        await _context.FillRectAsync(70, 70, 660, 460);

        StateHasChanged();
    }


    private string RysunekToBase64(byte[]? imageData)
    {
        if (imageData == null || imageData.Length == 0)
        {
            return "data:image/png;base64,"; // Zapobiega błędom
        }

        return $"data:image/png;base64,{Convert.ToBase64String(imageData)}";
    }

    private async Task GoBack()
    {
        await JS.InvokeVoidAsync("history.back");
    }

    private bool boolOdczyt = false;
    private bool boolZmiana = false;
    private bool boolUsuniecia = false;
    private bool boolAdmin = false;
    private bool boolNowy = false;
    private string RowIdPracownika = "";
    private string? user;
    private bool isNotDisabled => !boolZmiana;
    private List<UprawnieniaPracownikaViewModel>? uprawnienia;

    private async Task Laduj_Uprawnienia()
    {
        user = await LocalStorage.GetStringAsync("user");

        if (string.IsNullOrEmpty(user))
        {
            //NavigationManager.NavigateTo($"", true);
            return;
        }

        string nazwaTabeli = "SystemyOkienne";

        Console.WriteLine($"api/ZwrocSatus/{user}/{nazwaTabeli}");

        try
        {
            uprawnienia = await Http.GetFromJsonAsync<List<UprawnieniaPracownikaViewModel>>($"/api/ZwrocSatus/{user}/{nazwaTabeli}");
        }
        catch (System.Net.Http.HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            Console.WriteLine("Brak danych!!!");
            await _message.Error("Brak danych - status użytkownika");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await _message.Error(ex.Message);
        }

        if (uprawnienia != null)
        {
            if (uprawnienia.Count > 0)
            {
                var znalezioneElementy = uprawnienia.Where(uprawnienie => uprawnienie.TableName == nazwaTabeli);
                Console.WriteLine("Znaleziono uprawnienia dla użytkownika: " + user + " w tabeli: " + nazwaTabeli + " ilość rekordów: " + znalezioneElementy.Count());
                if (znalezioneElementy.Any())
                {
                    var szuk = znalezioneElementy.FirstOrDefault(x => x.TableName == nazwaTabeli);
                    if (szuk != null)
                    {
                        boolOdczyt = szuk.Odczyt;
                        boolZmiana = szuk.Zmiana;
                        boolUsuniecia = szuk.Usuniecie;
                        boolAdmin = szuk.Administrator;
                        boolNowy = szuk.Zapis;
                        RowIdPracownika = szuk.RowId ?? "??????";
                    }
                }
            }
        }
    }

}