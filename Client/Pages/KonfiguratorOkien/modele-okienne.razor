@page "/Modele-okienne"
@using GEORGE.Shared.Models
@using GEORGE.Shared.Class
@using GEORGE.Client.Pages.Utils
@inject IJSRuntime JS
@inject Utilities.ILocalStorage LocalStorage
@inject HttpClient Http
@using System.Net
@inject IMessageService _message
@inject INotificationService _notice
@inject NavigationManager Navigation
@inject NavigationManager NavigationManager
@inject ShapeTransferService ShapeService
@using System.IO;
@using SixLabors.ImageSharp;
@using SixLabors.ImageSharp.Processing;
@using SixLabors.ImageSharp.Formats.Png;

@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using GEORGE.Client.Pages.Models
@using GEORGE.Client.Pages.Okna

<script>
    (() => {
    // Inicjalizacja globalnych zmiennych
    window.currentDraggedModel = null;
    window.currentDraggedType = null;
    window.isDragging = false;
    window.blazorCanvas = null;

    // Ustawienie referencji do canvasu
    window.setCanvasRef = (canvasRef) => {
    if (!canvasRef) {
    console.error("❌ Blazor przekazał null do setCanvasRef!");
    return;
    }
    window.blazorCanvas = canvasRef;
    console.log("✅ Canvas ustawiony!", canvasRef);
    };

    // Ustawienie referencji do .NET
    window.setDotNetHelper = (dotNetHelper) => {
    window.dotNetHelper = dotNetHelper;
    console.log("✅ DotNetHelper ustawiony!");
    };

    // Funkcja rozpoczynająca przeciąganie
    window.startDrag = (modelType, event) => {
    if (event.button !== 0) return; // Obsługa tylko lewego przycisku myszy

    event.preventDefault();
    window.isDragging = true;
    window.currentDraggedType = modelType;

    // Pobranie obrazka do ustawienia jako kursor
    const img = document.getElementById(`wing-${modelType}`);
    if (!img) {
    console.error(`❌ Nie znaleziono obrazka dla modelu: ${modelType}`);
    return;
    }

    // Tworzymy nowy obrazek, który będzie podążał za kursorem
    const cursorImg = new Image();
    cursorImg.src = img.src;
    cursorImg.style.position = "absolute";
    cursorImg.style.pointerEvents = "none";
    cursorImg.style.width = "50px";
    cursorImg.style.height = "50px";
    cursorImg.style.opacity = "0.8";
    cursorImg.id = "dragCursorImage";

    document.body.appendChild(cursorImg);
    window.currentDraggedImage = cursorImg;

    // Aktualizacja pozycji obrazka pod kursorem
    window.updateCursorImagePosition(event);
    };

    //     // Aktualizacja pozycji obrazka kursora
    // window.updateCursorImagePosition = (event) => {
    //         if (!window.isDragging || !window.currentDraggedImage) return;
    //         window.currentDraggedImage.style.left = `${event.pageX - 25}px`;
    //         window.currentDraggedImage.style.top = `${event.pageY - 25}px`;
    //     };

    // Funkcja kończąca przeciąganie
    window.stopDrag = async (event) => {
    if (!window.isDragging) return;

    window.isDragging = false;

    if (window.currentDraggedImage) {
    document.body.removeChild(window.currentDraggedImage);
    window.currentDraggedImage = null;
    }

    if (!window.blazorCanvas) {
    console.error("❌ Brak referencji do canvasu!");
    return;
    }

    const rect = window.blazorCanvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;

    console.log(`🛑 Upuszczono model: ${window.currentDraggedType} na (${x}, ${y})`);

    // Wywołanie metody .NET
    if (window.dotNetHelper) {
    await window.dotNetHelper.invokeMethodAsync('OnDragEnd', window.currentDraggedType, x, y);
    }

    window.currentDraggedType = null;
    };

    // Obsługa aktualizacji kursora
    document.addEventListener("mousemove", window.updateCursorImagePosition);

    // Obsługa upuszczenia obrazka
    document.addEventListener("mouseup", window.stopDrag);

    window.SetCustomCursor = (base64Image) => {
    console.log("🔵 Ustawiam kursor na Base64!");

    const cursorUrl = `data:image/png;base64,${base64Image}`;
    document.body.style.cursor = `url(${cursorUrl}) 8 8, auto`;

    // console.log(`🖱 Kursor ustawiony globalnie: ${cursorUrl}`);
    };

    window.ResetCursor = () => {
    console.log("🔄 Resetowanie kursora");
    document.querySelector(".canvas-container").style.cursor = "default";
    document.querySelector("canvas").style.cursor = "default";
    };

    // JavaScript
    window.AddCanvasHoverListener = (canvasElement) => {
    canvasElement.addEventListener('mousemove', () => {
    // Wymusza aktualizację kursora, jeśli został już ustawiony
    if (document.body.style.cursor.includes('url')) {
    document.body.style.cursor = document.body.style.cursor;
    }
    });
    };

    // Funkcja do ładowania tekstury
    window.loadAndDrawTexture = async (canvasElement, imageUrl, dotNetHelper) => {
    const ctx = canvasElement.getContext('2d');
    const img = new Image();
    img.crossOrigin = "anonymous";
    img.src = imageUrl;

    await new Promise((resolve, reject) => {
    img.onload = () => resolve();
    img.onerror = reject;
    });

    const pattern = ctx.createPattern(img, 'repeat');
    ctx.fillStyle = pattern;

    // ❗ Dodaj tę linię, aby wypełnić aktualną ścieżkę!
    ctx.fill("evenodd");

    ctx.canvas.dataset.pattern = "wood-pattern";
    await dotNetHelper.invokeMethodAsync('OnTextureLoaded');
    };

    // Globalny reset kursora z obsługą wszystkich przeglądarek
    window.ResetCursorGlobal = () => {
    // Reset dla wszystkich możliwych elementów
    document.documentElement.style.cursor = 'default';
    document.body.style.cursor = 'default';
    document.querySelector('.canvas-container').style.cursor = 'default';

    // Wymuś natychmiastowe odświeżenie
    const style = document.createElement('style');
    style.innerHTML = '*{cursor: default !important;}';
    document.head.appendChild(style);
    setTimeout(() => document.head.removeChild(style), 100);
    };

    let currentModel = null;

    window.SetCurrentModel = (modelType, modelRowId) => {
    currentModel = modelType;
    window.currentDraggedModel = {
    type: modelType,
    rowId: modelRowId
    };

    document.documentElement.setAttribute('data-current-model', modelType);
    document.documentElement.setAttribute('data-model-row-id', modelRowId);
    console.log(`📦 Ustawiono model: ${modelType}, ID: ${modelRowId}`);
    };

    window.getDraggedModelInfo = () => {
    if (!window.currentDraggedModel) {
    console.warn("⚠️ currentDraggedModel is not set.");
    return null;
    }

    return {
    type: window.currentDraggedModel.type,
    rowId: window.currentDraggedModel.rowId
    };
    };


    window.clearCurrentModel = () => {
    currentModel = null;
    document.documentElement.removeAttribute('data-current-model');
    };

    // Blokuj domyślne zachowanie przeglądarki
    document.addEventListener('dragover', (e) => {
    e.preventDefault();
    });

    window.getCanvasBoundingRect = (canvasRef) => {
    const canvas = document.getElementById(canvasRef.id);
    const rect = canvas.getBoundingClientRect();
    return {
    left: rect.left,
    top: rect.top,
    width: rect.width,
    height: rect.height
    };
    };

    })();

</script>

<style>
    /* Globalne ustawienia */
    html, body {
    height: 100%;
    margin: 0;
    padding: 0;
    overflow: hidden;
    font-family: Arial, sans-serif;
    background-color: #f8f9fa;
    }

    /* Specjalna klasa dla resetu */
    .cursor-reset * {
    cursor: default !important;
    pointer-events: auto !important;
    }

    /* Kontener główny */
    .window-model-container {
    display: flex;
    height: 70vh;
    background-color: #fff;
    padding: 10px;
    box-sizing: border-box;
    }

    /* Panel boczny z modelami */
    .wing-model-container {
    flex: 0 0 250px; /* Szerokość panelu bocznego */
    height: 100%;
    overflow-y: auto;
    border-right: 2px solid #ddd;
    padding: 10px;
    background: #f8f9fa;
    }

    /* Tabela modeli */
    .wing-model-container table {
    font-size: 13px;
    width: 100%;
    border-collapse: collapse;
    }

    .wing-model-container th, .wing-model-container td {
    padding: 6px;
    text-align: center;
    }

    .wing-model-container th {
    background-color: #007bff;
    color: white;
    }

    .wing-model-container tr:hover {
    background-color: rgba(0, 123, 255, 0.1);
    }

    /* Miniatury modeli */
    .wing-model-container img {
    width: 45px;
    height: 45px;
    object-fit: contain;
    cursor: -webkit-grab; /* Obsługa w Safari */
    cursor: grab;
    transition: transform 0.2s ease-in-out;
    }

    .wing-model-container img:hover {
    transform: scale(1.1);
    }

    /* Główne okno wyświetlania */
    .display-window {
    flex-grow: 1;
    height: 100%;
    min-height: 400px; /* Zapewnienie minimalnej wysokości */
    border: 2px solid #ddd;
    background-color: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 10px;
    box-sizing: border-box;
    position: relative;
    overflow: hidden;
    cursor: crosshair;
    }

    .container {
    position: relative;
    width: 100%;
    height: 100%;
    }

    .canvas-container {
    width: 100%;
    height: 100%;
    pointer-events: none; /* Wyłącz interakcje z canvasem */
    max-width: 100%;
    max-height: 100%;
    border: 2px solid #ddd;
    background-color: #fff;
    border-radius: 5px;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: auto; /* Ukrywa przewijanie */
    position: relative;
    }

    canvas {
    pointer-events: none; /* Kontynuuj ignorowanie zdarzeń */
    display: block;
    max-width: 100%;
    max-height: 100%;
    background-color: transparent;
    }

    .interactive-layer {
    position: absolute;
    top: 0;
    left: 0;
    z-index: 2; /* Warstwa NAD canvasem */
    pointer-events: auto; /* Włącz interakcje */
    }
    /* Paski przewijania */
    .wing-model-container::-webkit-scrollbar {
    width: 8px;
    }

    .wing-model-container::-webkit-scrollbar-thumb {
    background: #007bff;
    border-radius: 5px;
    }

    .wing-model-container::-webkit-scrollbar-thumb:hover {
    background: #0056b3;
    }

    /* 🔹 Toolbar z przyciskami */
    .toolbar {
    display: flex;
    flex-wrap: wrap;
    gap: 5px;
    justify-content: center;
    padding: 10px;
    background: #fff;
    }

    /* Styl dla przycisków */
    .toolbar .btn {
    flex: 1;
    min-width: 90px;
    font-size: 13px;
    padding: 6px 8px;
    transition: all 0.2s ease-in-out;
    }

    .toolbar .btn:hover {
    transform: scale(1.05);
    }

    .zoom-controls {
    position: absolute;
    top: 170px; /* Ustawienie 10px od góry */
    right: 10px; /* Ustawienie 10px od prawej */
    display: flex;
    gap: 10px; /* Odstęp między przyciskami */
    z-index: 1000; /* Upewnia się, że są na wierzchu */
    }

    .btn-zoom {
    width: 40px;
    height: 40px;
    font-size: 20px;
    border-radius: 50%; /* Okrągłe przyciski */
    border: none;
    background-color: #007bff; /* Niebieski, możesz zmienić */
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2); /* Delikatny cień */
    transition: background-color 0.3s ease;
    }

    .btn-zoom:hover {
    background-color: #0056b3; /* Ciemniejszy niebieski przy najechaniu */
    }

    /* Panel zajmuje pełną szerokość */
    .scrollable-panel {
    width: 100%;
    max-height: 400px; /* Możesz zmienić na więcej, np. 600px */
    overflow-y: auto; /* Włącza przewijanie w pionie */
    }

    /* Sider zajmuje całą szerokość */
    .info-panel {
    background-color: #222;
    color: #ffeb99;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.3);
    width: 500px; /* Pełna szerokość */
    max-width: 1000px;
    }

    /* Lista informacji */
    .info-list {
    list-style: none;
    padding: 0;
    width: 760px;
    }

    /* Każdy element ma własne miejsce */
    .info-item {
    background: #333;
    padding: 12px;
    border-radius: 6px;
    margin-bottom: 10px;
    box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.2);
    display: flex;
    flex-direction: column;
    gap: 6px;
    width: 760px;
    }

    /* Tekst jasnożółty */
    .info-item span {
    color: #ffeb99;
    font-size: 1em;
    }

    .info-item strong {
    color: #ffcc00;
    }

    /* Obsługa braku danych */
    .no-data {
    color: red;
    text-align: center;
    font-style: italic;
    }

    /* Lista materiałów */
    .materials-list {
    list-style: none;
    padding: 0;
    width: 100%;
    }

    /* Pojedynczy materiał */
    .material-item {
    background: #333;
    padding: 12px;
    border-radius: 6px;
    margin-bottom: 10px;
    box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.2);
    display: flex;
    flex-direction: column;
    gap: 6px;
    width: 100%;
    }

    /* Kolor jasny dla tekstu */
    .material-item span {
    color: #ffeb99;
    font-size: 1em;
    }

    .material-item strong {
    color: #ffcc00;
    }

</style>

<!-- Nagłówek -->

<div class="d-flex justify-content-between align-items-center mt-2 mb-2">
    <h3 class="mb-0">Modele Okienne</h3>
    <Button Icon="@IconType.Fill.Tool" Style="flex-grow: 1; height: 35px;" OnClick="GoCAD">
        OKN-CAD
    </Button>
    <label> </label>
    <button class="btn btn-primary" @onclick="GoBack">
        <i class="fas fa-arrow-left"></i> Wróć
    </button>

</div>

<Collapse Animation>
    <Panel Header="Wymiary, kolory itp. Okien" Key="1">
        <div class="form-group mt-3">
            <label>Szerokość:</label>
            <input type="number" class="form-control" @bind="Szerokosc" />

            <label>Wysokość:</label>
            <input type="number" class="form-control" @bind="Wysokosc" />

            <label>Kolor:</label>
            <input type="color" class="form-control" @bind="Kolor" />
        </div>
        <Button OnClick="() => DrawStructureAndRestrykcje(0)">Zmień wymiary</Button>
    </Panel>

    <Panel Header="Informacja o wyrobie restrykcje" Key="2" class="scrollable-panel">
        <Sider class="info-panel">
            <h4 style="color:aquamarine;">🛠️ Informacja o wyrobie:</h4>

            @if (infoObiekt != null && infoObiekt.Any())
            {
                <p class="entries-count"> 📌 Liczba wpisów: <strong>@infoObiekt.Count()</strong></p>
                <ul class="info-list">
                    @foreach (var wymiar in infoObiekt)
                    {
                        <li class="info-item">
                            <span><strong>📏 Szerokość:</strong> @wymiar.Szerokosc mm</span>
                            <span><strong>📐 Wysokość:</strong> @wymiar.Wysokosc mm</span>
                            <span><strong>🏗️ Wyrób:</strong> @wymiar.RodzajObiektu</span>
                            <span><strong>⚠️ Restrykcje:</strong> @wymiar.Restrykcja</span>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p class="no-data">❌ Brak danych o wyrobie.</p>
            }
        </Sider>
    </Panel>
    <Panel Header="Materiały" Key="3" class="scrollable-panel">
        @if (infoBoom != null && infoBoom.Any())
        {
            <p class="entries-count">📌 Liczba materiałów: <strong>@infoBoom.Count()</strong></p>
            <ul class="materials-list">
                @foreach (var material in infoBoom)
                {
                    <li class="material-item">
                        <span><strong>📏 Długość:</strong> @material.Dlugosc mm</span>
                        <span><strong>🏷️ Nazwa:</strong> @material.Nazwa</span>
                        <span><strong>🔢 Indeks:</strong> @material.Indeks</span>
                        <span><strong>📦 Ilość sztuk:</strong> @material.IloscSztuk</span>
                        <span><strong>⚠️ Restrykcje:</strong> @material.Restrykcja</span>
                    </li>
                }
            </ul>
        }
        else
        {
            <p class="no-data">❌ Brak użytych materiałów.</p>
        }
    </Panel>

</Collapse>


<!-- Kontener na modele i canvas -->
<div class="window-model-container">
    <!-- Kontener na przyciski -->
    <div class="zoom-controls">
        <button @onclick="ZoomIn" class="btn-zoom">➕</button>
        <button @onclick="ZoomOut" class="btn-zoom">➖</button>
        <button @onclick="PokazModal" class="btn-zoom">💎</button>

    </div>
    <!-- Panel boczny z modelami -->
    <div class="wing-model-container">
        <!-- 🔹 Wybór systemu -->
        <Tooltip Placement="@Placement.TopRight" Title="Otwórz konfigurator nowego systemu lub wybierz go z listy">
            <div class="d-flex">
                @if (Systemy != null && Systemy.Any())
                {
                    <select class="form-select me-2" style="width:100%" @onchange="@(async (args) => await OnSystemSelected(args))">
                        <option value="" disabled selected>-- Wybierz system --</option>
                        @foreach (var system in Systemy)
                        {
                            <option value="@system.RowId">@system.Nazwa_Systemu</option>
                        }
                    </select>
                }
            </div>
        </Tooltip>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Typ</th>
                    <th>Wymiary</th>
                    <th>Miniaturka</th>
                </tr>
            </thead>
            <tbody>
                @if (ListaModeli != null)
                {
                    @foreach (var model in ListaModeli)
                    {
                        <tr>
                            <td>@model.Typ</td>
                            <td>@model.KonstrMinSzer x @model.KonstrMinWys → @model.KonstrMaxSzer x @model.KonstrMaxWys</td>
                            <td>
                                @if (model.Rysunek != null && model.Ikona32x32.Length > 0)
                                {
                                    <img id="@($"wing-{model.Typ}")"
                                    src="data:image/png;base64,@Convert.ToBase64String(model.Rysunek)"
                                    @onclick='@(() => WybierzModel(model))'
                                    @ondragstart='@(e => JS.InvokeVoidAsync("SetCurrentModel", model.Typ, model.RowId))'
                                    @onmouseout='@(e => JS.InvokeVoidAsync("ResetCursor"))'
                                    draggable="true"
                                    style="cursor: grab;
                                  width: auto;
                                  height: auto;
                                  max-width: 50px;
                                  max-height: 50px;
                                  border: @(model == WybranyModel ? "4px solid #007bff" : "none")" />

                                }
                                else
                                {
                                    <span class="text-muted">Brak</span>
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <!-- Główne okno wyświetlania -->
    <div class="display-window" @onmouseup="OnMouseUp"
    style="position: relative; /* Wymagane dla warstw */
            overflow: visible; /* Zapobiega przycinaniu kursora */
            cursor: inherit; /* Dziedziczy kursor z JS */">

        <!-- Tutaj elementy reagujące na kursor (np. przyciski) -->
        @if (hasCanvasError)
        {
            <p style="color: red; position: relative; z-index: 100;">❌ Błąd: Nie udało się załadować canvasu!</p>
        }
        else
        {
            <!-- Canvas -->
            <div class="canvas-container"
            @onmousemove="UpdateZoomCenter"
            @onclick="UpdateZoomCenter">
                <BECanvas @ref="CanvasRef" Width="@CanvasWidth" Height="@CanvasHeight" />
            </div>
        }
    </div>
</div>

<div class="modal fade @classShowTWZ" tabindex="-1"
style="display: @displayTWZ; margin: auto; top: 50%; left: 50%; transform: translate(-50%, -50%); position: absolute; width: 80%;">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Punkty elementów okien</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="ZamknijModal"></button>
            </div>
            <div class="modal-body" style="max-height: 70vh; overflow-y: auto; font-size: 0.85rem; font-family: Consolas, monospace;">
                @if (ksztalty is not null && ksztalty.Any())
                {

                    @foreach (var ksztalt in ksztalty)
                    {
                        <div class="card my-2 shadow-sm">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <div>
                                    <strong>Typ:</strong> @ksztalt.TypKsztaltu &nbsp;|&nbsp;
                                    <strong>Grupa:</strong> @ksztalt.Grupa &nbsp;|&nbsp;
                                    <strong>ZIndex:</strong> @ksztalt.ZIndex
                                </div>
                                <button class="btn btn-sm btn-primary" @onclick="@(() => EdytujKsztalt(ksztalt.Id))">Edytuj</button>
                            </div>
                            <div class="card-body">
                                @if (edytowanyId == ksztalt.Id)
                                {
                                    <div class="mb-2">
                                        <label>Typ kształtu</label>
                                        <input class="form-control" @bind="ksztalt.TypKsztaltu" />
                                    </div>
                                    <!-- Pozostałe inputy jak wcześniej... -->

                                    <div class="mb-2">
                                        <label><strong>Wierzchołki (X, Y):</strong></label>
                                        @for (int i = 0; i < ksztalt.Wierzcholki.Count; i++)
                                        {
                                            var punkt = ksztalt.Wierzcholki[i];
                                            <div class="d-flex align-items-center mb-1" @key="ksztalt.Id + '_' + i">
                                                <span class="me-2">[@i]</span>
                                                <input class="form-control me-1" style="width: 100px;" type="number"
                                                step="0.01" value="@punkt.X"
                                                @onchange="@(e => ZmienX(ksztalt, i, e))" placeholder="X" />
                                                <input class="form-control me-1" style="width: 100px;" type="number"
                                                step="0.01" value="@punkt.Y"
                                                @onchange="@(e => ZmienY(ksztalt, i, e))" placeholder="Y" />
                                            </div>
                                        }
                                    </div>

                                    <button class="btn btn-success btn-sm" @onclick="@ZapiszKsztalt">Zapisz</button>
                                    <button class="btn btn-secondary btn-sm ms-2" @onclick="@AnulujEdycje">Anuluj</button>
                                }
                                else
                                {
                                    <p><strong>Wypełnienie wewnętrzne:</strong> <span style="color:@ksztalt.WypelnienieWewnetrzne">@ksztalt.WypelnienieWewnetrzne</span></p>
                                    <p><strong>Wypełnienie zewnętrzne:</strong> <span style="color:@ksztalt.WypelnienieZewnetrzne">@ksztalt.WypelnienieZewnetrzne</span></p>
                                    <p><strong>Grubość obramowania:</strong> @ksztalt.GruboscObramowania px</p>
                                    <p><strong>Czy zawiera otwór:</strong> @(ksztalt.CzyZawieraOtwor ? "Tak" : "Nie")</p>
                                    <p><strong>Widoczny:</strong> @(ksztalt.Widoczny ? "Tak" : "Nie")</p>
                                    <p><strong>Wierzchołki:</strong></p>
                                    <ul class="list-group list-group-flush">
                                        @foreach (var p in ksztalt.Wierzcholki)
                                        {
                                            <li class="list-group-item">
                                                X: @p.X, Y: @p.Y
                                            </li>
                                        }
                                    </ul>
                                }
                            </div>
                        </div>
                    }

                }
                else
                {
                    <p class="text-muted">Brak danych do wyświetlenia 😔</p>
                }
            </div>
        </div>
    </div>
</div>



@code {
    // Klasa WingModel definiująca dane dla skrzydła
    private List<KonfSystem>? KonfiguracjeSystemu;

    private List<SystemyOkienne>? Systemy;

    private KonfModele? WybranyModel { get; set; }

    private string WybranyKsztalt = "prostokat";
    private int X = 0, Y = 0, Szerokosc = 1000, Wysokosc = 1000;
    private string Kolor = "#ff0000"; // Domyślny czerwony

    private string SelectedSystemId = "";
    private List<KonfModele>? ListaModeli;

    private BECanvasComponent? CanvasRef; // Referencja do komponentu BECanvas
    private Canvas2DContext? _context;
    private DotNetObjectReference<Modele_okienne>? _dotNetHelper;

    // Dodaj nowe pola w sekcji @code
    private string? SelectedModelType { get; set; }
    private string? SelectedRowIdType { get; set; }
    private double DropX { get; set; }
    private double DropY { get; set; }
    private ElementReference canvasElement;

    private double _currentScale = 1.0;
    private const double ScaleFactor = 1.1;
    private double _panX = 0;
    private double _panY = 0;

    private long CanvasWidth { get; set; } = 1000;
    private long CanvasHeight { get; set; } = 600;

    private double _zoomCenterX = 500; // Środek canvasu
    private double _zoomCenterY = 300;

    private List<WyrobWymiaryOpis>? infoObiekt;

    private List<WygenerowaneMaterialy> infoBoom = new List<WygenerowaneMaterialy>();

    private List<IShapeDC> _shapes = new List<IShapeDC>();

    private List<ShapeRegion> _regions = new();

    private string woodPatternName = "sosna.jpg"; // Nazwa pliku do wzoru drewna meranti.jpg wood.jpg

    private bool hasCanvasError = false; // Nowa flaga do śledzenia błędów

    private string classShowTWZ = "";
    private string displayTWZ = "none";
    private string edytowanyId = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Laduj_Uprawnienia();


            _shapes = ShapeService.Shapes; // Odbiór danych z serwisu

            if (_shapes != null)
            {
                _regions = GeometryUtils.GenerujRegionyZPodzialu(_shapes);
            }

            Systemy = await Http.GetFromJsonAsync<List<SystemyOkienne>>("api/systemy-okienne");

            _dotNetHelper = DotNetObjectReference.Create(this);

            await JS.InvokeVoidAsync("setDotNetHelper", _dotNetHelper);

            // Sprawdź, czy skrypt JS został poprawnie załadowany
            var isScriptLoaded = await JS.InvokeAsync<bool>("eval", "typeof setCanvasRef === 'function'");
            if (!isScriptLoaded)
            {
                throw new Exception("⚠️ Skrypt dragAndDrop.js nie został poprawnie załadowany!");

                await JS.InvokeVoidAsync("AddCanvasHoverListener", CanvasRef);

            }

            if (_shapes != null)
            {
                Console.WriteLine($"Odebrano dane _shapes: {_shapes.Count()}");

                await RedrawCanvas();// to poprawy!!!

                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"Odebrano dane _shapes: null");
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"🔥 Błąd podczas inicjalizacji: {ex.Message}");
        }
    }

    private void WybierzModel(KonfModele model)
    {
        WybranyModel = model;
        // Dodatkowe akcje przy wyborze modelu
        JS.InvokeVoidAsync("SetCustomCursor", Convert.ToBase64String(model.Ikona32x32));
        JS.InvokeVoidAsync("SetCurrentModel", model.Typ, model.RowId);
    }

    private void ZmienX(KsztaltElementu ksztalt, int index, ChangeEventArgs e)
    {
        try
        {
            if (ksztalt?.Wierzcholki == null || index < 0 || index >= ksztalt.Wierzcholki.Count)
            {
                Console.WriteLine($"⚠️ Nieprawidłowy indeks: {index} dla ksztaltu z {ksztalt?.Wierzcholki?.Count ?? 0} punktami.");
                return;
            }

            if (float.TryParse(e.Value?.ToString(), out var newX))
            {
                var punkt = ksztalt.Wierzcholki[index];
                punkt.X = newX;
                ksztalt.Wierzcholki[index] = punkt;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"🔥 Błąd podczas ZmienX: {ex.Message}");
        }
    }


    private void ZmienY(KsztaltElementu ksztalt, int index, ChangeEventArgs e)
    {
        try
        {
            if (ksztalt?.Wierzcholki == null || index < 0 || index >= ksztalt.Wierzcholki.Count)
            {
                Console.WriteLine($"⚠️ Nieprawidłowy indeks: {index} dla ksztaltu z {ksztalt?.Wierzcholki?.Count ?? 0} punktami.");
                return;
            }

            if (float.TryParse(e.Value?.ToString(), out var newY))
            {
                var punkt = ksztalt.Wierzcholki[index];
                punkt.Y = newY;
                ksztalt.Wierzcholki[index] = punkt;
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"🔥 Błąd podczas ZmienY: {ex.Message}");
        }
    }

    private void EdytujKsztalt(string id)
    {
        edytowanyId = id;
        Console.WriteLine($"edytowanyId: {edytowanyId}");
    }

    private async Task ZapiszKsztalt()
    {
        // Nie zmieniaj listy ksztalty – dane są już w niej zaktualizowane przez binding
        edytowanyId = "";
        await RenderFrame(false);
    }


    private void AnulujEdycje()
    {
        edytowanyId = "";
    }

    private void ZamknijModal()
    {
        classShowTWZ = "";
        displayTWZ = "none";
    }

    public void PokazModal()
    {
        classShowTWZ = "show";
        displayTWZ = "block";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender && CanvasRef != null)
            {
                Console.WriteLine("🖌️ Inicjalizacja canvasu...");

                var isFunctionDefined = await JS.InvokeAsync<bool>("eval", "typeof setCanvasRef === 'function'");
                if (!isFunctionDefined)
                    throw new Exception("⚠️ Funkcja setCanvasRef nie jest zdefiniowana!");

                await JS.InvokeVoidAsync("setCanvasRef", CanvasRef.CanvasReference);
                Console.WriteLine("✅ Canvas ustawiony!");

                // 👇 TU DODAJ
                _context ??= await CanvasRef.CreateCanvas2DAsync();

                // Możesz od razu wywołać rysowanie
                if (_shapes?.Any() == true)
                    await RedrawCanvas();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"🔥 Krytyczny błąd: {ex.Message}");
            hasCanvasError = true;
            StateHasChanged();
        }
    }

    private async Task RedrawCanvas()
    {
        if (_context == null)
        {
            Console.WriteLine("❌ Brak kontekstu canvas!");
            return;
        }

        await ClearCanvas();

        await _context.SaveAsync();
        await _context.ScaleAsync(_currentScale, _currentScale);

        Console.WriteLine($"🎨 Rysowanie {_shapes.Count} kształtów");

        foreach (var shape in _shapes)
        {
            Console.WriteLine($"🖌️ Rysuję {shape.GetType().Name}");
            await shape.Draw(_context);
        }

        Console.WriteLine("Rozpoczynam przekazywanie danych z _shapes do GenerujRegionyZPodzialu");
        // 🔽 PRZEKAZANIE DO ANALIZY REGIONÓW PO RYSOWANIU
        var regiony = GeometryUtils.GenerujRegionyZPodzialu(_shapes);

        Console.WriteLine($"📦 Wygenerowano {regiony.Count} regionów");

        if (regiony.Count() > 0)
            await _message.Info($"📦 Wygenerowano {regiony.Count} regionów", 1);

        foreach (var region in regiony)
        {
            Console.WriteLine($"🔍 Analizuję region - TypKształtu: {region.TypKsztaltu} - ilość Wierzcholkow: {region.Wierzcholki.Count()}");
        }

        await _context.RestoreAsync();
    }

    private async Task ClearCanvas()
    {
        await _context.SetFillStyleAsync("white");
        await _context.FillRectAsync(0, 0, CanvasWidth, CanvasHeight);

        _currentScale = 1.0; // Reset skali
    }

    private async Task ZoomIn()
    {
        var newScale = _currentScale * 1.2;
        await ApplyZoom(newScale);
    }

    private async Task ZoomOut()
    {
        var newScale = _currentScale / 1.2;
        await ApplyZoom(Math.Max(newScale, 0.12));
    }

    private async Task ApplyZoom(double newScale)
    {
        // Oblicz przesunięcie względem punktu zoomu
        var ratio = 1 - (newScale / _currentScale);
        _panX += (_zoomCenterX - _panX) * ratio;
        _panY += (_zoomCenterY - _panY) * ratio;

        _currentScale = newScale;

        isTextureLoaded = false;
        await DrawStructureAndRestrykcje();
        await RenderFrame();
    }

    private async Task UpdateZoomCenter(MouseEventArgs e)
    {
        // Pobierz pozycję canvasu przez JS
        var rect = await JS.InvokeAsync<DOMRect>("getCanvasBoundingRect", CanvasRef);

        // Oblicz współrzędne względem canvasu
        _zoomCenterX = (e.ClientX - rect.Left - _panX) / _currentScale;
        _zoomCenterY = (e.ClientY - rect.Top - _panY) / _currentScale;
    }

    private async Task OnMouseUp(MouseEventArgs e)
    {
        if (CanvasRef == null)
        {
            Console.WriteLine("⚠️ Brak referencji do canvasu!");
            return;
        }

        Console.WriteLine($"🟢 Wywołano OnMouseUp {e.ClientX} {e.ClientY} {e.CtrlKey}");
  
        if (_dotNetHelper == null) return;

        // Przekaż współrzędne myszy do JavaScript
        await JS.InvokeVoidAsync(
            "stopDrag",
            _dotNetHelper
        );

        var draggedInfo = await GetDraggedModelInfoAsync();
        if (draggedInfo != null && !string.IsNullOrEmpty(draggedInfo.Type))
        {
            SelectedModelType = draggedInfo.Type;
            SelectedRowIdType = draggedInfo.RowId;


            Console.WriteLine($"🖱️ Kliknięto na pozycji ({e.ClientX}, {e.ClientY})");

            DropX = e.ClientX;
            DropY = e.ClientY;
            // Logika obsługi wybranego modelu
            Console.WriteLine($"Wybrano model typu: {SelectedModelType} SelectedRowIdType: {SelectedRowIdType}");

            await DrawStructureAndRestrykcje(0);

            await DodajOknoG();

            await RenderFrame();
        }

        Console.WriteLine($"🟢 Wywołano OnMouseUp {e.ClientX} {e.ClientY} {e.CtrlKey} SelectedModelType: {SelectedModelType} SelectedRowIdType:{SelectedRowIdType}");

        // if (!string.IsNullOrEmpty(selectedType))
        // {
        //     SelectedModelType = selectedType;

        //     SelectedRowIdType = selectedIdType;

        //     Console.WriteLine($"🖱️ Kliknięto na pozycji ({e.ClientX}, {e.ClientY})");

        //     DropX = e.ClientX;
        //     DropY = e.ClientY;
        //     // Logika obsługi wybranego modelu
        //     Console.WriteLine($"Wybrano model typu: {selectedType}");

        //     await DrawStructureAndRestrykcje(0);

        //     await DodajOknoG();

        //     await RenderFrame();

        //     // StateHasChanged();
        // }

        await JS.InvokeVoidAsync("ResetCursorGlobal");

    }

    private async Task OnlyRestrykcje()
    {

        if (!string.IsNullOrEmpty(SelectedModelType))
        {

            if (ListaModeli != null)
            {
                Console.WriteLine($"OnlyRestrykcje - Typ --> SelectedModelType: {SelectedModelType}");

                var _ListaModeliResrykcje = ListaModeli.FirstOrDefault(x => x.Typ == SelectedModelType);

                if (_ListaModeliResrykcje != null)
                {
                    infoObiekt = new List<WyrobWymiaryOpis>();

                    string restrykcje = "Brak restrykcji :)";

                    if (_ListaModeliResrykcje.KonstrMinSzer > Szerokosc)
                    {
                        restrykcje = "<#SYS> Konstrukcja nie spełnia warunku MIN szerokości. ";
                    }
                    if (_ListaModeliResrykcje.KonstrMinWys > Wysokosc)
                    {
                        restrykcje += "<#SYS> Konstrukcja nie spełnia warunku MIN wysokości. ";
                    }
                    if (_ListaModeliResrykcje.KonstrMaxWys < Wysokosc)
                    {
                        restrykcje += "<#SYS> Konstrukcja nie spełnia warunku MAX wysokości. ";
                    }
                    if (_ListaModeliResrykcje.KonstrMaxWys < Wysokosc)
                    {
                        restrykcje += "<#SYS> Konstrukcja nie spełnia warunku MIN wysokości. ";
                    }

                    // ✅ Poprawione: Utwórz nowy obiekt przed ustawieniem właściwości
                    WyrobWymiaryOpis opisy = new WyrobWymiaryOpis(Szerokosc, Wysokosc, SelectedModelType, restrykcje);

                    infoObiekt.Add(opisy);

                    if (KonfiguracjeSystemu != null)
                    {
                        var _KonfiguracjeSystemu = KonfiguracjeSystemu.OrderBy(x => x.Indeks);

                        if (_KonfiguracjeSystemu != null)
                        {
                            foreach (var _kon in _KonfiguracjeSystemu)
                            {
                                WygenerowaneMaterialy opisySys = new WygenerowaneMaterialy(
                                 _kon.PoziomDol ?? 0.0,
                                 _kon.Nazwa ?? "",
                                 _kon.Indeks ?? "",
                                 1,
                                 ""
                                 );

                                infoBoom.Add(opisySys);
                            }


                        }

                    }


                }

            }
        }

        await Task.CompletedTask;
    }

    private async Task OnSystemSelected(ChangeEventArgs e)
    {
        SelectedSystemId = e.Value.ToString();

        Console.WriteLine($"Wybrano system o ID: {SelectedSystemId}");

        if (string.IsNullOrEmpty(SelectedSystemId))
        {

            if (KonfiguracjeSystemu != null) KonfiguracjeSystemu.Clear();
            return;
        }

        KonfiguracjeSystemu = await Http.GetFromJsonAsync<List<KonfSystem>>($"api/konfsystem/FIN_DROWID/{SelectedSystemId}");

        ListaModeli = await Http.GetFromJsonAsync<List<KonfModele>>($"api/konfmodele/FIND_ONLY_TRUE/{SelectedSystemId}");

    }

    private bool isTextureLoaded = false;

    private async Task DrawStructureAndRestrykcje(int isTextureLoadedNZ = 999)
    {
        if (isTextureLoadedNZ == 0) isTextureLoaded = false;

        try
        {
            if (CanvasRef == null)
            {
                Console.WriteLine("⚠️ Brak referencji do canvasu!");
                return;
            }

            _context ??= await CanvasRef.CreateCanvas2DAsync();

            if (!isTextureLoaded)
            {
                var baseUrl = Navigation.BaseUri;
                var imageUrl = $"{baseUrl}api/images/{woodPatternName}";

                await JS.InvokeVoidAsync("loadAndDrawTexture",
                    CanvasRef.CanvasReference,
                    imageUrl,
                    _dotNetHelper
                );

                await OnlyRestrykcje();

                // StateHasChanged();
                // return;
            }

            await RenderFrame();

            // Reszta kodu do rysowania...
        }
        catch (Exception ex)
        {
            Console.WriteLine($"🔥 Błąd podczas rysowania: {ex.Message}");
        }
    }

    public async Task<DraggedModelInfo> GetDraggedModelInfoAsync()
    {
        try
        {
            var info = await JS.InvokeAsync<DraggedModelInfo>("getDraggedModelInfo");
            await JS.InvokeVoidAsync("clearCurrentModel"); // Opcjonalne czyszczenie po odczycie
            return info;
        }
        catch (JSException ex)
        {
            Console.WriteLine($"Błąd pobierania informacji o modelu: {ex.Message}");
            return null;
        }
    }

    [JSInvokable]
    public async Task OnDragError(string message)
    {
        await _message.Error(message);
        StateHasChanged();
    }

    public void Dispose()
    {
        try
        {
            _dotNetHelper?.Dispose();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"🔥 Błąd podczas zwalniania zasobów: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task OnTextureLoaded()
    {
        try
        {
            isTextureLoaded = true;
            Console.WriteLine("✅ Tekstura załadowana!");
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"🔥 Błąd podczas ładowania tekstury: {ex.Message}");
        }
    }

    private List<KsztaltElementu> ksztalty = new();

    private async Task DodajOknoG()
    {

        var generator = new Generator();
        generator.GruboscDol = 82;
        generator.GruboscGora = 82;
        generator.GruboscLewo = 82;
        generator.GruboscPrawo = 82;

        generator.Szerokosc = Szerokosc;
        generator.Wysokosc = Wysokosc;

        if (KonfiguracjeSystemu != null)
        {
            generator.KonfiguracjeSystemu = KonfiguracjeSystemu;
            generator.RowIdSystemu = Guid.Parse(SelectedSystemId);

            if (!string.IsNullOrEmpty(SelectedRowIdType))
            {
               generator.RowIdModelu = Guid.Parse(SelectedRowIdType);

                var powiazanyModel = await Http.GetFromJsonAsync<MVCKonfModele>($"api/konfmodeleelementy/powiazaniajuzzaznaczone/{SelectedRowIdType}");
                if (powiazanyModel != null)
                {
                    generator.PowiazanyModel = powiazanyModel;
                }
            }

        }
        else
        {
            var kofiguracjeSystemu = await Http.GetFromJsonAsync<List<KonfSystem>>($"api/konfsystem/FIN_DROWID/{SelectedSystemId}");
            generator.KonfiguracjeSystemu = kofiguracjeSystemu;
            Console.WriteLine("Ponowinie pobrano kofiguracjeSystemu..............................................");
        }

        generator.EdytowanyModel = WybranyModel;
        generator.TypKsztaltu = WybranyKsztalt;

        generator.AddElements(_regions);
        ksztalty = generator.ElementyRamyRysowane;

        var sb = new System.Text.StringBuilder();
        sb.AppendLine($"Liczba wygenerowanych kształtów: {ksztalty.Count}");

        for (int i = 0; i < ksztalty.Count; i++)
        {
            var ksztalt = ksztalty[i];
            sb.AppendLine($"Kształt {i + 1}:");
            sb.AppendLine($"- Typ: {ksztalt.TypKsztaltu}");
            sb.AppendLine($"- Grupa: {ksztalt.Grupa}");
            sb.AppendLine($"- Wypełnienie zewnętrzne: {ksztalt.WypelnienieZewnetrzne}");
            sb.AppendLine($"- Wypełnienie wewnętrzne: {ksztalt.WypelnienieWewnetrzne}");
            sb.AppendLine($"- Liczba punktów: {ksztalt.Wierzcholki?.Count ?? 0}");

            if (ksztalt.Wierzcholki != null)
            {
                sb.AppendLine("  Punkty:");
                foreach (var punkt in ksztalt.Wierzcholki)
                {
                    sb.AppendLine($"  - X: {punkt.X}, Y: {punkt.Y}");
                }
            }
        }

        Console.WriteLine(sb.ToString());
        await Task.CompletedTask;
    }

    private async Task RenderFrame(bool calculate = true)
    {
        try
        {
            if (_context == null || ksztalty == null || !ksztalty.Any())
                return;

            // Przygotowanie canvas
            await _context.SetTransformAsync(1, 0, 0, 1, 0, 0);
            await _context.ClearRectAsync(0, 0, CanvasWidth, CanvasHeight);
            await _context.TranslateAsync(_panX, _panY);
            await _context.ScaleAsync(_currentScale, _currentScale);

            // Przygotowanie tekstury
            var baseUrl = Navigation.BaseUri;
            var imageUrl = $"{baseUrl}api/images/{woodPatternName}";

            // Rysowanie każdego kształtu
            foreach (var ksztalt in ksztalty)
            {
                Console.WriteLine($"Rysuję kształt: {ksztalt.TypKsztaltu}");
                if (ksztalt.Wierzcholki == null || ksztalt.Wierzcholki.Count < 3)
                    continue;
                Console.WriteLine($"ksztalt: {ksztalt.Id}");
                await DrawShapeWithVariableOffset(_context, ksztalt, imageUrl, calculate);
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd renderowania: {ex.Message}\n{ex.StackTrace}");
        }
    }

    private async Task DrawShapeWithVariableOffset(Canvas2DContext context, KsztaltElementu ksztalt, string textureUrl, bool calculate)
    {
        var outerPoints = ksztalt.Wierzcholki;

        Console.WriteLine($"outerPoints: {outerPoints.Count}");  

        var offsets = GetOffsetsForGroup(ksztalt.Grupa);

        List<XPoint> innerPoints;


       await DrawSingleContour(context, outerPoints);


       // await DrawDoubleContour(context, outerPoints, innerPoints);

        await JS.InvokeVoidAsync("loadAndDrawTexture",
            CanvasRef.CanvasReference,
            textureUrl,
            _dotNetHelper
        );

        await context.SetStrokeStyleAsync("#000000");
        await context.SetLineWidthAsync(1.5f);
        await context.StrokeAsync();
    }


    private (float left, float right, float top, float bottom) GetOffsetsForGroup(string grupa)
    {
        // Domyślne wartości (można dostosować)
        float grLewo = 82;
        float grPrawo = 82;
        float grGora = 82;
        float grDol = 92;

        return grupa switch
        {
            "Lewo" => (grLewo, 0, 0, 0),
            "Prawo" => (0, grPrawo, 0, 0),
            "Gora" => (0, 0, grGora, 0),
            "Dol" => (0, 0, 0, grDol),
            _ => (grLewo, grPrawo, grGora, grDol) // Domyślne dla innych przypadków
        };
    }

    private async Task DrawSingleContour(Canvas2DContext context, List<XPoint> outerPoints)
    {
        if (outerPoints == null || outerPoints.Count < 2) return;

        // Rysuj pojedynczy kontur zewnętrzny
        await context.BeginPathAsync();

        // Rozpocznij od pierwszego punktu
        await context.MoveToAsync(outerPoints[0].X, outerPoints[0].Y);

        // Rysuj linie do kolejnych punktów
        for (int i = 1; i < outerPoints.Count; i++)
        {
            await context.LineToAsync(outerPoints[i].X, outerPoints[i].Y);
        }

        // Zamknij kształt
        await context.ClosePathAsync();

        // Opcjonalne stylowanie
        await context.SetStrokeStyleAsync("black");
        await context.SetLineWidthAsync(2);
        await context.StrokeAsync();
    }

    private async Task GoBack()
    {
        await JS.InvokeVoidAsync("ResetCursorGlobal");
        await JS.InvokeVoidAsync("history.back");
    }

    private async Task GoCAD()
    {
        await JS.InvokeVoidAsync("ResetCursorGlobal");

        NavigationManager.NavigateTo($"/DrawCAD");

        await Task.CompletedTask;
    }

    private bool boolOdczyt = false;
    private bool boolZmiana = false;
    private bool boolUsuniecia = false;
    private bool boolAdmin = false;
    private bool boolNowy = false;
    private string RowIdPracownika = "";
    private string? user;
    private bool isNotDisabled => !boolZmiana;
    private List<UprawnieniaPracownikaViewModel>? uprawnienia;

    private async Task Laduj_Uprawnienia()
    {
        user = await LocalStorage.GetStringAsync("user");

        if (string.IsNullOrEmpty(user))
        {
            //NavigationManager.NavigateTo($"", true);
            return;
        }

        string nazwaTabeli = "SystemyOkienne";

        Console.WriteLine($"api/ZwrocSatus/{user}/{nazwaTabeli}");

        try
        {
            uprawnienia = await Http.GetFromJsonAsync<List<UprawnieniaPracownikaViewModel>>($"/api/ZwrocSatus/{user}/{nazwaTabeli}");
        }
        catch (System.Net.Http.HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            Console.WriteLine("Brak danych!!!");
            await _message.Error("Brak danych - status użytkownika");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await _message.Error(ex.Message);
        }

        if (uprawnienia != null)
        {
            if (uprawnienia.Count > 0)
            {
                var znalezioneElementy = uprawnienia.Where(uprawnienie => uprawnienie.TableName == nazwaTabeli);
                Console.WriteLine("Znaleziono uprawnienia dla użytkownika: " + user + " w tabeli: " + nazwaTabeli + " ilość rekordów: " + znalezioneElementy.Count());
                if (znalezioneElementy.Any())
                {
                    var szuk = znalezioneElementy.FirstOrDefault(x => x.TableName == nazwaTabeli);
                    if (szuk != null)
                    {
                        boolOdczyt = szuk.Odczyt;
                        boolZmiana = szuk.Zmiana;
                        boolUsuniecia = szuk.Usuniecie;
                        boolAdmin = szuk.Administrator;
                        boolNowy = szuk.Zapis;
                        RowIdPracownika = szuk.RowId ?? "??????";
                    }
                }
            }
        }
    }

    public class DOMRect
    {
        public double Left { get; set; }
        public double Top { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
    }

    private class PointClassification
    {
        public bool IsLeft { get; set; }
        public bool IsRight { get; set; }
        public bool IsTop { get; set; }
        public bool IsBottom { get; set; }
    }

    public class DraggedModelInfo
    {
        public string Type { get; set; }
        public string RowId { get; set; }
    }

}