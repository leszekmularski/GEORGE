@page "/Modele-okienne"
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.PixelFormats
@using SixLabors.ImageSharp.Drawing.Processing
@using SixLabors.ImageSharp.Processing
@using SixLabors.ImageSharp.Drawing
@using SixLabors.ImageSharp.Formats.Png;
@using GEORGE.Shared.Models
@using GEORGE.Shared.Class
@inject IJSRuntime JS
@inject Utilities.ILocalStorage LocalStorage
@inject HttpClient Http
@using System.Net
@inject IMessageService _message

<script>
    if (!window.oknoKonfiguracja) {
        window.oknoKonfiguracja = [];
    }
    if (typeof window.zoomLevel === 'undefined') {
        window.zoomLevel = 1; // Deklaracja zmiennej zoomLevel
    }
    if (typeof window.offsetX === 'undefined') {
        window.offsetX = 0; // Przesunięcie w osi X
    }
    if (typeof window.offsetY === 'undefined') {
        window.offsetY = 0; // Przesunięcie w osi Y
    }

    window.onload = function () {
        var canvas = document.getElementById("final-window");
        var ctx = canvas.getContext("2d");

        function dopasujCanvas() {
            var container = document.querySelector(".canvas-container");

            // Dynamiczne dopasowanie rozmiaru canvas do kontenera
            canvas.width = container.clientWidth;
            canvas.height = container.clientHeight;

            // Przerysowanie zawartości po zmianie rozmiaru
            window.RysujOkno();
        }

        // Dopasowanie przy starcie
        dopasujCanvas();

        // Ponowne dopasowanie przy zmianie rozmiaru okna
        window.addEventListener("resize", dopasujCanvas);
    };

    window.dodajElementDoOkna = function (modelName, x, y, szerokosc, wysokosc, imageSrc) {
        var element = {
            modelName: modelName,
            x: x,
            y: y,
            szerokosc: szerokosc,
            wysokosc: wysokosc,
            imageSrc: imageSrc
        };

        window.oknoKonfiguracja.push(element);
        window.RysujOkno();
    };

    window.RysujOkno = function () {
        var canvas = document.getElementById("final-window");
        var ctx = canvas.getContext("2d");

        // canvas.height = canvas.height * 2;
        // canvas.width = canvas.height;

        console.log(`RysujOkno -> canvas.width: ${canvas.width} canvas.height: ${canvas.height}`)

        // Czyszczenie płótna
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        if (window.oknoKonfiguracja.length === 0) return;

        // Iteracja po wszystkich elementach i rysowanie ich
        window.oknoKonfiguracja.forEach(function (element) {
            var img = new Image();
            img.src = element.imageSrc;

            img.onload = function () {
                // Skalowanie proporcjonalne, aby obraz zajmował 95% obszaru canvas
                var scale = Math.min(canvas.width * 0.95 / img.width, canvas.height * 0.95 / img.height) * window.zoomLevel;
                var scaledWidth = img.width * scale;
                var scaledHeight = img.height * scale;

                // Rysowanie na środku canvas z uwzględnieniem przesunięcia
                var x = (canvas.width - scaledWidth) / 2 + window.offsetX;
                var y = (canvas.height - scaledHeight) / 2 + window.offsetY;
                ctx.drawImage(img, x, y, scaledWidth, scaledHeight);
            };
        });
    };

    window.zoomInCanvas = function () {
        window.zoomLevel *= 1.1;
        window.RysujOkno();
    };

    window.zoomOutCanvas = function () {
        window.zoomLevel /= 1.1;
        window.RysujOkno();
    };

    window.startDrag = function (modelName, clientX, clientY, imageSrc) {
        let canvas = document.getElementById("final-window");
        let ctx = canvas.getContext("2d");
        let rect = canvas.getBoundingClientRect();

        // 🖼️ Tworzymy warstwę poza ekranem (offscreen canvas)
        let offscreenCanvas = document.createElement("canvas");
        offscreenCanvas.width = canvas.width;
        offscreenCanvas.height = canvas.height;
        let offscreenCtx = offscreenCanvas.getContext("2d");

        // 📌 Kopiujemy aktualny `canvas` na warstwę poza ekranem
        offscreenCtx.drawImage(canvas, 0, 0);

        let draggedElement = {
            modelName: modelName,
            x: clientX - rect.left,
            y: clientY - rect.top,
            szerokosc: 100,
            wysokosc: 100,
            imageSrc: imageSrc,
        };

        let img = new Image();
        img.src = imageSrc;

        function moveElement(e) {
            draggedElement.x = e.clientX - rect.left;
            draggedElement.y = e.clientY - rect.top;

            // 🔥 Zamiast czyścić `canvas`, rysujemy z warstwy poza ekranem
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.drawImage(offscreenCanvas, 0, 0);
            ctx.drawImage(img, draggedElement.x, draggedElement.y, draggedElement.szerokosc, draggedElement.wysokosc);
        }

        function stopDrag() {
            document.removeEventListener("mousemove", moveElement);
            document.removeEventListener("mouseup", stopDrag);

            console.log(`🔥 stopDrag -> X:${draggedElement.x}, Y:${draggedElement.y}`);

            window.oknoKonfiguracja.push(draggedElement);
            window.RysujOkno();

            canvas.style.cursor = "default"; // 🔥 Przywrócenie kursora
        }

        console.log(`🔥 startDrag -> Model: ${modelName}, X: ${draggedElement.x}, Y: ${draggedElement.y}`);

        canvas.style.cursor = "grabbing";

        document.addEventListener("mousemove", moveElement);
        document.addEventListener("mouseup", stopDrag);
    };

    // Funkcja dodająca figury geometryczne
    window.dodajKsztalt = function (ksztalt, szerokosc, wysokosc, kolor, czyWypelnienie) {
        var canvas = document.getElementById("final-window");
        var ctx = canvas.getContext("2d");

        // Automatyczne dopasowanie rozmiaru (80% dostępnej przestrzeni)
        var maxWidth = canvas.width * 0.8;
        var maxHeight = canvas.height * 0.8;
        szerokosc = Math.min(szerokosc, maxWidth);
        wysokosc = Math.min(wysokosc, maxHeight);

        // Obliczenie środka canvas
        var x = (canvas.width - szerokosc) / 2;
        var y = (canvas.height - wysokosc) / 2;

        ctx.strokeStyle = kolor;
        ctx.lineWidth = 3;
        ctx.fillStyle = czyWypelnienie ? kolor : "transparent";

        switch (ksztalt) {
            case "prostokat":
                if (czyWypelnienie) ctx.fillRect(x, y, szerokosc, wysokosc);
                ctx.strokeRect(x, y, szerokosc, wysokosc);
                break;

            case "trojkat":
                ctx.beginPath();
                ctx.moveTo(x + szerokosc / 2, y);
                ctx.lineTo(x + szerokosc, y + wysokosc);
                ctx.lineTo(x, y + wysokosc);
                ctx.closePath();
                if (czyWypelnienie) ctx.fill();
                ctx.stroke();
                break;

            case "okrag":
                ctx.beginPath();
                ctx.arc(canvas.width / 2, canvas.height / 2, szerokosc / 2, 0, Math.PI * 2);
                if (czyWypelnienie) ctx.fill();
                ctx.stroke();
                break;

            case "trapez":
                ctx.beginPath();
                ctx.moveTo(x + szerokosc * 0.2, y);
                ctx.lineTo(x + szerokosc * 0.8, y);
                ctx.lineTo(x + szerokosc, y + wysokosc);
                ctx.lineTo(x, y + wysokosc);
                ctx.closePath();
                if (czyWypelnienie) ctx.fill();
                ctx.stroke();
                break;

            case "romb":
                ctx.beginPath();
                ctx.moveTo(x + szerokosc / 2, y);
                ctx.lineTo(x + szerokosc, y + wysokosc / 2);
                ctx.lineTo(x + szerokosc / 2, y + wysokosc);
                ctx.lineTo(x, y + wysokosc / 2);
                ctx.closePath();
                if (czyWypelnienie) ctx.fill();
                ctx.stroke();
                break;

            case "piksel":
                ctx.fillRect(canvas.width / 2, canvas.height / 2, 1, 1);
                break;
        }
    };

</script>


<style>

    /* Globalne ustawienia */
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        overflow: hidden;
        font-family: Arial, sans-serif;
        background-color: #f8f9fa;
    }

    /* Kontener główny */
    .window-model-container {
        display: flex;
        height: 70vh;
        background-color: #fff;
        padding: 10px;
        box-sizing: border-box;
    }

    /* Panel boczny z modelami */
    .wing-model-container {
        flex: 0 0 250px; /* Zmniejszenie szerokości */
        height: 100%;
        overflow-y: auto;
        border-right: 2px solid #ddd;
        padding: 10px;
        background: #f8f9fa;
    }

        /* Tabela modeli */
        .wing-model-container table {
            font-size: 13px;
            width: 100%;
            border-collapse: collapse;
        }

        .wing-model-container th, .wing-model-container td {
            padding: 6px;
            text-align: center;
        }

        .wing-model-container th {
            background-color: #007bff;
            color: white;
        }

        .wing-model-container tr:hover {
            background-color: rgba(0, 123, 255, 0.1);
        }

        /* Miniatury modeli */
        .wing-model-container img {
            width: 45px;
            height: 45px;
            object-fit: contain;
            cursor: grab;
            transition: transform 0.2s ease-in-out;
        }

            .wing-model-container img:hover {
                transform: scale(1.1);
            }

    /* Główne okno wyświetlania */
    .display-window {
        flex-grow: 1;
        height: 100%;
        border: 2px solid #ddd;
        background-color: #fff;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 10px;
        box-sizing: border-box;
        position: relative;
    }

    /* Kontener canvas - dopasowany do okna */
    .canvas-container {
        width: 100%;
        height: 100%;
        max-width: 100%;
        max-height: 100%;
        border: 2px solid #ddd;
        background-color: #fff;
        border-radius: 5px;
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: auto; /* Ukrywa przewijanie */
        position: relative;
    }

    /* Canvas - dynamiczne skalowanie */
    canvas {
        display: block;
        max-width: 100%;
        max-height: 100%;
        background-color: transparent;
    }

    /* Paski przewijania */
    .wing-model-container::-webkit-scrollbar {
        width: 8px;
    }

    .wing-model-container::-webkit-scrollbar-thumb {
        background: #007bff;
        border-radius: 5px;
    }

        .wing-model-container::-webkit-scrollbar-thumb:hover {
            background: #0056b3;
        }

    /* 🔹 Toolbar z przyciskami */
    .toolbar {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        justify-content: center;
        padding: 10px;
        background: #fff;
    }

        /* Styl dla przycisków */
        .toolbar .btn {
            flex: 1;
            min-width: 90px;
            font-size: 13px;
            padding: 6px 8px;
            transition: all 0.2s ease-in-out;
        }

            .toolbar .btn:hover {
                transform: scale(1.05);
            }

</style>

<!-- Nagłówek -->
<div class="d-flex justify-content-between align-items-center mt-2 mb-2">
    <h3 class="mb-0">Modele Okienne</h3>
    <button class="btn btn-primary" @onclick="GoBack">
        <i class="fas fa-arrow-left"></i> Wróć
    </button>
</div>
<!-- 🔹 Wybór systemu -->
<Tooltip Placement="@Placement.TopRight" Title="Otwórz konfigurator nowego systemu lub wybierz go z listy">
    <div class="d-flex">
        @if (Systemy != null && Systemy.Any())
        {
            <select class="form-select me-2" @onchange="@(async (args) => await OnSystemSelected(args))">
                <option value="" disabled selected>-- Wybierz system --</option>
                @foreach (var system in Systemy)
                {
                    <option value="@system.RowId">@system.Nazwa_Systemu</option>
                }
            </select>
        }
    </div>
</Tooltip>

<Collapse DefaultActiveKey="@(new[]{"1"})" Animation>
    <Panel Header="Ustawienia" Key="1">

<!-- Toolbar z przyciskami -->
        <div class="toolbar">
            <button class="btn btn-outline-primary" @onclick="@(() => WybierzKsztalt("prostokat"))">🟥 Prostokąt</button>
            <button class="btn btn-outline-primary" @onclick="@(() => WybierzKsztalt("trojkat"))">🔺 Trójkąt</button>
            <button class="btn btn-outline-primary" @onclick="@(() => WybierzKsztalt("okrag"))">⚫ Okrąg</button>
            <button class="btn btn-outline-primary" @onclick="@(() => WybierzKsztalt("trapez"))">🔷 Trapez</button>
            <button class="btn btn-outline-primary" @onclick="@(() => WybierzKsztalt("romb"))">♦ Romb</button>
            <button class="btn btn-outline-primary" @onclick="@(() => WybierzKsztalt("piksel"))">🟧 Piksel</button>
        </div>


<!-- Wprowadzenie wartości -->
<div class="form-group mt-3">
    <label>Szerokość:</label>
    <input type="number" class="form-control" @bind="Szerokosc" />

    <label>Wysokość:</label>
    <input type="number" class="form-control" @bind="Wysokosc" />

    <label>Kolor:</label>
    <input type="color" class="form-control" @bind="Kolor" />

    <button class="btn btn-success mt-2 w-100" @onclick="DodajKsztalt">Dodaj kształt</button>
</div>
</Panel>
</Collapse>
<button class="btn btn-outline-primary" @onclick="ZoomIn">🔍 Powiększ</button>
<button class="btn btn-outline-primary" @onclick="ZoomOut">🔍 Pomniejsz</button>
<!-- Kontener na modele i canvas -->
<div class="window-model-container">
    <!-- Panel boczny z modelami -->
    <div class="wing-model-container">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Typ</th>
                    <th>Wymiary</th>
                    <th>Miniaturka</th>
                </tr>
            </thead>
            <tbody>
                @if (ListaModeli != null)
                {
                    @foreach (var model in ListaModeli)
                    {
                        <tr>
                            <td>@model.Typ</td>
                            <td>@model.KonstrMinSzer x @model.KonstrMinWys → @model.KonstrMaxSzer x @model.KonstrMaxWys</td>
                            <td>
                                @if (model.Rysunek != null && model.Rysunek.Length > 0)
                                {
                                    <img id="@($"wing-{model.Typ}")"
                                         src="data:image/png;base64,@Convert.ToBase64String(model.Rysunek)"
                                         @onmousedown="@(e => StartDrag(e, model, 0, 0, @Szerokosc, @Wysokosc))" />
                                }
                                else
                                {
                                    <span class="text-muted">Brak</span>
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <!-- Główne okno wyświetlania -->
    <div class="display-window">
        <div class="canvas-container" style="overflow: auto;">
            <canvas id="final-window" ></canvas>
        </div>
    </div>
</div>



@code {
    // Klasa WingModel definiująca dane dla skrzydła
    private List<KonfSystem>? KonfiguracjeSystemu;

    private List<SystemyOkienne>? Systemy;

    private string WybranyKsztalt = "prostokat";
    private int X = 0, Y = 0, Szerokosc = 1000, Wysokosc = 1000;
    private string Kolor = "#ff0000"; // Domyślny czerwony

    private string SelectedSystemId = "";
    private List<KonfModele>? ListaModeli;

    protected override async Task OnInitializedAsync()
    {
        await Laduj_Uprawnienia();

        Systemy = await Http.GetFromJsonAsync<List<SystemyOkienne>>("api/systemy-okienne");

       await JS.InvokeVoidAsync("window.onload");
    }

    private async Task OnSystemSelected(ChangeEventArgs e)
    {
        SelectedSystemId = e.Value.ToString();

        Console.WriteLine($"Wybrano system o ID: {SelectedSystemId}");

        if (string.IsNullOrEmpty(SelectedSystemId))
        {

            if (KonfiguracjeSystemu != null) KonfiguracjeSystemu.Clear();
            return;
        }

        KonfiguracjeSystemu = await Http.GetFromJsonAsync<List<KonfSystem>>($"api/konfsystem/FIN_DROWIDONLYTRUE/{SelectedSystemId}");

        ListaModeli = await Http.GetFromJsonAsync<List<KonfModele>>("api/konfmodele/");

    }

    private void ZoomIn()
    {
        JS.InvokeVoidAsync("window.zoomInCanvas");
    }

    private void ZoomOut()
    {
        JS.InvokeVoidAsync("window.zoomOutCanvas");
    }

    private void WybierzKsztalt(string ksztalt)
    {
        WybranyKsztalt = ksztalt;
    }

    private bool CzyWypelnienie = false;

    private void DodajKsztalt()
    {
        JS.InvokeVoidAsync("window.dodajKsztalt", WybranyKsztalt, Szerokosc, Wysokosc, Kolor, CzyWypelnienie);
    }

    private void DodajElement(KonfModele model, int x, int y, int szerokosc, int wysokosc)
    {
        string base64Image = RysunekToBase64(model.Rysunek);
        JS.InvokeVoidAsync("window.dodajElementDoOkna", model.Typ, x, y, szerokosc, wysokosc, base64Image);
    }

    private void StartDrag(MouseEventArgs e, KonfModele model, int x, int y, int szerokosc, int wysokosc)
    {
        if (model.Rysunek == null || model.Rysunek.Length == 0)
        {
            Console.WriteLine("❌ Błąd: Brak obrazu w modelu!");
            return;
        }

        string base64Image = $"data:image/png;base64,{Convert.ToBase64String(model.Rysunek)}";

        Console.WriteLine($"🔥 StartDrag: {model.Id} | X:{e.ClientX}, Y:{e.ClientY}");

        JS.InvokeVoidAsync("window.startDrag", model.Id, e.ClientX, e.ClientY, base64Image);
    }

    // private void StartDrag(MouseEventArgs e, string modelId, string imageSrc)
    // {
    //     JS.InvokeVoidAsync("window.startDrag", modelId, e.ClientX, e.ClientY, imageSrc);
    // }

    private string RysunekToBase64(byte[]? imageData)
    {
        if (imageData == null || imageData.Length == 0)
        {
            return "data:image/png;base64,"; // Zapobiega błędom
        }

        return $"data:image/png;base64,{Convert.ToBase64String(imageData)}";
    }

    private async Task GoBack()
    {
        await JS.InvokeVoidAsync("history.back");
    }

    public async Task<byte[]> DodajObrazNaWarstwe(byte[] obrazGlownegoOkna, byte[] nowyObraz, int x, int y)
    {
        using (var image = SixLabors.ImageSharp.Image.Load(obrazGlownegoOkna))
        using (var overlay = SixLabors.ImageSharp.Image.Load(nowyObraz))
        {
            image.Mutate(ctx => ctx.DrawImage(overlay, new SixLabors.ImageSharp.Point(x, y), 1f));

            using (var ms = new MemoryStream())
            {
                image.Save(ms, new PngEncoder());
                return ms.ToArray();
            }
        }
    }

    private bool boolOdczyt = false;
    private bool boolZmiana = false;
    private bool boolUsuniecia = false;
    private bool boolAdmin = false;
    private bool boolNowy = false;
    private string RowIdPracownika = "";
    private string? user;
    private bool isNotDisabled => !boolZmiana;
    private List<UprawnieniaPracownikaViewModel>? uprawnienia;

    private async Task Laduj_Uprawnienia()
    {
        user = await LocalStorage.GetStringAsync("user");

        if (string.IsNullOrEmpty(user))
        {
            //NavigationManager.NavigateTo($"", true);
            return;
        }

        string nazwaTabeli = "SystemyOkienne";

        Console.WriteLine($"api/ZwrocSatus/{user}/{nazwaTabeli}");

        try
        {
            uprawnienia = await Http.GetFromJsonAsync<List<UprawnieniaPracownikaViewModel>>($"/api/ZwrocSatus/{user}/{nazwaTabeli}");
        }
        catch (System.Net.Http.HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            Console.WriteLine("Brak danych!!!");
            await _message.Error("Brak danych - status użytkownika");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await _message.Error(ex.Message);
        }

        if (uprawnienia != null)
        {
            if (uprawnienia.Count > 0)
            {
                var znalezioneElementy = uprawnienia.Where(uprawnienie => uprawnienie.TableName == nazwaTabeli);
                Console.WriteLine("Znaleziono uprawnienia dla użytkownika: " + user + " w tabeli: " + nazwaTabeli + " ilość rekordów: " + znalezioneElementy.Count());
                if (znalezioneElementy.Any())
                {
                    var szuk = znalezioneElementy.FirstOrDefault(x => x.TableName == nazwaTabeli);
                    if (szuk != null)
                    {
                        boolOdczyt = szuk.Odczyt;
                        boolZmiana = szuk.Zmiana;
                        boolUsuniecia = szuk.Usuniecie;
                        boolAdmin = szuk.Administrator;
                        boolNowy = szuk.Zapis;
                        RowIdPracownika = szuk.RowId ?? "??????";
                    }
                }
            }
        }
    }

}