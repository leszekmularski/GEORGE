@page "/Modele-okienne"
@using GEORGE.Shared.Models
@using GEORGE.Shared.Class
@inject IJSRuntime JS
@inject Utilities.ILocalStorage LocalStorage
@inject HttpClient Http
@using System.Net
@inject IMessageService _message
@inject INotificationService _notice
@inject NavigationManager Navigation

@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D

<script>
    (() => {
    if (!window.offscreenCanvas) {
    window.offscreenCanvas = document.createElement("canvas");
    window.offscreenCtx = window.offscreenCanvas.getContext("2d");
    }

    window.wirtualnaWarstwa = window.wirtualnaWarstwa || [];
    window.oknoKonfiguracja = window.oknoKonfiguracja || [];
    window.zoomLevel = window.zoomLevel || 1;
    window.offsetX = window.offsetX || 0;
    window.offsetY = window.offsetY || 0;

    window.onload = () => {
    const canvas = document.getElementById("final-window");
    if (!canvas) {
    console.error("❌ Nie znaleziono canvasu #final-window");
    return;
    }

    function dopasujCanvas() {
    const container = document.querySelector(".canvas-container");
    if (!container) {
    console.warn("⚠️ Nie znaleziono .canvas-container");
    return;
    }

    canvas.width = container.clientWidth;
    canvas.height = container.clientHeight;
    window.RysujOkno();
    }

    dopasujCanvas();
    window.addEventListener("resize", dopasujCanvas);
    };

    window.dodajElementDoOkna = (modelName, x, y, szerokosc, wysokosc, imageSrc) => {
    window.oknoKonfiguracja.push({ modelName, x, y, szerokosc, wysokosc, imageSrc });
    window.RysujOkno();
    };

    window.RysujOkno = () => {
    const canvas = document.getElementById("final-window");
    if (!canvas) return console.error("❌ Nie znaleziono canvasu!");

    const ctx = canvas.getContext("2d");
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    ctx.save();
    ctx.translate(canvas.width / 2, canvas.height / 2);
    ctx.scale(window.zoomLevel, window.zoomLevel);
    ctx.translate(-canvas.width / 2, -canvas.height / 2);

    window.wirtualnaWarstwa.forEach(({ x, y, szerokosc, wysokosc, imageSrc }) => {
    const img = new Image();
    img.src = imageSrc;
    img.onload = () => ctx.drawImage(img, x, y, szerokosc, wysokosc);
    });

    ctx.restore();
    };

    window.zoomInCanvas = () => {
    window.zoomLevel *= 1.1;
    window.RysujOkno();
    };

    window.zoomOutCanvas = () => {
    window.zoomLevel /= 1.1;
    window.RysujOkno();
    };

    window.startDrag = (modelName, clientX, clientY, imageSrc) => {
    const canvas = document.getElementById("final-window");
    if (!canvas) return console.error("❌ Nie znaleziono canvasu!");

    const ctx = canvas.getContext("2d");
    const rect = canvas.getBoundingClientRect();

    const draggedElement = {
    modelName,
    x: clientX - rect.left,
    y: clientY - rect.top,
    szerokosc: 100,
    wysokosc: 100,
    imageSrc
    };

    function moveElement(e) {
    draggedElement.x = e.clientX - rect.left;
    draggedElement.y = e.clientY - rect.top;

    window.wirtualnaWarstwa.push(draggedElement);
    window.RysujOkno();
    }

    function stopDrag() {
    document.removeEventListener("mousemove", moveElement);
    document.removeEventListener("mouseup", stopDrag);
    canvas.style.cursor = "default";
    }

    canvas.style.cursor = "grabbing";
    document.addEventListener("mousemove", moveElement);
    document.addEventListener("mouseup", stopDrag);
    };

    window.dodajKsztalt = (ksztalt, szerokosc, wysokosc, kolor, czyWypelnienie) => {
    const canvas = document.getElementById("final-window");
    if (!canvas) return console.error("❌ Nie znaleziono canvasu!");

    const ctx = canvas.getContext("2d");
    const x = (canvas.width - szerokosc) / 2;
    const y = (canvas.height - wysokosc) / 2;

    ctx.strokeStyle = kolor;
    ctx.lineWidth = 3;
    ctx.fillStyle = czyWypelnienie ? kolor : "transparent";

    ctx.beginPath();
    if (ksztalt === "prostokat") {
    if (czyWypelnienie) ctx.fillRect(x, y, szerokosc, wysokosc);
    ctx.strokeRect(x, y, szerokosc, wysokosc);
    } else if (ksztalt === "trojkat") {
    ctx.moveTo(x + szerokosc / 2, y);
    ctx.lineTo(x + szerokosc, y + wysokosc);
    ctx.lineTo(x, y + wysokosc);
    ctx.closePath();
    } else if (ksztalt === "okrag") {
    ctx.arc(canvas.width / 2, canvas.height / 2, szerokosc / 2, 0, Math.PI * 2);
    }
    if (czyWypelnienie) ctx.fill();
    ctx.stroke();
    };

    window.aktualizujWirtualnaWarstwe = element => {
    window.wirtualnaWarstwa.push(element);
    window.RysujOkno();
    };

    window.loadTexture = async (canvasId, imageUrl) => {
    console.log("🔹 Próba załadowania obrazu:", imageUrl);

    let canvas = document.getElementById(canvasId);
    if (!canvas) {
    console.warn("⏳ Canvas nie istnieje, próbuję ponownie za 500ms...");
    await new Promise(resolve => setTimeout(resolve, 500));
    canvas = document.getElementById(canvasId);
    }

    if (!canvas) {
    console.error("❌ Nie znaleziono canvasu!");
    return null;
    }

    const ctx = canvas.getContext("2d");
    if (!ctx) {
    console.error("❌ Błąd: Nie można uzyskać kontekstu 2D.");
    return null;
    }

    return new Promise((resolve, reject) => {
    const img = new Image();
    img.crossOrigin = "anonymous";
    img.src = imageUrl;

    img.onload = () => {
    console.log("✅ Obrazek załadowany!");
    resolve(ctx.createPattern(img, "repeat"));
    };

    img.onerror = err => {
    console.error("❌ Błąd ładowania obrazu!", err);
    reject("Image load error");
    };
    });
    };
    })();

        // W pliku JavaScript/script.js
    window.loadAndDrawTexture = async (canvasElement, imageUrl, dotNetHelper) => {
        const ctx = canvasElement.getContext('2d');

        // Tworzenie wzorca bezpośrednio na docelowym kontekście
        const img = new Image();
        img.crossOrigin = "anonymous";
        img.src = imageUrl;

        await new Promise((resolve, reject) => {
            img.onload = () => resolve();
            img.onerror = reject;
        });

        const pattern = ctx.createPattern(img, 'repeat');
        ctx.fillStyle = pattern;

        // Zapis wzorca w kontekście
        ctx.canvas.dataset.pattern = "wood-pattern";

        // Powiadomienie C# o załadowaniu tekstury
        await dotNetHelper.invokeMethodAsync('OnTextureLoaded');
    };
</script>

<style>

    /* Globalne ustawienia */
    html, body {
    height: 100%;
    margin: 0;
    padding: 0;
    overflow: hidden;
    font-family: Arial, sans-serif;
    background-color: #f8f9fa;
    }

    /* Kontener główny */
    .window-model-container {
    display: flex;
    height: 70vh;
    background-color: #fff;
    padding: 10px;
    box-sizing: border-box;
    }

    /* Panel boczny z modelami */
    .wing-model-container {
    flex: 0 0 250px; /* Zmniejszenie szerokości */
    height: 100%;
    overflow-y: auto;
    border-right: 2px solid #ddd;
    padding: 10px;
    background: #f8f9fa;
    }

    /* Tabela modeli */
    .wing-model-container table {
    font-size: 13px;
    width: 100%;
    border-collapse: collapse;
    }

    .wing-model-container th, .wing-model-container td {
    padding: 6px;
    text-align: center;
    }

    .wing-model-container th {
    background-color: #007bff;
    color: white;
    }

    .wing-model-container tr:hover {
    background-color: rgba(0, 123, 255, 0.1);
    }

    /* Miniatury modeli */
    .wing-model-container img {
    width: 45px;
    height: 45px;
    object-fit: contain;
    cursor: grab;
    transition: transform 0.2s ease-in-out;
    }

    .wing-model-container img:hover {
    transform: scale(1.1);
    }

    /* Główne okno wyświetlania */
    .display-window {
    flex-grow: 1;
    height: 100%;
    border: 2px solid #ddd;
    background-color: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 10px;
    box-sizing: border-box;
    position: relative;
    }

    /* Kontener canvas - dopasowany do okna */
    .canvas-container {
    width: 100%;
    height: 100%;
    max-width: 100%;
    max-height: 100%;
    border: 2px solid #ddd;
    background-color: #fff;
    border-radius: 5px;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: auto; /* Ukrywa przewijanie */
    position: relative;
    }

    /* Canvas - dynamiczne skalowanie */
    canvas {
    display: block;
    max-width: 100%;
    max-height: 100%;
    background-color: transparent;
    }

    /* Paski przewijania */
    .wing-model-container::-webkit-scrollbar {
    width: 8px;
    }

    .wing-model-container::-webkit-scrollbar-thumb {
    background: #007bff;
    border-radius: 5px;
    }

    .wing-model-container::-webkit-scrollbar-thumb:hover {
    background: #0056b3;
    }

    /* 🔹 Toolbar z przyciskami */
    .toolbar {
    display: flex;
    flex-wrap: wrap;
    gap: 5px;
    justify-content: center;
    padding: 10px;
    background: #fff;
    }

    /* Styl dla przycisków */
    .toolbar .btn {
    flex: 1;
    min-width: 90px;
    font-size: 13px;
    padding: 6px 8px;
    transition: all 0.2s ease-in-out;
    }

    .toolbar .btn:hover {
    transform: scale(1.05);
    }

</style>

<!-- Nagłówek -->
<div class="d-flex justify-content-between align-items-center mt-2 mb-2">
    <h3 class="mb-0">Modele Okienne</h3>
    <button class="btn btn-primary" @onclick="GoBack">
        <i class="fas fa-arrow-left"></i> Wróć
    </button>
</div>
<!-- 🔹 Wybór systemu -->
<Tooltip Placement="@Placement.TopRight" Title="Otwórz konfigurator nowego systemu lub wybierz go z listy">
    <div class="d-flex">
        @if (Systemy != null && Systemy.Any())
        {
            <select class="form-select me-2" @onchange="@(async (args) => await OnSystemSelected(args))">
                <option value="" disabled selected>-- Wybierz system --</option>
                @foreach (var system in Systemy)
                {
                    <option value="@system.RowId">@system.Nazwa_Systemu</option>
                }
            </select>
        }
    </div>
</Tooltip>

<Collapse Animation>
    <Panel Header="Ustawienia" Key="1">

        <!-- Wprowadzenie wartości -->
        <div class="form-group mt-3">
            <label>Szerokość:</label>
            <input type="number" class="form-control" @bind="Szerokosc" />

            <label>Wysokość:</label>
            <input type="number" class="form-control" @bind="Wysokosc" />

            <label>Kolor:</label>
            <input type="color" class="form-control" @bind="Kolor" />

        </div>
    </Panel>
</Collapse>

<!-- Kontener na modele i canvas -->
<div class="window-model-container">
    <!-- Panel boczny z modelami -->
    <div class="wing-model-container">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Typ</th>
                    <th>Wymiary</th>
                    <th>Miniaturka</th>
                </tr>
            </thead>
            <tbody>
                @if (ListaModeli != null)
                {
                    @foreach (var model in ListaModeli)
                    {
                        <tr>
                            <td>@model.Typ</td>
                            <td>@model.KonstrMinSzer x @model.KonstrMinWys → @model.KonstrMaxSzer x @model.KonstrMaxWys</td>
                            <td>
                                @if (model.Rysunek != null && model.Rysunek.Length > 0)
                                {
                                    <img id="@($"wing-{model.Typ}")"
                                    src="data:image/png;base64,@Convert.ToBase64String(model.Rysunek)"
                                     />
                                }
                                else
                                {
                                    <span class="text-muted">Brak</span>
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <!-- Główne okno wyświetlania -->
    <div class="display-window">

        <!-- Główne okno wyświetlania -->
        <div class="display-window">
            @if (hasCanvasError)
            {
                <p style="color: red;">❌ Błąd: Nie udało się załadować canvasu! Spróbuj odświeżyć stronę.</p>
            }
            else
            {
                <BECanvas @ref="CanvasRef" Width="800" Height="600"></BECanvas>
            }
        </div>

        <button @onclick="DrawStructure">Generuj rysunek</button>
        @if (!isTextureLoaded)
        {
            <div class="texture-loading-overlay">
                <div class="spinner"></div>
                <p>Ładowanie tekstur...</p>
            </div>
        }
    </div>
</div>



@code {
    // Klasa WingModel definiująca dane dla skrzydła
    private List<KonfSystem>? KonfiguracjeSystemu;

    private List<SystemyOkienne>? Systemy;

    private string WybranyKsztalt = "prostokat";
    private int X = 0, Y = 0, Szerokosc = 1000, Wysokosc = 1000;
    private string Kolor = "#ff0000"; // Domyślny czerwony

    private string SelectedSystemId = "";
    private List<KonfModele>? ListaModeli;

    private BECanvasComponent? CanvasRef;
    private Canvas2DContext? _context;

    protected override async Task OnInitializedAsync()
    {
        await Laduj_Uprawnienia();

        Systemy = await Http.GetFromJsonAsync<List<SystemyOkienne>>("api/systemy-okienne");

    }


    private bool hasCanvasError = false; // Nowa flaga do śledzenia błędów

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                if (CanvasRef == null)
                {
                    hasCanvasError = true;
                    StateHasChanged(); // Wymuś aktualizację UI
                    return;
                }

                _context = await CanvasRef.CreateCanvas2DAsync();

                // Dodatkowa inicjalizacja jeśli potrzebna
            }
            catch (Exception ex)
            {
                hasCanvasError = true;
                StateHasChanged(); // Pokazuje komunikat błędu
                Console.WriteLine($"Błąd inicjalizacji canvas: {ex.Message}");
            }
        }
    }

    private async Task OnSystemSelected(ChangeEventArgs e)
    {
        SelectedSystemId = e.Value.ToString();

        Console.WriteLine($"Wybrano system o ID: {SelectedSystemId}");

        if (string.IsNullOrEmpty(SelectedSystemId))
        {

            if (KonfiguracjeSystemu != null) KonfiguracjeSystemu.Clear();
            return;
        }

        KonfiguracjeSystemu = await Http.GetFromJsonAsync<List<KonfSystem>>($"api/konfsystem/FIN_DROWID/{SelectedSystemId}");

        ListaModeli = await Http.GetFromJsonAsync<List<KonfModele>>($"api/konfmodele/FIND_ONLY_TRUE/{SelectedSystemId}");

    }



    private bool isTextureLoaded = false;

    private async Task DrawStructure()
    {
        if (CanvasRef == null) return;

        _context ??= await CanvasRef.CreateCanvas2DAsync();

        if (!isTextureLoaded)
        {
            var baseUrl = Navigation.BaseUri;
            var imageUrl = $"{baseUrl}api/images/wood.jpg";

            await JS.InvokeVoidAsync("loadAndDrawTexture",
                CanvasRef.CanvasReference,
                imageUrl,
                DotNetObjectReference.Create(this)
            );
            return;
        }

        await RenderFrame();
    }

    [JSInvokable]
    public async Task OnTextureLoaded()
    {
        isTextureLoaded = true;
        await RenderFrame();
        StateHasChanged();
    }

    private async Task RenderFrame()
    {
        if (_context == null) return;

        await _context.ClearRectAsync(0, 0, 800, 600);

        // Rysowanie ramy
        await _context.SetFillStyleAsync("wood-pattern");
        await _context.FillRectAsync(50, 50, 20, 500);
        await _context.FillRectAsync(730, 50, 20, 500);
        await _context.FillRectAsync(50, 50, 700, 20);
        await _context.FillRectAsync(50, 530, 700, 20);

        // Rysowanie szyby
        await _context.SetFillStyleAsync("#ADD8E6");
        await _context.FillRectAsync(70, 70, 660, 460);
    }


    private string RysunekToBase64(byte[]? imageData)
    {
        if (imageData == null || imageData.Length == 0)
        {
            return "data:image/png;base64,"; // Zapobiega błędom
        }

        return $"data:image/png;base64,{Convert.ToBase64String(imageData)}";
    }

    private async Task GoBack()
    {
        await JS.InvokeVoidAsync("history.back");
    }

    private bool boolOdczyt = false;
    private bool boolZmiana = false;
    private bool boolUsuniecia = false;
    private bool boolAdmin = false;
    private bool boolNowy = false;
    private string RowIdPracownika = "";
    private string? user;
    private bool isNotDisabled => !boolZmiana;
    private List<UprawnieniaPracownikaViewModel>? uprawnienia;

    private async Task Laduj_Uprawnienia()
    {
        user = await LocalStorage.GetStringAsync("user");

        if (string.IsNullOrEmpty(user))
        {
            //NavigationManager.NavigateTo($"", true);
            return;
        }

        string nazwaTabeli = "SystemyOkienne";

        Console.WriteLine($"api/ZwrocSatus/{user}/{nazwaTabeli}");

        try
        {
            uprawnienia = await Http.GetFromJsonAsync<List<UprawnieniaPracownikaViewModel>>($"/api/ZwrocSatus/{user}/{nazwaTabeli}");
        }
        catch (System.Net.Http.HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            Console.WriteLine("Brak danych!!!");
            await _message.Error("Brak danych - status użytkownika");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await _message.Error(ex.Message);
        }

        if (uprawnienia != null)
        {
            if (uprawnienia.Count > 0)
            {
                var znalezioneElementy = uprawnienia.Where(uprawnienie => uprawnienie.TableName == nazwaTabeli);
                Console.WriteLine("Znaleziono uprawnienia dla użytkownika: " + user + " w tabeli: " + nazwaTabeli + " ilość rekordów: " + znalezioneElementy.Count());
                if (znalezioneElementy.Any())
                {
                    var szuk = znalezioneElementy.FirstOrDefault(x => x.TableName == nazwaTabeli);
                    if (szuk != null)
                    {
                        boolOdczyt = szuk.Odczyt;
                        boolZmiana = szuk.Zmiana;
                        boolUsuniecia = szuk.Usuniecie;
                        boolAdmin = szuk.Administrator;
                        boolNowy = szuk.Zapis;
                        RowIdPracownika = szuk.RowId ?? "??????";
                    }
                }
            }
        }
    }

}