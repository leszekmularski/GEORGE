@page "/Modele-okienne"
@using GEORGE.Shared.Models
@using GEORGE.Shared.Class
@inject IJSRuntime JS
@inject Utilities.ILocalStorage LocalStorage
@inject HttpClient Http
@using System.Net
@inject IMessageService _message
@inject INotificationService _notice
@inject NavigationManager Navigation
@using System.IO;
@using SixLabors.ImageSharp;
@using SixLabors.ImageSharp.Processing;
@using SixLabors.ImageSharp.Formats.Png;

@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D

<script>
    (() => {
        // Inicjalizacja globalnych zmiennych
        window.currentDraggedImage = null;
        window.currentDraggedType = null;
        window.isDragging = false;
        window.blazorCanvas = null;

        // Ustawienie referencji do canvasu
        window.setCanvasRef = (canvasRef) => {
            if (!canvasRef) {
                console.error("❌ Blazor przekazał null do setCanvasRef!");
                return;
            }
            window.blazorCanvas = canvasRef;
            console.log("✅ Canvas ustawiony!", canvasRef);
        };

        // Ustawienie referencji do .NET
        window.setDotNetHelper = (dotNetHelper) => {
            window.dotNetHelper = dotNetHelper;
            console.log("✅ DotNetHelper ustawiony!");
        };

        // Funkcja rozpoczynająca przeciąganie
        window.startDrag = (modelType, event) => {
            if (event.button !== 0) return; // Obsługa tylko lewego przycisku myszy

            event.preventDefault();
            window.isDragging = true;
            window.currentDraggedType = modelType;

            // Pobranie obrazka do ustawienia jako kursor
            const img = document.getElementById(`wing-${modelType}`);
            if (!img) {
                console.error(`❌ Nie znaleziono obrazka dla modelu: ${modelType}`);
                return;
            }

            // Tworzymy nowy obrazek, który będzie podążał za kursorem
            const cursorImg = new Image();
            cursorImg.src = img.src;
            cursorImg.style.position = "absolute";
            cursorImg.style.pointerEvents = "none";
            cursorImg.style.width = "50px";
            cursorImg.style.height = "50px";
            cursorImg.style.opacity = "0.8";
            cursorImg.id = "dragCursorImage";

            document.body.appendChild(cursorImg);
            window.currentDraggedImage = cursorImg;

            // Aktualizacja pozycji obrazka pod kursorem
            window.updateCursorImagePosition(event);
        };

        // Aktualizacja pozycji obrazka kursora
        window.updateCursorImagePosition = (event) => {
            if (!window.isDragging || !window.currentDraggedImage) return;
            window.currentDraggedImage.style.left = `${event.pageX - 25}px`;
            window.currentDraggedImage.style.top = `${event.pageY - 25}px`;
        };

        // Funkcja kończąca przeciąganie
        window.stopDrag = async (event) => {
            if (!window.isDragging) return;

            window.isDragging = false;

            if (window.currentDraggedImage) {
                document.body.removeChild(window.currentDraggedImage);
                window.currentDraggedImage = null;
            }

            if (!window.blazorCanvas) {
                console.error("❌ Brak referencji do canvasu!");
                return;
            }

            const rect = window.blazorCanvas.getBoundingClientRect();
            const x = event.clientX - rect.left;
            const y = event.clientY - rect.top;

            console.log(`🛑 Upuszczono model: ${window.currentDraggedType} na (${x}, ${y})`);

            // Wywołanie metody .NET
            if (window.dotNetHelper) {
                await window.dotNetHelper.invokeMethodAsync('OnDragEnd', window.currentDraggedType, x, y);
            }

            window.currentDraggedType = null;
        };

        // Obsługa aktualizacji kursora
        document.addEventListener("mousemove", window.updateCursorImagePosition);

        // Obsługa upuszczenia obrazka
        document.addEventListener("mouseup", window.stopDrag);
    })();

    window.SetCustomCursor = (modelType, base64Image) => {
        console.log(`🔵 SetCustomCursor dla: ${modelType}`);

        // Konwersja Base64 na Blob
        const byteCharacters = atob(base64Image);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], { type: "image/png" });
        const url = URL.createObjectURL(blob);

        // Tworzymy kursor
        const cursorUrl = `url("${url}") 25 25, auto !important`;
        console.log(`🔍 Ustawiam kursor: ${cursorUrl}`);

        // Próbujemy ustawić na całym `body`
        document.body.style.setProperty("cursor", cursorUrl, "important");

        // Próbujemy wymusić kursor na `.canvas-container`
        const canvasContainer = document.querySelector(".canvas-container");
        if (canvasContainer) {
            canvasContainer.style.setProperty("cursor", cursorUrl, "important");
            console.log(`🖱 Kursor ustawiony na .canvas-container`);
        }

        // Próbujemy wymusić kursor na `canvas`
        const canvas = document.querySelector("canvas");
        if (canvas) {
            canvas.style.setProperty("cursor", cursorUrl, "important");
            console.log(`🖱 Kursor ustawiony na <canvas>`);
        }
    };


    //     window.ResetCursor = () => {
    //     console.log("🔄 Resetowanie kursora");
    //     document.querySelector(".canvas-container").style.cursor = "default";
    //     document.querySelector("canvas").style.cursor = "default";
    // };


</script>


<style>
    /* Globalne ustawienia */
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        overflow: hidden;
        font-family: Arial, sans-serif;
        background-color: #f8f9fa;
    }

    /* Kontener główny */
    .window-model-container {
        display: flex;
        height: 70vh;
        background-color: #fff;
        padding: 10px;
        box-sizing: border-box;
    }

    /* Panel boczny z modelami */
    .wing-model-container {
        flex: 0 0 250px; /* Szerokość panelu bocznego */
        height: 100%;
        overflow-y: auto;
        border-right: 2px solid #ddd;
        padding: 10px;
        background: #f8f9fa;
    }

        /* Tabela modeli */
        .wing-model-container table {
            font-size: 13px;
            width: 100%;
            border-collapse: collapse;
        }

        .wing-model-container th, .wing-model-container td {
            padding: 6px;
            text-align: center;
        }

        .wing-model-container th {
            background-color: #007bff;
            color: white;
        }

        .wing-model-container tr:hover {
            background-color: rgba(0, 123, 255, 0.1);
        }

        /* Miniatury modeli */
        .wing-model-container img {
            width: 45px;
            height: 45px;
            object-fit: contain;
            cursor: -webkit-grab; /* Obsługa w Safari */
            cursor: grab;
            transition: transform 0.2s ease-in-out;
        }

            .wing-model-container img:hover {
                transform: scale(1.1);
            }

    /* Główne okno wyświetlania */
    .display-window {
        flex-grow: 1;
        height: 100%;
        min-height: 400px; /* Zapewnienie minimalnej wysokości */
        border: 2px solid #ddd;
        background-color: #fff;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 10px;
        box-sizing: border-box;
        position: relative;
        overflow: hidden;
        cursor: crosshair;
    }

    /* Kontener canvas */
    .canvas-container {
        width: 100%;
        height: 100%;
        position: relative;
        touch-action: none; /* Zapobiega przewijaniu na urządzeniach dotykowych */
        cursor: none !important;
    }

    /* Canvas - dynamiczne dopasowanie */
    canvas {
        display: block;
        width: 100%;
        height: 100%;
        background-color: transparent;
        cursor: none !important;
    }

    /* Paski przewijania */
    .wing-model-container::-webkit-scrollbar {
        width: 8px;
    }

    .wing-model-container::-webkit-scrollbar-thumb {
        background: #007bff;
        border-radius: 5px;
    }

        .wing-model-container::-webkit-scrollbar-thumb:hover {
            background: #0056b3;
        }

    /* 🔹 Toolbar z przyciskami */
    .toolbar {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        justify-content: center;
        padding: 10px;
        background: #fff;
    }

        /* Styl dla przycisków */
        .toolbar .btn {
            flex: 1;
            min-width: 90px;
            font-size: 13px;
            padding: 6px 8px;
            transition: all 0.2s ease-in-out;
        }

            .toolbar .btn:hover {
                transform: scale(1.05);
            }

</style>

<!-- Nagłówek -->
<div class="d-flex justify-content-between align-items-center mt-2 mb-2">
    <h3 class="mb-0">Modele Okienne</h3>
    <button class="btn btn-primary" @onclick="GoBack">
        <i class="fas fa-arrow-left"></i> Wróć
    </button>
</div>
<!-- 🔹 Wybór systemu -->
<Tooltip Placement="@Placement.TopRight" Title="Otwórz konfigurator nowego systemu lub wybierz go z listy">
    <div class="d-flex">
        @if (Systemy != null && Systemy.Any())
        {
            <select class="form-select me-2" @onchange="@(async (args) => await OnSystemSelected(args))">
                <option value="" disabled selected>-- Wybierz system --</option>
                @foreach (var system in Systemy)
                {
                    <option value="@system.RowId">@system.Nazwa_Systemu</option>
                }
            </select>
        }
    </div>
</Tooltip>

<Collapse Animation>
    <Panel Header="Ustawienia" Key="1">

        <!-- Wprowadzenie wartości -->
        <div class="form-group mt-3">
            <label>Szerokość:</label>
            <input type="number" class="form-control" @bind="Szerokosc" />

            <label>Wysokość:</label>
            <input type="number" class="form-control" @bind="Wysokosc" />

            <label>Kolor:</label>
            <input type="color" class="form-control" @bind="Kolor" />

        </div>
        <Button OnClick="DrawStructure">TEST</Button>
    </Panel>
</Collapse>

<!-- Kontener na modele i canvas -->
<div class="window-model-container">
    <!-- Panel boczny z modelami -->
    <div class="wing-model-container">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Typ</th>
                    <th>Wymiary</th>
                    <th>Miniaturka</th>
                </tr>
            </thead>
            <tbody>
                @if (ListaModeli != null)
                {
                    @foreach (var model in ListaModeli)
                    {
                        <tr>
                            <td>@model.Typ</td>
                            <td>@model.KonstrMinSzer x @model.KonstrMinWys → @model.KonstrMaxSzer x @model.KonstrMaxWys</td>
                            <td>
                                @if (model.Rysunek != null && model.Rysunek.Length > 0)
                                {
                                    <img id="@($"wing-{model.Typ}")"
                                         src="data:image/png;base64,@Convert.ToBase64String(ResizeImage(model.Rysunek, 32, 32))"
                                         @onmouseover='@(e => JS.InvokeVoidAsync("SetCustomCursor", Convert.ToBase64String(ResizeImage(model.Rysunek, 32, 32))))'
                                         @onmouseout='@(e => JS.InvokeVoidAsync("ResetCursor"))'
                                         draggable="false"
                                         style="cursor: grab; width: auto; height: auto; max-width: 50px; max-height: 50px;" />

                                }
                                else
                                {
                                    <span class="text-muted">Brak</span>
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <!-- Główne okno wyświetlania -->
    <div class="display-window" @onmouseup="OnMouseUp">
        @if (hasCanvasError)
        {
            <p style="color: red;">❌ Błąd: Nie udało się załadować canvasu!</p>
        }
        else
        {
            <div class="canvas-container">
                <BECanvas @ref="CanvasRef" Width="800" Height="600"></BECanvas>
            </div>

        }
    </div>
</div>
@code {
    // Klasa WingModel definiująca dane dla skrzydła
    private List<KonfSystem>? KonfiguracjeSystemu;

    private List<SystemyOkienne>? Systemy;

    private string WybranyKsztalt = "prostokat";
    private int X = 0, Y = 0, Szerokosc = 1000, Wysokosc = 1000;
    private string Kolor = "#ff0000"; // Domyślny czerwony

    private string SelectedSystemId = "";
    private List<KonfModele>? ListaModeli;

    private BECanvasComponent? CanvasRef; // Referencja do komponentu BECanvas
    private Canvas2DContext? _context;
    private DotNetObjectReference<Modele_okienne>? _dotNetHelper;

    // Dodaj nowe pola w sekcji @code
    private string? SelectedModelType { get; set; }
    private int DropX { get; set; }
    private int DropY { get; set; }
    private ElementReference canvasElement;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Laduj_Uprawnienia();

            Systemy = await Http.GetFromJsonAsync<List<SystemyOkienne>>("api/systemy-okienne");

            _dotNetHelper = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setDotNetHelper", _dotNetHelper);

            // Sprawdź, czy skrypt JS został poprawnie załadowany
            var isScriptLoaded = await JS.InvokeAsync<bool>("eval", "typeof setCanvasRef === 'function'");
            if (!isScriptLoaded)
            {
                throw new Exception("⚠️ Skrypt dragAndDrop.js nie został poprawnie załadowany!");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"🔥 Błąd podczas inicjalizacji: {ex.Message}");
        }
    }


    private bool hasCanvasError = false; // Nowa flaga do śledzenia błędów

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender && CanvasRef != null)
            {
                Console.WriteLine("🖌️ Inicjalizacja canvasu...");

                // Sprawdzenie, czy funkcja JS istnieje
                var isFunctionDefined = await JS.InvokeAsync<bool>("eval", "typeof setCanvasRef === 'function'");

                if (!isFunctionDefined)
                    throw new Exception("⚠️ Funkcja setCanvasRef nie jest zdefiniowana!");

                // Przekazanie referencji do canvasu
                await JS.InvokeVoidAsync("setCanvasRef", CanvasRef.CanvasReference);
                Console.WriteLine("✅ Canvas ustawiony!");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"🔥 Krytyczny błąd: {ex.Message}");
            hasCanvasError = true;
            StateHasChanged();
        }
    }


    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender && CanvasRef != null)
    //     {
    //         try
    //         {
    //             // Sprawdź czy funkcja istnieje przed wywołaniem
    //             var isFunctionDefined = await JS.InvokeAsync<bool>("eval", "typeof setCanvasRef === 'function'");

    //             if (!isFunctionDefined)
    //                 throw new Exception("Funkcja setCanvasRef nie jest zdefiniowana!");
    //             //await Task.Delay(500);

    //             await JS.InvokeVoidAsync("setCanvasRef", CanvasRef.CanvasReference);
    //         }
    //         catch (Exception ex)
    //         {
    //             Console.WriteLine($"🔥 Krytyczny błąd: {ex.Message}");
    //             hasCanvasError = true;
    //             StateHasChanged();
    //         }
    //     }
    // }

    private async Task OnMouseUp(MouseEventArgs e)
    {
        if (CanvasRef == null)
        {
            Console.WriteLine("⚠️ Brak referencji do canvasu!");
            return;
        }

        Console.WriteLine("🟢 Wywołano OnMouseUp");

        if (_dotNetHelper == null) return;

        // Przekaż współrzędne myszy do JavaScript
        await JS.InvokeVoidAsync(
            "stopDrag",
            _dotNetHelper
        );
    }
    // private async Task OnMouseUp(MouseEventArgs e)
    // {
    //     Console.WriteLine($"🖱️ Kliknięto na pozycji ({e.ClientX}, {e.ClientY})");
    //     string modelType = await JS.InvokeAsync<string>("getDraggedModelType"); // Pobieramy typ modelu z JS
    //     await RenderFrame(e.ClientX, e.ClientY, modelType);
    // }


    [JSInvokable]
    public async Task OnModelDropped(string modelType, int x, int y)
    {
        SelectedModelType = modelType;
        DropX = x;
        DropY = y;
        await Task.CompletedTask; 
        // Console.WriteLine($"OnModelDropped? : DrawStructure");
        // await DrawStructure();
    }

    private async Task OnSystemSelected(ChangeEventArgs e)
    {
        SelectedSystemId = e.Value.ToString();

        Console.WriteLine($"Wybrano system o ID: {SelectedSystemId}");

        if (string.IsNullOrEmpty(SelectedSystemId))
        {

            if (KonfiguracjeSystemu != null) KonfiguracjeSystemu.Clear();
            return;
        }

        KonfiguracjeSystemu = await Http.GetFromJsonAsync<List<KonfSystem>>($"api/konfsystem/FIN_DROWID/{SelectedSystemId}");

        ListaModeli = await Http.GetFromJsonAsync<List<KonfModele>>($"api/konfmodele/FIND_ONLY_TRUE/{SelectedSystemId}");

    }

    private bool isTextureLoaded = false;

    private async Task DrawStructure()
    {
        try
        {
            if (CanvasRef == null)
            {
                Console.WriteLine("⚠️ Brak referencji do canvasu!");
                return;
            }

            _context ??= await CanvasRef.CreateCanvas2DAsync();

            if (!isTextureLoaded)
            {
                var baseUrl = Navigation.BaseUri;
                var imageUrl = $"{baseUrl}api/images/wood.jpg";

                await JS.InvokeVoidAsync("loadAndDrawTexture",
                    CanvasRef.CanvasReference,
                    imageUrl,
                    _dotNetHelper
                );

                // StateHasChanged();
                return;
            }

            // Reszta kodu do rysowania...
        }
        catch (Exception ex)
        {
            Console.WriteLine($"🔥 Błąd podczas rysowania: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task OnDrop(string modelType, double x, double y)
    {
        if (CanvasRef == null)
        {
            Console.WriteLine("⚠️ Brak referencji do canvasu!");
            return;
        }

        Console.WriteLine($"🎯 OnDrop Upuszczono model: {modelType} na pozycji ({x}, {y})");
        //await DrawStructure();
        //StateHasChanged();
    }

    private bool _isDraggingOver = false; // Flaga do śledzenia stanu przeciągania

    private void HandleDragOver(DragEventArgs e)
    {
        if (CanvasRef == null)
        {
            Console.WriteLine("⚠️ Brak referencji do canvasu!");
            return;
        }

        if (!_isDraggingOver)
        {
            _isDraggingOver = true;
            Console.WriteLine("🖱️ Przeciąganie nad canvasem...");

            // Zezwól na upuszczenie (bez generowania rysunku)
            e.DataTransfer.DropEffect = "move";
        }
    }

    private void HandleDragLeave(DragEventArgs e)
    {
        if (CanvasRef == null)
        {
            Console.WriteLine("⚠️ Brak referencji do canvasu!");
            return;
        }

        if (_isDraggingOver)
        {
            _isDraggingOver = false;
            Console.WriteLine("🖱️ Opuszczono obszar canvasu...");

            // Przywróć domyślny kursor
            JS.InvokeVoidAsync("handleDragLeave", ".canvas-container");
        }
    }

    private async Task HandleDrop(DragEventArgs e)
    {
        try
        {
            if (CanvasRef == null)
            {
                Console.WriteLine("⚠️ Brak referencji do canvasu!");
                return;
            }

            // Pobierz dane z DataTransfer za pomocą JavaScript
            SelectedModelType = await JS.InvokeAsync<string>("getDragData", e);

            if (string.IsNullOrEmpty(SelectedModelType))
            {
                Console.WriteLine("⚠️ Brak danych do przeciągania nie wybrano modelu!");
                return;
            }

            // Pobierz współrzędne
            var container = await JS.InvokeAsync<DOMRect>("getBoundingClientRect", ".canvas-container");
            DropX = (int)e.ClientX - (int)container.Left;
            DropY = (int)e.ClientY - (int)container.Top;

            Console.WriteLine($"🎯 --> Upuszczono model: {SelectedModelType} na pozycji ({DropX}, {DropY})");

            // Dodaj obiekt do wirtualnej warstwy
            await JS.InvokeVoidAsync("dodajDoWirtualnejWarstwy", DropX, DropY, 100, 100, "data:image/png;base64,...");

            // Odtwórz canvas
            await JS.InvokeVoidAsync("RysujOkno");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"🔥 Błąd podczas upuszczania: {ex.Message}");
        }
    }

    private async Task EndDrag(string modelType, MouseEventArgs e)
    {
        try
        {
            Console.WriteLine($"🖱️ Zakończono przeciąganie modelu: {modelType}");

            if (CanvasRef == null)
            {
                Console.WriteLine("⚠️ Brak referencji do canvasu!");
                return;
            }

            // Sprawdź, czy współrzędne myszy są dostępne
            if (e == null || e.ClientX == 0 || e.ClientY == 0)
            {
                Console.WriteLine("⚠️ Nieprawidłowe współrzędne myszy!");
                return;
            }

            // Pobierz pozycję canvasu względem okna
            var canvasPos = await JS.InvokeAsync<DOMRect>("getCanvasPosition", CanvasRef.CanvasReference);

            // Sprawdź, czy pozycja canvasu jest dostępna
            if (canvasPos == null || canvasPos.Left == 0 || canvasPos.Top == 0)
            {
                Console.WriteLine("⚠️ Nie udało się pobrać pozycji canvasu!");
                return;
            }

            // Oblicz współrzędne względem canvasu
            // var x = e.ClientX - canvasPos.Left;
            //var y = e.ClientY - canvasPos.Top;

            // Console.WriteLine($"🎯 EndDrag Pozycja względem canvasu: ({x}, {y})");

            //await DrawStructure();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"🔥 Błąd podczas kończenia przeciągania: {ex.Message}");
        }
    }

    private async Task StartDrag(string modelType, MouseEventArgs e)
    {
        try
        {
            if (CanvasRef == null || _dotNetHelper == null)
            {
                Console.WriteLine("⚠️ Brak referencji do canvasu lub DotNetHelper!");
                return;
            }

            SelectedModelType = modelType;

            var model = ListaModeli.FirstOrDefault(m => m.Typ == modelType);

            if (model?.Rysunek == null) return;

            Console.WriteLine($"Znaleziono model: {model.Typ}");

            await JS.InvokeVoidAsync(
                "startDrag",
                modelType,
                e.ClientX,
                e.ClientY,
                $"data:image/png;base64,{Convert.ToBase64String(model.Rysunek)}",
                _dotNetHelper
            );


        }
        catch (Exception ex)
        {
            Console.WriteLine($"🔥 Błąd podczas przeciągania: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task OnDragEnd(string modelType, double x, double y)
    {
        Console.WriteLine($"Upuszczono model: {modelType} na ({x}, {y})");

        // Tutaj możesz dodać kod np. do rysowania modelu w canvasie
    }

    // [JSInvokable]
    // public async Task OnDragEnd(double x, double y)
    // {
    //     try
    //     {
    //         if (CanvasRef == null)
    //         {
    //             Console.WriteLine("⚠️ Brak referencji do canvasu!");
    //             return;
    //         }

    //         Console.WriteLine($"🎯 OK - OnDragEnd Upuszczono na pozycji: ({x}, {y})");

    //         DropX = (int)x;
    //         DropY = (int)y;

    //        // SelectedModelType = modelType;

    //         await DrawStructure();

    //         await RenderFrame(DropX, DropY, SelectedModelType);

    //         StateHasChanged();
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine($"🔥 Błąd podczas kończenia przeciągania: {ex.Message}");
    //     }
    // }

    // [JSInvokable]
    // public async Task OnDragUpdate(DragPayload payload)
    // {
    //     Console.WriteLine("CZY TO POTRZEBNE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"); 

    //     if (CanvasRef == null)
    //     {
    //         Console.WriteLine("⚠️ Brak referencji do canvasu!");
    //         return;
    //     }

    //     Console.WriteLine($"Przeciąganie: {payload.ModelName} " +
    //                     $"X: {payload.X}px, Y: {payload.Y}px " +
    //                     $"(Skala: {payload.Scale}x)");

    //     // Tutaj możesz aktualizować stan komponentu
    //     StateHasChanged();
    // }

    [JSInvokable]
    public async Task OnDragError(string message)
    {
        await _message.Error(message);
        StateHasChanged();
    }

    [JSInvokable]
    public void StartDragOver()
    {
        _isDraggingOver = true;
        Console.WriteLine("🖱️ Rozpoczęto przeciąganie nad canvasem...");
    }

    [JSInvokable]
    public void EndDragOver()
    {
        _isDraggingOver = false;
        Console.WriteLine("🖱️ Zakończono przeciąganie nad canvasem...");
    }

    public class DragPayload
    {
        public string? ModelName { get; set; }
        public int X { get; set; }
        public int Y { get; set; }
        public string? Scale { get; set; }
    }

    public class DOMRect
    {
        public double Left { get; set; }
        public double Top { get; set; }
        public double Right { get; set; }
        public double Bottom { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
        public double X { get; set; }
        public double Y { get; set; }
    }

    public void Dispose()
    {
        try
        {
            _dotNetHelper?.Dispose();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"🔥 Błąd podczas zwalniania zasobów: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task OnTextureLoaded()
    {
        try
        {
            isTextureLoaded = true;
            Console.WriteLine("✅ Tekstura załadowana!");

            // if (string.IsNullOrEmpty(SelectedModelType))
            // {
            //     //await RenderFrame(0, 0, "Rama");
            //     Console.WriteLine($"🔥 Błąd SelectedModelType ma wartość NULL");
            // }
            // else
            // {
            //     await RenderFrame(DropX, DropY, SelectedModelType);
            // }

            // StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"🔥 Błąd podczas ładowania tekstury: {ex.Message}");
        }
    }

    private async Task RenderFrame(double x, double y, string modelType)
    {
        try
        {
            if (_context == null)
            {
                Console.WriteLine("⚠️ Brak kontekstu canvasu!");
                return;
            }

            if (string.IsNullOrEmpty(modelType))
            {
                Console.WriteLine("⚠️ Nie wybrano modelu!");
                return;
            }

            Console.WriteLine($"🎯 Renderowanie modelu: {modelType} na ({x}, {y})");

            await _context.ClearRectAsync(0, 0, 800, 600);

            // Rysowanie ramy
            await _context.SetFillStyleAsync("wood-pattern");
            await _context.FillRectAsync(50, 50, 20, 500);
            await _context.FillRectAsync(730, 50, 20, 500);
            await _context.FillRectAsync(50, 50, 700, 20);
            await _context.FillRectAsync(50, 530, 700, 20);

            // Rysowanie szyby
            await _context.SetFillStyleAsync("#ADD8E6");
            await _context.FillRectAsync(70, 70, 660, 460);

            await _context.StrokeTextAsync(modelType, x, x);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"🔥 Błąd podczas renderowania: {ex.Message}");
        }
    }


    private string RysunekToBase64(byte[]? imageData)
    {
        if (imageData == null || imageData.Length == 0)
        {
            return "data:image/png;base64,"; // Zapobiega błędom
        }

        return $"data:image/png;base64,{Convert.ToBase64String(imageData)}";
    }

    private byte[] ResizeImage(byte[] imageData, int width, int height)
    {
        using var inputStream = new MemoryStream(imageData);
        using var image = SixLabors.ImageSharp.Image.Load(inputStream);
        image.Mutate(x => x.Resize(width, height));

        using var outputStream = new MemoryStream();
        image.SaveAsPng(outputStream);
        return outputStream.ToArray();
    }


    private async Task GoBack()
    {
        await JS.InvokeVoidAsync("history.back");
    }

    private bool boolOdczyt = false;
    private bool boolZmiana = false;
    private bool boolUsuniecia = false;
    private bool boolAdmin = false;
    private bool boolNowy = false;
    private string RowIdPracownika = "";
    private string? user;
    private bool isNotDisabled => !boolZmiana;
    private List<UprawnieniaPracownikaViewModel>? uprawnienia;

    private async Task Laduj_Uprawnienia()
    {
        user = await LocalStorage.GetStringAsync("user");

        if (string.IsNullOrEmpty(user))
        {
            //NavigationManager.NavigateTo($"", true);
            return;
        }

        string nazwaTabeli = "SystemyOkienne";

        Console.WriteLine($"api/ZwrocSatus/{user}/{nazwaTabeli}");

        try
        {
            uprawnienia = await Http.GetFromJsonAsync<List<UprawnieniaPracownikaViewModel>>($"/api/ZwrocSatus/{user}/{nazwaTabeli}");
        }
        catch (System.Net.Http.HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            Console.WriteLine("Brak danych!!!");
            await _message.Error("Brak danych - status użytkownika");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await _message.Error(ex.Message);
        }

        if (uprawnienia != null)
        {
            if (uprawnienia.Count > 0)
            {
                var znalezioneElementy = uprawnienia.Where(uprawnienie => uprawnienie.TableName == nazwaTabeli);
                Console.WriteLine("Znaleziono uprawnienia dla użytkownika: " + user + " w tabeli: " + nazwaTabeli + " ilość rekordów: " + znalezioneElementy.Count());
                if (znalezioneElementy.Any())
                {
                    var szuk = znalezioneElementy.FirstOrDefault(x => x.TableName == nazwaTabeli);
                    if (szuk != null)
                    {
                        boolOdczyt = szuk.Odczyt;
                        boolZmiana = szuk.Zmiana;
                        boolUsuniecia = szuk.Usuniecie;
                        boolAdmin = szuk.Administrator;
                        boolNowy = szuk.Zapis;
                        RowIdPracownika = szuk.RowId ?? "??????";
                    }
                }
            }
        }
    }

}