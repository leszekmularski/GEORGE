@using System.Text.Json

<h3 class="mb-0">📋 Lista zapisanych pojedynczych modeli okien</h3>

@if (StateContainer?.States is null || StateContainer.States.Count == 0)
{
    <p class="text-muted">Brak zapisanych stanów generatora.</p>
}
else
{
    <table class="table table-bordered table-striped">
        <thead class="table-light">
            <tr>
                <th>#</th>
                <th>IdRegion</th>
                <th>ZIndeks</th>
                <th>RowIdSystemu</th>
                <th>RowIdModelu</th>
                <th>WybranyModel</th>
                <th>WybranyKształt</th>
             @*    <th>Ilość konfiguracji (wszystkie)</th> *@
                <th>Punkty regionu</th>
                <th>Szczegóły</th>
            </tr>
        </thead>
        <tbody>
            @{
                var index = 0;
                foreach (var entry in StateContainer.States)
                {
                    <tr>
                        <td>@(++index)</td>
                        <td>@entry.Value.IdRegion</td>
                        <td>@entry.Value.ZIndeks</td>
                        <td>@entry.Value.RowIdSystemu</td>
                        <td>@entry.Value.RowIdModelu</td>
                        <td>@entry.Value.WybranyModel?.NazwaKonfiguracji</td>
                        <td>@entry.Value.WybranyKsztalt</td>
                        @*   <td>@(entry.Value.KonfiguracjeSystemu?.Count ?? 0)</td> *@

                        @if (entry.Value.Wierzcholki is not null && entry.Value.Wierzcholki.Any())
                        {
                            <div>
                                <p><strong>Ilość punktów:</strong> @entry.Value.Wierzcholki.Count()</p>
                                <ul>
                                    @for (int i = 0; i < entry.Value.Wierzcholki.Count; i++)
                                    {
                                        var point = entry.Value.Wierzcholki[i];
                                        <li><strong>Punkt @i:</strong> X: @Math.Round(point.X, 2), Y: @Math.Round(point.Y, 2)</li>
                                    }
                                </ul>
                            </div>
                        }
                        else
                        {
                            <p><em>Brak punktów.</em></p>
                        }

                        @if (entry.Value.WierzcholkiWartosciNominalne is not null && entry.Value.WierzcholkiWartosciNominalne.Any())
                        {
                            <div>
                                <p><strong>Wartości nominalne:</strong></p>
                                <ul>
                                    @for (int i = 0; i < entry.Value.WierzcholkiWartosciNominalne.Count; i++)
                                    {
                                        var point = entry.Value.WierzcholkiWartosciNominalne[i];
                                        <li><strong>Punkt @i:</strong> X: @Math.Round(point.X, 2), Y: @Math.Round(point.Y, 2)</li>
                                    }
                                </ul>
                            </div>
                        }
                        else
                        {
                            <p><em>Brak wartości nominalnych.</em></p>
                        }

                        <td>
                            <button class="btn btn-sm btn-info" @onclick="@(() => PokazSzczegoly(entry.Value))">🔍</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@if (szczegolyWidoczne && wybranyStan != null)
{
    <div class="card mt-3">
        <div class="card-header">
            <strong>Szczegóły GeneratorState:</strong>
            <button class="btn-close float-end" @onclick="@(() => szczegolyWidoczne = false)"></button>
        </div>
        <div class="card-body">
            <pre>@JsonSerializer.Serialize(wybranyStan, new JsonSerializerOptions { WriteIndented = true })</pre>
        </div>
    </div>
}

@code {
    [Parameter]
    public GeneratorStateContainer? StateContainer { get; set; }

    private GeneratorState? wybranyStan;
    private bool szczegolyWidoczne = false;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("GeneratorStateViewer initialized.");
        await Task.CompletedTask;
    }

    private void PokazSzczegoly(GeneratorState stan)
    {
        wybranyStan = stan;
        szczegolyWidoczne = true;
    }

}
