@page "/KonfiguratorPolaczen"
@inject HttpClient Http
@inject NavigationManager Navigation
@using GEORGE.Shared.Models
@using GEORGE.Shared.Class
@inject IMessageService _message
@inject INotificationService _notice
@inject Utilities.ILocalStorage LocalStorage
@inject IJSRuntime JSRuntime
@using System.Net

<style>
    .image-select {
    width: 200px;
    font-size: 16px;
    padding: 5px;
    }

    .preview {
    margin-top: 10px;
    text-align: center;
    }

    .preview img {
    width: 80px;
    height: auto;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
    }
</style>

<div class="d-flex justify-content-between align-items-center mt-3">
    <h3 class="text-center flex-grow-1">
        📌 Konfigurator połączeń elementów
    </h3>
    <button class="btn btn-primary mb-3" @onclick="GoBack">
        <i class="fas fa-arrow-left"></i> Wróć do poprzedniej strony
    </button>
</div>

<div class="container mt-4">

    <!-- 🔹 Wybór systemu -->
    <Tooltip Placement="@Placement.TopRight" Style="width:100%;" Title="Otwórz konfigurator nowego systemu lub wybierz go z listy">
        <div class="d-flex align-items-center" style="width:100%;">
            @if (Systemy != null && Systemy.Any())
            {
                <select class="form-select me-2" @onchange="@(async (args) => await OnSystemSelected(args))">
                    <option value="" disabled selected>-- Wybierz system --</option>
                    @foreach (var system in Systemy)
                    {
                        <option value="@system.RowId">@system.Nazwa_Systemu</option>
                    }
                </select>
            }
        </div>
    </Tooltip>

    <h3>Konfiguracja Modeli</h3>

    <!-- 🔘 Przycisk dodawania nowego modelu -->
    <button style="width:100%;" class="btn btn-success mb-3" @onclick="DodajNowy">
        <i class="fas fa-plus"></i> Dodaj Nowy Model
    </button>

    @if (ListaModeli != null && ListaModeli.Any())
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Typ</th>
                    <th>Zakres Kąta</th>
                    <th>Zakres Promienia</th>
                    <th>Wymiary</th>
                    <th>Uwagi</th>
                    <th>Miniaturka</th>
                    <th>Akcje</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var model in ListaModeli)
                {
                    <tr>
                        <td>@model.Typ</td>
                        <td>@model.KatWystapieniaZakresOdMin° - @model.KatWystapieniaZakresOdMax°</td>
                        <td>@model.PromienWystapieniaZakresOdMin mm - @model.PromienWystapieniaZakresOdMax mm</td>
                        <td>@model.KonstrMinSzer x @model.KonstrMinWys → @model.KonstrMaxSzer x @model.KonstrMaxWys</td>
                        <td>@model.Uwagi</td>
                        <td>
                            @if (model.Rysunek != null && model.Rysunek.Length > 0)
                            {
                                <img src="data:image/png;base64,@Convert.ToBase64String(model.Rysunek)" width="60" height="60" />
                            }
                            else
                            {
                                <span class="text-muted">Brak</span>
                            }
                        </td>
                        <td>
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => Edytuj(model.Id, model.RowId.ToString(), model.NazwaKonfiguracji)">
                                <i class="fas fa-edit"></i> Edytuj
                            </button>
                            <button class="btn btn-danger btn-sm me-2" @onclick="() => Usun(model.Id)">
                                <i class="fas fa-trash-alt"></i> Usuń
                            </button>
                            <button class="btn btn-info btn-sm" @onclick="() => PokazPowiazane(model.RowId.ToString(), model.NazwaKonfiguracji)">
                                <i class="fas fa-eye"></i> 🛠️ @(PokazanyModelRowId == model.RowId.ToString() ? $"Powiązane : {WybralesElement}" : "Wszystkie")
                            </button>
                        </td>
                    </tr>
                }
            </tbody>

        </table>
    }
    else
    {
        <p class="text-muted">Brak zapisanych modeli.</p>
    }

    @if (EdytowanyModel != null)
    {
        <EditForm Model="EdytowanyModel" OnValidSubmit="Zapisz">
            <DataAnnotationsValidator />
            <h4>@(EdytowanyModel.Id == 0 ? "Dodaj Nowy Model" : "Edytuj Model")</h4>
            <div class="mb-3">
                <label class="form-label">Nazwa konfigurajcji:</label>
                <InputText required class="form-control" @bind-Value="EdytowanyModel.NazwaKonfiguracji" />
            </div>
            <div class="mb-3">
                <label class="form-label">Typ profilu</label>
                <Select required Mode="SelectMode.Default"
                DataSource="@_typ"
                @bind-Value="EdytowanyModel.Typ"
                LabelName="@nameof(Typ.Nazwa)"
                ValueName="@nameof(Typ.Nazwa)"
                Class="form-select">
                </Select>
            </div>
            <div class="row">
                <div class="col">
                    <label class="form-label">Kąt (min):</label>
                    <Microsoft.AspNetCore.Components.Forms.InputNumber class="form-control" @bind-Value="EdytowanyModel.KatWystapieniaZakresOdMin" />
                </div>
                <div class="col">
                    <label class="form-label">Kąt (max):</label>
                    <Microsoft.AspNetCore.Components.Forms.InputNumber class="form-control" @bind-Value="EdytowanyModel.KatWystapieniaZakresOdMax" />
                </div>
            </div>
            <div class="row mt-2">
                <div class="col">
                    <label class="form-label">Promień (min):</label>
                    <Microsoft.AspNetCore.Components.Forms.InputNumber class="form-control" @bind-Value="EdytowanyModel.PromienWystapieniaZakresOdMin" />
                </div>
                <div class="col">
                    <label class="form-label">Promień (max):</label>
                    <Microsoft.AspNetCore.Components.Forms.InputNumber class="form-control" @bind-Value="EdytowanyModel.PromienWystapieniaZakresOdMax" />
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <label class="form-label">Naddatek na zgrzew na stronę:</label>
                    <Microsoft.AspNetCore.Components.Forms.InputNumber class="form-control" @bind-Value="EdytowanyModel.NaddatekNaZgrzewNaStrone" />
                </div>
                <div class="col">
                    <label class="form-label">Zwiększ długość elementy gdy łączone elementy nie mają 90 stopni:</label>
                    <Microsoft.AspNetCore.Components.Forms.InputNumber class="form-control" @bind-Value="EdytowanyModel.ZwiekszNaddatekGdyKatInny90" />
                </div>
            </div>

            <div class="container-fluid h-100 d-flex flex-column justify-content-center align-items-center">
                <div class="row w-100 flex-grow-1">
                    <!-- Połączenie Naroży 1 -->
                    <div class="col-md-6 d-flex flex-column align-items-center justify-content-center">
                        <label class="form-label">Połączenie Naroży 1:</label>
                        <div class="preview" @onclick="() => ChangeImage(1)">
                            <img src="@SelectedImage1.ImageUrl" alt="@SelectedImage1.Name" class="img-fluid img-thumbnail shadow" />
                            <p class="text-center">Wybrałeś: @SelectedImage1.Name</p>
                        </div>
                    </div>

                    <!-- Połączenie Naroży 2 -->
                    <div class="col-md-6 d-flex flex-column align-items-center justify-content-center">
                        <label class="form-label">Połączenie Naroży 2:</label>
                        <div class="preview" @onclick="() => ChangeImage(2)">
                            <img src="@SelectedImage2.ImageUrl" alt="@SelectedImage2.Name" class="img-fluid img-thumbnail shadow" />
                            <p class="text-center">Wybrałeś: @SelectedImage2.Name</p>
                        </div>
                    </div>
                </div>

                <div class="row w-100 flex-grow-1">
                    <!-- Połączenie Naroży 3 -->
                    <div class="col-md-6 d-flex flex-column align-items-center justify-content-center">
                        <label class="form-label">Połączenie Naroży 3:</label>
                        <div class="preview" @onclick="() => ChangeImage(3)">
                            <img src="@SelectedImage3.ImageUrl" alt="@SelectedImage3.Name" class="img-fluid img-thumbnail shadow" />
                            <p class="text-center">Wybrałeś: @SelectedImage3.Name</p>
                        </div>
                    </div>

                    <!-- Połączenie Naroży 4 -->
                    <div class="col-md-6 d-flex flex-column align-items-center justify-content-center">
                        <label class="form-label">Połączenie Naroży 4:</label>
                        <div class="preview" @onclick="() => ChangeImage(4)">
                            <img src="@SelectedImage4.ImageUrl" alt="@SelectedImage4.Name" class="img-fluid img-thumbnail shadow" />
                            <p class="text-center">Wybrałeś: @SelectedImage4.Name</p>
                        </div>
                    </div>
                </div>
            </div>


            <div class="mt-3">
                <label class="form-label">Uwagi:</label>
                <InputText class="form-control" @bind-Value="EdytowanyModel.Uwagi" />
            </div>
            <div class="mt-3">
                <label class="form-label">Obrazek DXF:</label>
                <InputFile OnChange="WczytajRysunek" />
            </div>
            <div class="mt-3">
                <button type="submit" class="btn btn-primary">Zapisz</button>
                <button type="button" class="btn btn-secondary ms-2" @onclick="Anuluj">Anuluj</button>
            </div>
        </EditForm>

        <br/>
    }

    @*     <h4>🛠️ Powiązania elementów</h4>
    <button class="btn btn-info mb-3" @onclick="TogglePowiazane">
        <i class="fas fa-eye"></i> @(PokazTylkoPowiazane ? "Pokaż wszystkie" : "Pokaż powiązane elementy")
    </button> *@
    @if (KonfiguracjeSystemu != null && KonfiguracjeSystemu.Any())
    {
        <h4>🛠️ Powiązania elementów dla Modelu: @(PokazanyModelRowId != null ? $"->{WybralesElement}" : "Wszystkie")</h4>

        <table class="table table-striped table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>Nazwa</th>
                    <th>Indeks</th>
                    <th>Uwagi</th>
                    <th>Miniaturka</th>
                    <th>Akcje</th>
                </tr>
            </thead>
            <tbody>
                @if (PowiazanyModel == null)
                {
                    @foreach (var konf in KonfiguracjeSystemu)
                    {
                        <tr>
                            <td>@konf.Nazwa</td>
                            <td>@konf.Indeks</td>
                            <td>@konf.Uwagi</td>
                            <td>
                                @if (konf.Rysunek != null && konf.Rysunek.Length > 0)
                                {
                                    <img src="@RysunekToBase64(konf.Rysunek)" alt="Miniatura" style="width: 50px; height: auto;" />
                                }
                                else
                                {
                                    <span class="text-muted">Brak</span>
                                }
                            </td>
                            <td>
                                <Checkbox @bind-Value="konf.CzyWybrany">Połącz element z konfiguracją</Checkbox>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    @foreach (var konf in PowiazanyModel.KonfSystem)
                    {
                        <tr>
                            <td>@konf.Nazwa</td>
                            <td>@konf.Indeks</td>
                            <td>@konf.Uwagi</td>
                            <td>
                                @if (konf.Rysunek != null && konf.Rysunek.Length > 0)
                                {
                                    <img src="@RysunekToBase64(konf.Rysunek)" alt="Miniatura" style="width: 50px; height: auto;" />
                                }
                                else
                                {
                                    <span class="text-muted">Brak</span>
                                }
                            </td>
                            <td>
                                <Checkbox @bind-Value="konf.CzyWybrany">Połącz element z konfiguracją</Checkbox>
                            </td>
                        </tr>
                    }
                }

            </tbody>
        </table>
    }


</div>

@code {
    private bool PokazTylkoPowiazane = false;

    private List<SystemyOkienne>? Systemy;

    private List<KonfSystem>? KonfiguracjeSystemu;

    private string apiUrl = "api/konfmodele";

    private List<KonfModele>? ListaModeli;
    private KonfModele? EdytowanyModel;

    private string SelectedSystemId = "";

    private string? PokazanyModelRowId;
    private MVCKonfModele? PowiazanyModel;

    protected override async Task OnInitializedAsync()
    {
        await Laduj_Uprawnienia();

        Systemy = await Http.GetFromJsonAsync<List<SystemyOkienne>>("api/systemy-okienne");
    }

    private async Task OnSystemSelected(ChangeEventArgs e)
    {
        SelectedSystemId = e.Value.ToString();

        Console.WriteLine($"Wybrano system o ID: {SelectedSystemId}");

        if (string.IsNullOrEmpty(SelectedSystemId))
        { 
            PowiazanyModel = null;

            if (KonfiguracjeSystemu != null) KonfiguracjeSystemu.Clear();
            return;
        }

        // Możesz dodać dalszą logikę, np. przekierowanie do szczegółów systemu
        PowiazanyModel = null;

        KonfiguracjeSystemu = await Http.GetFromJsonAsync<List<KonfSystem>>($"api/konfsystem/FIN_DROWID/{SelectedSystemId}");

        ListaModeli = await Http.GetFromJsonAsync<List<KonfModele>>("api/konfmodele/");

    }

    // private void TogglePowiazane()
    // {
    //     PokazTylkoPowiazane = !PokazTylkoPowiazane;
    // }

    string WybralesElement = "";

    private async Task PokazPowiazane(string rowId, string nazwaWybaranego)
    {
        WybralesElement = nazwaWybaranego;

        if (SelectedImage1 != null && SelectedImage2 != null && SelectedImage3 != null && SelectedImage4 != null)
        {
            SelectedImage1 = new ImageOption();
            SelectedImage2 = new ImageOption();
            SelectedImage3 = new ImageOption();
            SelectedImage4 = new ImageOption();
        }

        if (PokazanyModelRowId == rowId)
        {
            PokazanyModelRowId = null;
            PowiazanyModel = null;
        }
        else
        {
            PokazanyModelRowId = rowId;
            PowiazanyModel = await Http.GetFromJsonAsync<MVCKonfModele>($"api/konfmodeleelementy/powiazaniajuzzaznaczone/{rowId}");

            PowiazanyModel?.KonfSystem?.ForEach(e => e.CzyWybrany = true);

            if (EdytowanyModel != null && !string.IsNullOrEmpty(EdytowanyModel.PolaczenieNaroza))
            {
                var powiazanyModel = EdytowanyModel.PolaczenieNaroza.Split(';');
                if (powiazanyModel.Length > 3)
                {
                    SelectedImage1 = ImageOptions1.FirstOrDefault(x => x.Value == powiazanyModel[0].Trim()) ?? new ImageOption();
                    SelectedImage2 = ImageOptions2.FirstOrDefault(x => x.Value == powiazanyModel[1].Trim()) ?? new ImageOption();
                    SelectedImage3 = ImageOptions3.FirstOrDefault(x => x.Value == powiazanyModel[2].Trim()) ?? new ImageOption();
                    SelectedImage4 = ImageOptions4.FirstOrDefault(x => x.Value == powiazanyModel[3].Trim()) ?? new ImageOption();

                    Console.WriteLine($"EdytowanyModel.PolaczenieNaroza: {EdytowanyModel.PolaczenieNaroza}");
                }
            }
        }

        StateHasChanged(); // Wymusza odświeżenie UI
    }

    
    private string RysunekToBase64(byte[]? imageData)
    {
        if (imageData == null || imageData.Length == 0)
        {
            return "data:image/png;base64,"; // Zapobiega błędom
        }

        return $"data:image/png;base64,{Convert.ToBase64String(imageData)}";
    }

    private async Task DodajNowy()
    {
        PowiazanyModel = null;
        PokazanyModelRowId = null;
        EdytowanyModel = new KonfModele();

        if (!string.IsNullOrEmpty(SelectedSystemId))
            KonfiguracjeSystemu = await Http.GetFromJsonAsync<List<KonfSystem>>($"api/konfsystem/FIN_DROWID/{SelectedSystemId}");
    }

    private async Task Edytuj(int id, string rowId, string nazwaWybaranego)
    {
        EdytowanyModel = await Http.GetFromJsonAsync<KonfModele>($"{apiUrl}/{id}");

        if (EdytowanyModel != null)
        {
            await PokazPowiazane(rowId, nazwaWybaranego);
        }
    }

    private async Task Zapisz()
    {

        if (EdytowanyModel == null)
        {
            Console.WriteLine("EdytowanyModel ma wartość NULL");
            await _message.Error("EdytowanyModel ma wartość NULL");
            return;
        }

        if (string.IsNullOrEmpty(EdytowanyModel.RowId.ToString()))
        {
            Console.WriteLine("EdytowanyModel.RowId ma wartość NULL");
            await _message.Error("EdytowanyModel.RowId ma wartość NULL");
            return;
        }

        EdytowanyModel.PolaczenieNaroza = $"{SelectedImage1?.Value ?? "BRAK"};" +
                                       $"{SelectedImage2?.Value ?? "BRAK"};" +
                                       $"{SelectedImage3?.Value ?? "BRAK"};" +
                                       $"{SelectedImage4?.Value ?? "BRAK"}";

        if (EdytowanyModel.Id == 0)
        {
            var response = await Http.PostAsJsonAsync(apiUrl, EdytowanyModel);

            if (response.IsSuccessStatusCode)
            {
                EdytowanyModel = await response.Content.ReadFromJsonAsync<KonfModele>() 
                                 ?? new KonfModele(); // 🔥 Obsługa przypadku, gdyby coś poszło nie tak
            }
            else
            {
                Console.WriteLine($"❌ Błąd API: {response.StatusCode}");
                await _message.Error($"❌ Błąd API: {response.StatusCode}");
            }
        }
        else
        {
            var response = await Http.PutAsJsonAsync($"{apiUrl}/{EdytowanyModel.Id}", EdytowanyModel);

            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"❌ Błąd API: {response.StatusCode}");
                await _message.Error($"❌ Błąd API: {response.StatusCode}");
            }
        }
        // Pobieramy istniejące powiązania dla modelu
        var existingLinks = await Http.GetFromJsonAsync<List<KonfModeleElementy>>($"api/konfmodeleelementy/powiazania/{EdytowanyModel.RowId.ToString()}");

        // Lista do zapisania
        List<KonfModeleElementy> nowePowiazania = new();

        if (PowiazanyModel != null)
        {
            KonfiguracjeSystemu = PowiazanyModel.KonfSystem;
        }

        foreach (var konf in KonfiguracjeSystemu.Where(k => k.CzyWybrany))
        {
            // Sprawdzamy, czy już istnieje w bazie
            if (!existingLinks.Any(x => x.RowIdElement == konf.RowId))
            {
                nowePowiazania.Add(new KonfModeleElementy
                    {
                        RowId = Guid.NewGuid(),
                        RowIdSystem = Guid.Parse(SelectedSystemId),
                        RowIdElement = konf.RowId,
                        RowIdKonfModele = EdytowanyModel.RowId,
                        NazwaKonfiguracji = EdytowanyModel.NazwaKonfiguracji,
                        KtoZapisal = "Użytkownik"
                    });
            }
        }

        // Wysyłamy nowo dodane powiązania do API
        if (nowePowiazania.Count > 0)
        {
            await Http.PostAsJsonAsync($"api/konfmodeleelementy/powiazania", nowePowiazania);
        }

        // Usuwamy powiązania, które użytkownik odznaczył
        var usunPowiazania = existingLinks
            .Where(x => !KonfiguracjeSystemu.Any(k => k.CzyWybrany && k.RowId == x.RowIdElement))
            .Select(x => x.Id)
            .ToList();

        if (usunPowiazania.Count > 0)
        {
            await Http.PostAsJsonAsync($"api/konfmodeleelementy/powiazania/usun", usunPowiazania);
        }

        // Odświeżenie listy modeli
        ListaModeli = await Http.GetFromJsonAsync<List<KonfModele>>(apiUrl);
        EdytowanyModel = null;
    }


    private async Task Usun(int id)
    {
        await Http.DeleteAsync($"{apiUrl}/{id}");
        ListaModeli = await Http.GetFromJsonAsync<List<KonfModele>>(apiUrl);
    }

    private void Anuluj()
    {
        EdytowanyModel = null;
    }

    private async Task WczytajRysunek(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            EdytowanyModel.Rysunek = buffer;
        }
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }


    private bool boolOdczyt = false;
    private bool boolZmiana = false;
    private bool boolUsuniecia = false;
    private bool boolAdmin = false;
    private bool boolNowy = false;
    private string RowIdPracownika = "";
    private string? user;
    private bool isNotDisabled => !boolZmiana;
    private List<UprawnieniaPracownikaViewModel>? uprawnienia;

    private async Task Laduj_Uprawnienia()
    {
        user = await LocalStorage.GetStringAsync("user");

        if (string.IsNullOrEmpty(user))
        {
            //NavigationManager.NavigateTo($"", true);
            return;
        }

        string nazwaTabeli = "SystemyOkienne";

        Console.WriteLine($"api/ZwrocSatus/{user}/{nazwaTabeli}");

        try
        {
            uprawnienia = await Http.GetFromJsonAsync<List<UprawnieniaPracownikaViewModel>>($"/api/ZwrocSatus/{user}/{nazwaTabeli}");
        }
        catch (System.Net.Http.HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            Console.WriteLine("Brak danych!!!");
            await _message.Error("Brak danych - status użytkownika");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await _message.Error(ex.Message);
        }

        if (uprawnienia != null)
        {
            if (uprawnienia.Count > 0)
            {
                var znalezioneElementy = uprawnienia.Where(uprawnienie => uprawnienie.TableName == nazwaTabeli);
                Console.WriteLine("Znaleziono uprawnienia dla użytkownika: " + user + " w tabeli: " + nazwaTabeli + " ilość rekordów: " + znalezioneElementy.Count());
                if (znalezioneElementy.Any())
                {
                    var szuk = znalezioneElementy.FirstOrDefault(x => x.TableName == nazwaTabeli);
                    if (szuk != null)
                    {
                        boolOdczyt = szuk.Odczyt;
                        boolZmiana = szuk.Zmiana;
                        boolUsuniecia = szuk.Usuniecie;
                        boolAdmin = szuk.Administrator;
                        boolNowy = szuk.Zapis;
                        RowIdPracownika = szuk.RowId ?? "??????";
                    }
                }
            }
        }
    }

    record Typ(string Nazwa);
    private List<Typ> _typ = new List<Typ>
        {
            new Typ(""),
            new Typ("Rama"),
            new Typ("Skrzydło"),
            new Typ("Słupek ruchomy"),
            new Typ("Słupek stały"),
            new Typ("Listwa przyszybowa"),
        };

    // Lista dostępnych opcji
    private List<ImageOption> ImageOptions1 = new()
    {
        new ImageOption { Name = "Nie wybrano", Value = "BRAK", ImageUrl = "images/GL_0_NULL.png" },
        new ImageOption { Name = "Typ 1", Value = "180-T1", ImageUrl = "images/GL_180_T1.png" },
        new ImageOption { Name = "Typ 2", Value = "180-T2", ImageUrl = "images/GL_180_T2.png" },
        new ImageOption { Name = "Typ 3", Value = "180-T3", ImageUrl = "images/GL_180_T3.png" }
    };

    private List<ImageOption> ImageOptions2 = new()
    {
        new ImageOption { Name = "Nie wybrano", Value = "BRAK", ImageUrl = "images/GL_0_NULL.png" },
        new ImageOption { Name = "Typ 1", Value = "90-T1", ImageUrl = "images/GL_90_T1.png" },
        new ImageOption { Name = "Typ 2", Value = "90-T2", ImageUrl = "images/GL_90_T2.png" },
        new ImageOption { Name = "Typ 3", Value = "90-T3", ImageUrl = "images/GL_90_T3.png" }
    };

    private List<ImageOption> ImageOptions3 = new()
    {
        new ImageOption { Name = "Nie wybrano", Value = "BRAK", ImageUrl = "images/GL_0_NULL.png" },
        new ImageOption { Name = "Typ 1", Value = "0-T1", ImageUrl = "images/GL_0_T1.png" },
        new ImageOption { Name = "Typ 2", Value = "0-T2", ImageUrl = "images/GL_0_T2.png" },
        new ImageOption { Name = "Typ 3", Value = "0-T3", ImageUrl = "images/GL_0_T3.png" }
    };

    private List<ImageOption> ImageOptions4 = new()
    {
        new ImageOption { Name = "Nie wybrano", Value = "BRAK", ImageUrl = "images/GL_0_NULL.png" },
        new ImageOption { Name = "Typ 1", Value = "270-T1", ImageUrl = "images/GL_270_T1.png" },
        new ImageOption { Name = "Typ 2", Value = "270-T2", ImageUrl = "images/GL_270_T2.png" },
        new ImageOption { Name = "Typ 3", Value = "270-T3", ImageUrl = "images/GL_270_T3.png" }
    };

    private ImageOption? SelectedImage1;
    private ImageOption? SelectedImage2;
    private ImageOption? SelectedImage3;
    private ImageOption? SelectedImage4;

    protected override void OnInitialized()
    {
        // Domyślnie pierwsze obrazki z listy
        SelectedImage1 = ImageOptions1.First();
        SelectedImage2 = ImageOptions2.First();
        SelectedImage3 = ImageOptions3.First();
        SelectedImage4 = ImageOptions4.First();
    }

    private void ChangeImage(int corner)
    {
        switch (corner)
        {
            case 1:
                SelectedImage1 = GetNextImage(SelectedImage1, ImageOptions1);
                break;
            case 2:
                SelectedImage2 = GetNextImage(SelectedImage2, ImageOptions2);
                break;
            case 3:
                SelectedImage3 = GetNextImage(SelectedImage3, ImageOptions3);
                break;
            case 4:
                SelectedImage4 = GetNextImage(SelectedImage4, ImageOptions4);
                break;
        }
    }

    private ImageOption GetNextImage(ImageOption currentImage, List<ImageOption> options)
    {
        int currentIndex = options.IndexOf(currentImage);
        int nextIndex = (currentIndex + 1) % options.Count; // Przechodzenie w kółko
        return options[nextIndex];
    }

    private class ImageOption
    {
        public string? Name { get; set; }
        public string? Value { get; set; }
        public string? ImageUrl { get; set; }
    }


}
